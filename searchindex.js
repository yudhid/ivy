Search.setIndex({"docnames": ["backend_handler", "backend_handler/ContextManager:\n    def __init__", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/try_import_ivy_jax", "backend_handler/try_import_ivy_mxnet", "backend_handler/try_import_ivy_numpy", "backend_handler/try_import_ivy_tf", "backend_handler/try_import_ivy_torch", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "contributing", "contributing/0_setting_up", "contributing/1_the_basics", "contributing/4_open_tasks", "contributing/building_the_docs", "data_classes/array/activations", "data_classes/array/activations/ArrayWithActivations", "data_classes/array/conversions", "data_classes/array/conversions/args_to_ivy", "data_classes/array/conversions/args_to_native", "data_classes/array/conversions/to_ivy", "data_classes/array/conversions/to_native", "data_classes/array/creation", "data_classes/array/creation/ArrayWithCreation", "data_classes/array/data_type", "data_classes/array/data_type/ArrayWithDataTypes", "data_classes/array/device", "data_classes/array/device/ArrayWithDevice", "data_classes/array/elementwise", "data_classes/array/elementwise/ArrayWithElementwise", "data_classes/array/general", "data_classes/array/general/ArrayWithGeneral", "data_classes/array/gradients", "data_classes/array/gradients/ArrayWithGradients", "data_classes/array/image", "data_classes/array/image/ArrayWithImage", "data_classes/array/layers", "data_classes/array/layers/ArrayWithLayers", "data_classes/array/linear_algebra", "data_classes/array/linear_algebra/ArrayWithLinearAlgebra", "data_classes/array/losses", "data_classes/array/losses/ArrayWithLosses", "data_classes/array/manipulation", "data_classes/array/manipulation/ArrayWithManipulation", "data_classes/array/norms", "data_classes/array/norms/ArrayWithNorms", "data_classes/array/random", "data_classes/array/random/ArrayWithRandom", "data_classes/array/searching", "data_classes/array/searching/ArrayWithSearching", "data_classes/array/set", "data_classes/array/set/ArrayWithSet", "data_classes/array/sorting", "data_classes/array/sorting/ArrayWithSorting", "data_classes/array/statistical", "data_classes/array/statistical/ArrayWithStatistical", "data_classes/array/utility", "data_classes/array/utility/ArrayWithUtility", "data_classes/array/wrapping", "data_classes/array/wrapping/add_ivy_array_instance_methods", "data_classes/container/activations", "data_classes/container/activations/ContainerWithActivations", "data_classes/container/base", "data_classes/container/base/ContainerBase", "data_classes/container/container", "data_classes/container/container/Container", "data_classes/container/container/MultiDevContainer", "data_classes/container/creation", "data_classes/container/creation/ContainerWithCreation", "data_classes/container/data_type", "data_classes/container/data_type/ContainerWithDataTypes", "data_classes/container/device", "data_classes/container/device/ContainerWithDevice", "data_classes/container/elementwise", "data_classes/container/elementwise/ContainerWithElementwise", "data_classes/container/general", "data_classes/container/general/ContainerWithGeneral", "data_classes/container/gradients", "data_classes/container/gradients/ContainerWithGradients", "data_classes/container/image", "data_classes/container/image/ContainerWithImage", "data_classes/container/layers", "data_classes/container/layers/ContainerWithLayers", "data_classes/container/linear_algebra", "data_classes/container/linear_algebra/ContainerWithLinearAlgebra", "data_classes/container/losses", "data_classes/container/losses/ContainerWithLosses", "data_classes/container/manipulation", "data_classes/container/manipulation/ContainerWithManipulation", "data_classes/container/norms", "data_classes/container/norms/ContainerWithNorms", "data_classes/container/random", "data_classes/container/random/ContainerWithRandom", "data_classes/container/searching", "data_classes/container/searching/ContainerWithSearching", "data_classes/container/set", "data_classes/container/set/ContainerWithSet", "data_classes/container/sorting", "data_classes/container/sorting/ContainerWithSorting", "data_classes/container/statistical", "data_classes/container/statistical/ContainerWithStatistical", "data_classes/container/utility", "data_classes/container/utility/ContainerWithUtility", "data_classes/container/wrapping", "data_classes/container/wrapping/add_ivy_container_instance_methods", "deep_dive", "deep_dive/0_navigating_the_code", "deep_dive/10_docstrings", "deep_dive/11_docstring_examples", "deep_dive/12_array_api_tests", "deep_dive/13_ivy_tests", "deep_dive/1_function_types", "deep_dive/2_backend_setting", "deep_dive/3_function_wrapping", "deep_dive/4_arrays", "deep_dive/5_containers", "deep_dive/6_data_types", "deep_dive/7_devices", "deep_dive/8_inplace_updates", "deep_dive/9_function_arguments", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/gelu", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/relu", "functional/ivy/activations/sigmoid", "functional/ivy/activations/softmax", "functional/ivy/activations/softplus", "functional/ivy/activations/tanh", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/arange", "functional/ivy/creation/asarray", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/eye", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/linspace", "functional/ivy/creation/logspace", "functional/ivy/creation/meshgrid", "functional/ivy/creation/native_array", "functional/ivy/creation/ones", "functional/ivy/creation/ones_like", "functional/ivy/creation/tril", "functional/ivy/creation/triu", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros_like", "functional/ivy/data_type", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/can_cast/can_cast_array", "functional/ivy/data_type/can_cast/can_cast_container", "functional/ivy/data_type/can_cast/can_cast_functional", "functional/ivy/data_type/can_cast/static_can_cast_container", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/result_type", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/device/DevClonedItem", "functional/ivy/device/DevClonedIter", "functional/ivy/device/DevClonedNest", "functional/ivy/device/DevDistItem", "functional/ivy/device/DevDistIter", "functional/ivy/device/DevDistNest", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__", "functional/ivy/device/DevMapper", "functional/ivy/device/DevMapperMultiProc", "functional/ivy/device/MultiDev:\n    def __init__", "functional/ivy/device/MultiDevItem", "functional/ivy/device/MultiDevIter", "functional/ivy/device/MultiDevNest", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev_clone", "functional/ivy/device/dev_clone_array", "functional/ivy/device/dev_clone_iter", "functional/ivy/device/dev_clone_nest", "functional/ivy/device/dev_dist", "functional/ivy/device/dev_dist_array", "functional/ivy/device/dev_dist_iter", "functional/ivy/device/dev_dist_nest", "functional/ivy/device/dev_unify", "functional/ivy/device/dev_unify_array", "functional/ivy/device/dev_unify_iter", "functional/ivy/device/dev_unify_nest", "functional/ivy/device/dev_util", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/abs/abs_array", "functional/ivy/elementwise/abs/abs_container", "functional/ivy/elementwise/abs/abs_functional", "functional/ivy/elementwise/abs/static_abs_container", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acos/acos_array", "functional/ivy/elementwise/acos/acos_container", "functional/ivy/elementwise/acos/acos_functional", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/acosh/acosh_array", "functional/ivy/elementwise/acosh/acosh_container", "functional/ivy/elementwise/acosh/acosh_functional", "functional/ivy/elementwise/add", "functional/ivy/elementwise/add/add_array", "functional/ivy/elementwise/add/add_container", "functional/ivy/elementwise/add/add_functional", "functional/ivy/elementwise/add/static_add_container", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asin/asin_array", "functional/ivy/elementwise/asin/asin_container", "functional/ivy/elementwise/asin/asin_functional", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/asinh/asinh_array", "functional/ivy/elementwise/asinh/asinh_container", "functional/ivy/elementwise/asinh/asinh_functional", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan/atan_array", "functional/ivy/elementwise/atan/atan_container", "functional/ivy/elementwise/atan/atan_functional", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atan2/atan2_array", "functional/ivy/elementwise/atan2/atan2_container", "functional/ivy/elementwise/atan2/atan2_functional", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/atanh/atanh_array", "functional/ivy/elementwise/atanh/atanh_container", "functional/ivy/elementwise/atanh/atanh_functional", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_and/bitwise_and_array", "functional/ivy/elementwise/bitwise_and/bitwise_and_container", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_or/bitwise_or_array", "functional/ivy/elementwise/bitwise_or/bitwise_or_container", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/ceil/ceil_array", "functional/ivy/elementwise/ceil/ceil_container", "functional/ivy/elementwise/ceil/ceil_functional", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cos/cos_array", "functional/ivy/elementwise/cos/cos_container", "functional/ivy/elementwise/cos/cos_functional", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/cosh/cosh_array", "functional/ivy/elementwise/cosh/cosh_container", "functional/ivy/elementwise/cosh/cosh_functional", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/divide/divide_array", "functional/ivy/elementwise/divide/divide_container", "functional/ivy/elementwise/divide/divide_functional", "functional/ivy/elementwise/divide/static_divide_container", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/equal/equal_array", "functional/ivy/elementwise/equal/equal_container", "functional/ivy/elementwise/equal/equal_functional", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/erf/erf_array", "functional/ivy/elementwise/erf/erf_container", "functional/ivy/elementwise/erf/erf_functional", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/exp/exp_array", "functional/ivy/elementwise/exp/exp_container", "functional/ivy/elementwise/exp/exp_functional", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/expm1/expm1_array", "functional/ivy/elementwise/expm1/expm1_container", "functional/ivy/elementwise/expm1/expm1_functional", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor/floor_array", "functional/ivy/elementwise/floor/floor_container", "functional/ivy/elementwise/floor/floor_functional", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/floor_divide/floor_divide_array", "functional/ivy/elementwise/floor_divide/floor_divide_container", "functional/ivy/elementwise/floor_divide/floor_divide_functional", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater/greater_array", "functional/ivy/elementwise/greater/greater_container", "functional/ivy/elementwise/greater/greater_functional", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/greater_equal/greater_equal_array", "functional/ivy/elementwise/greater_equal/greater_equal_container", "functional/ivy/elementwise/greater_equal/greater_equal_functional", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isfinite/isfinite_array", "functional/ivy/elementwise/isfinite/isfinite_container", "functional/ivy/elementwise/isfinite/isfinite_functional", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isinf/isinf_array", "functional/ivy/elementwise/isinf/isinf_container", "functional/ivy/elementwise/isinf/isinf_functional", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/isnan/isnan_array", "functional/ivy/elementwise/isnan/isnan_container", "functional/ivy/elementwise/isnan/isnan_functional", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less/less_array", "functional/ivy/elementwise/less/less_container", "functional/ivy/elementwise/less/less_functional", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/less_equal/less_equal_array", "functional/ivy/elementwise/less_equal/less_equal_container", "functional/ivy/elementwise/less_equal/less_equal_functional", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log/log_array", "functional/ivy/elementwise/log/log_container", "functional/ivy/elementwise/log/log_functional", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log10/log10_array", "functional/ivy/elementwise/log10/log10_container", "functional/ivy/elementwise/log10/log10_functional", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log1p/log1p_array", "functional/ivy/elementwise/log1p/log1p_container", "functional/ivy/elementwise/log1p/log1p_functional", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/log2/log2_array", "functional/ivy/elementwise/log2/log2_container", "functional/ivy/elementwise/log2/log2_functional", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logaddexp/logaddexp_array", "functional/ivy/elementwise/logaddexp/logaddexp_container", "functional/ivy/elementwise/logaddexp/logaddexp_functional", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_and/logical_and_array", "functional/ivy/elementwise/logical_and/logical_and_container", "functional/ivy/elementwise/logical_and/logical_and_functional", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_not/logical_not_array", "functional/ivy/elementwise/logical_not/logical_not_container", "functional/ivy/elementwise/logical_not/logical_not_functional", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_or/logical_or_array", "functional/ivy/elementwise/logical_or/logical_or_container", "functional/ivy/elementwise/logical_or/logical_or_functional", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/logical_xor/logical_xor_array", "functional/ivy/elementwise/logical_xor/logical_xor_container", "functional/ivy/elementwise/logical_xor/logical_xor_functional", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/multiply/multiply_array", "functional/ivy/elementwise/multiply/multiply_container", "functional/ivy/elementwise/multiply/multiply_functional", "functional/ivy/elementwise/multiply/static_multiply_container", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/negative/negative_array", "functional/ivy/elementwise/negative/negative_container", "functional/ivy/elementwise/negative/negative_functional", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/not_equal/not_equal_array", "functional/ivy/elementwise/not_equal/not_equal_container", "functional/ivy/elementwise/not_equal/not_equal_functional", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/positive/positive_array", "functional/ivy/elementwise/positive/positive_container", "functional/ivy/elementwise/positive/positive_functional", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/pow/pow_array", "functional/ivy/elementwise/pow/pow_container", "functional/ivy/elementwise/pow/pow_functional", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/remainder/remainder_array", "functional/ivy/elementwise/remainder/remainder_container", "functional/ivy/elementwise/remainder/remainder_functional", "functional/ivy/elementwise/round", "functional/ivy/elementwise/round/round_array", "functional/ivy/elementwise/round/round_container", "functional/ivy/elementwise/round/round_functional", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sign/sign_array", "functional/ivy/elementwise/sign/sign_container", "functional/ivy/elementwise/sign/sign_functional", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sin/sin_array", "functional/ivy/elementwise/sin/sin_container", "functional/ivy/elementwise/sin/sin_functional", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sinh/sinh_array", "functional/ivy/elementwise/sinh/sinh_container", "functional/ivy/elementwise/sinh/sinh_functional", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/sqrt/sqrt_array", "functional/ivy/elementwise/sqrt/sqrt_container", "functional/ivy/elementwise/sqrt/sqrt_functional", "functional/ivy/elementwise/square", "functional/ivy/elementwise/square/square_array", "functional/ivy/elementwise/square/square_container", "functional/ivy/elementwise/square/square_functional", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/subtract/static_subtract_container", "functional/ivy/elementwise/subtract/subtract_array", "functional/ivy/elementwise/subtract/subtract_container", "functional/ivy/elementwise/subtract/subtract_functional", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tan/static_tan_container", "functional/ivy/elementwise/tan/tan_array", "functional/ivy/elementwise/tan/tan_container", "functional/ivy/elementwise/tan/tan_functional", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/tanh/static_tanh_container", "functional/ivy/elementwise/tanh/tanh_array", "functional/ivy/elementwise/tanh/tanh_container", "functional/ivy/elementwise/tanh/tanh_functional", "functional/ivy/elementwise/trunc", "functional/ivy/elementwise/trunc/trunc_array", "functional/ivy/elementwise/trunc/trunc_container", "functional/ivy/elementwise/trunc/trunc_functional", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/all_equal/all_equal_array", "functional/ivy/general/all_equal/all_equal_container", "functional/ivy/general/all_equal/all_equal_functional", "functional/ivy/general/all_equal/static_all_equal_container", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/arrays_equal", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional", "functional/ivy/general/container_types", "functional/ivy/general/copy_array", "functional/ivy/general/cumprod", "functional/ivy/general/cumsum", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_repeat", "functional/ivy/general/exists", "functional/ivy/general/floormod", "functional/ivy/general/fourier_encode", "functional/ivy/general/gather", "functional/ivy/general/gather_nd", "functional/ivy/general/gather_nd/gather_nd_array", "functional/ivy/general/gather_nd/gather_nd_container", "functional/ivy/general/gather_nd/gather_nd_functional", "functional/ivy/general/gather_nd/static_gather_nd_container", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/has_nans", "functional/ivy/general/indices_where", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_native_array", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/one_hot", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/queue_timeout", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_nd", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_to_tuple", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_pow", "functional/ivy/general/supports_inplace", "functional/ivy/general/tmp_dir", "functional/ivy/general/to_list", "functional/ivy/general/to_numpy", "functional/ivy/general/to_scalar", "functional/ivy/general/try_else_none", "functional/ivy/general/unstack", "functional/ivy/general/value_is_nan", "functional/ivy/gradients", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_step/adam_step_array", "functional/ivy/gradients/adam_step/adam_step_container", "functional/ivy/gradients/adam_step/adam_step_functional", "functional/ivy/gradients/adam_step/static_adam_step_container", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/adam_update/adam_update_container", "functional/ivy/gradients/adam_update/adam_update_functional", "functional/ivy/gradients/adam_update/static_adam_update_container", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/is_variable/is_variable_container", "functional/ivy/gradients/is_variable/is_variable_functional", "functional/ivy/gradients/is_variable/static_is_variable_container", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lamb_update/lamb_update_container", "functional/ivy/gradients/lamb_update/lamb_update_functional", "functional/ivy/gradients/lamb_update/static_lamb_update_container", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/lars_update/lars_update_container", "functional/ivy/gradients/lars_update/lars_update_functional", "functional/ivy/gradients/lars_update/static_lars_update_container", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/optimizer_update/optimizer_update_container", "functional/ivy/gradients/optimizer_update/optimizer_update_functional", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/dropout", "functional/ivy/layers/linear", "functional/ivy/layers/lstm_update", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/linear_algebra", "functional/ivy/linear_algebra/cholesky", "functional/ivy/linear_algebra/cholesky/cholesky_array", "functional/ivy/linear_algebra/cholesky/cholesky_functional", "functional/ivy/linear_algebra/cross", "functional/ivy/linear_algebra/cross/cross_array", "functional/ivy/linear_algebra/cross/cross_functional", "functional/ivy/linear_algebra/det", "functional/ivy/linear_algebra/det/det_array", "functional/ivy/linear_algebra/det/det_functional", "functional/ivy/linear_algebra/diagonal", "functional/ivy/linear_algebra/diagonal/diagonal_array", "functional/ivy/linear_algebra/diagonal/diagonal_functional", "functional/ivy/linear_algebra/eigh", "functional/ivy/linear_algebra/eigh/eigh_array", "functional/ivy/linear_algebra/eigh/eigh_functional", "functional/ivy/linear_algebra/eigvalsh", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional", "functional/ivy/linear_algebra/inv", "functional/ivy/linear_algebra/inv/inv_array", "functional/ivy/linear_algebra/inv/inv_functional", "functional/ivy/linear_algebra/matmul", "functional/ivy/linear_algebra/matmul/matmul_array", "functional/ivy/linear_algebra/matmul/matmul_container", "functional/ivy/linear_algebra/matmul/matmul_functional", "functional/ivy/linear_algebra/matrix_norm", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional", "functional/ivy/linear_algebra/matrix_power", "functional/ivy/linear_algebra/matrix_rank", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional", "functional/ivy/linear_algebra/matrix_transpose", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional", "functional/ivy/linear_algebra/outer", "functional/ivy/linear_algebra/outer/outer_array", "functional/ivy/linear_algebra/outer/outer_functional", "functional/ivy/linear_algebra/pinv", "functional/ivy/linear_algebra/pinv/pinv_array", "functional/ivy/linear_algebra/pinv/pinv_functional", "functional/ivy/linear_algebra/qr", "functional/ivy/linear_algebra/qr/qr_array", "functional/ivy/linear_algebra/qr/qr_functional", "functional/ivy/linear_algebra/slogdet", "functional/ivy/linear_algebra/solve", "functional/ivy/linear_algebra/solve/solve_array", "functional/ivy/linear_algebra/solve/solve_functional", "functional/ivy/linear_algebra/svd", "functional/ivy/linear_algebra/svd/svd_array", "functional/ivy/linear_algebra/svd/svd_functional", "functional/ivy/linear_algebra/svdvals", "functional/ivy/linear_algebra/svdvals/svdvals_array", "functional/ivy/linear_algebra/svdvals/svdvals_functional", "functional/ivy/linear_algebra/tensordot", "functional/ivy/linear_algebra/tensordot/tensordot_array", "functional/ivy/linear_algebra/tensordot/tensordot_functional", "functional/ivy/linear_algebra/trace", "functional/ivy/linear_algebra/trace/trace_array", "functional/ivy/linear_algebra/trace/trace_functional", "functional/ivy/linear_algebra/vecdot", "functional/ivy/linear_algebra/vecdot/vecdot_array", "functional/ivy/linear_algebra/vecdot/vecdot_functional", "functional/ivy/linear_algebra/vector_norm", "functional/ivy/linear_algebra/vector_norm/vector_norm_array", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/cross_entropy/cross_entropy_array", "functional/ivy/losses/cross_entropy/cross_entropy_container", "functional/ivy/losses/cross_entropy/cross_entropy_functional", "functional/ivy/losses/cross_entropy/static_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/clip/clip_array", "functional/ivy/manipulation/clip/clip_container", "functional/ivy/manipulation/clip/clip_functional", "functional/ivy/manipulation/clip/static_clip_container", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/concat/concat_array", "functional/ivy/manipulation/concat/concat_container", "functional/ivy/manipulation/concat/concat_functional", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/constant_pad/constant_pad_array", "functional/ivy/manipulation/constant_pad/constant_pad_container", "functional/ivy/manipulation/constant_pad/constant_pad_functional", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/expand_dims/expand_dims_array", "functional/ivy/manipulation/expand_dims/expand_dims_container", "functional/ivy/manipulation/expand_dims/expand_dims_functional", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/flip/flip_array", "functional/ivy/manipulation/flip/flip_container", "functional/ivy/manipulation/flip/flip_functional", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/permute_dims/permute_dims_array", "functional/ivy/manipulation/permute_dims/permute_dims_container", "functional/ivy/manipulation/permute_dims/permute_dims_functional", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/repeat/repeat_array", "functional/ivy/manipulation/repeat/repeat_container", "functional/ivy/manipulation/repeat/repeat_functional", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/reshape/reshape_array", "functional/ivy/manipulation/reshape/reshape_container", "functional/ivy/manipulation/reshape/reshape_functional", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/roll/roll_array", "functional/ivy/manipulation/roll/roll_container", "functional/ivy/manipulation/roll/roll_functional", "functional/ivy/manipulation/roll/static_roll_container", "functional/ivy/manipulation/split", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/squeeze/squeeze_array", "functional/ivy/manipulation/squeeze/squeeze_container", "functional/ivy/manipulation/squeeze/squeeze_functional", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/stack/stack_array", "functional/ivy/manipulation/stack/stack_container", "functional/ivy/manipulation/stack/stack_functional", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/swapaxes/swapaxes_array", "functional/ivy/manipulation/swapaxes/swapaxes_container", "functional/ivy/manipulation/swapaxes/swapaxes_functional", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/tile/tile_array", "functional/ivy/manipulation/tile/tile_container", "functional/ivy/manipulation/tile/tile_functional", "functional/ivy/manipulation/zero_pad", "functional/ivy/manipulation/zero_pad/zero_pad_array", "functional/ivy/manipulation/zero_pad/zero_pad_container", "functional/ivy/manipulation/zero_pad/zero_pad_functional", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_indices_where", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/norms/layer_norm/layer_norm_array", "functional/ivy/norms/layer_norm/layer_norm_container", "functional/ivy/norms/layer_norm/layer_norm_functional", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/randint", "functional/ivy/random/randint/randint_functional", "functional/ivy/random/randint/static_randint_container", "functional/ivy/random/random_normal", "functional/ivy/random/random_uniform", "functional/ivy/random/random_uniform/random_uniform_container", "functional/ivy/random/random_uniform/random_uniform_functional", "functional/ivy/random/random_uniform/static_random_uniform_container", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmin", "functional/ivy/searching/nonzero", "functional/ivy/searching/where", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_counts/static_unique_counts_container", "functional/ivy/set/unique_counts/unique_counts_array", "functional/ivy/set/unique_counts/unique_counts_container", "functional/ivy/set/unique_counts/unique_counts_functional", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_values", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/argsort/argsort_array", "functional/ivy/sorting/argsort/argsort_container", "functional/ivy/sorting/argsort/argsort_functional", "functional/ivy/sorting/argsort/static_argsort_container", "functional/ivy/sorting/sort", "functional/ivy/sorting/sort/sort_array", "functional/ivy/sorting/sort/sort_container", "functional/ivy/sorting/sort/sort_functional", "functional/ivy/sorting/sort/static_sort_container", "functional/ivy/statistical", "functional/ivy/statistical/einsum", "functional/ivy/statistical/einsum/einsum_array", "functional/ivy/statistical/einsum/einsum_container", "functional/ivy/statistical/einsum/einsum_functional", "functional/ivy/statistical/max", "functional/ivy/statistical/max/max_array", "functional/ivy/statistical/max/max_container", "functional/ivy/statistical/max/max_functional", "functional/ivy/statistical/mean", "functional/ivy/statistical/mean/mean_array", "functional/ivy/statistical/mean/mean_container", "functional/ivy/statistical/mean/mean_functional", "functional/ivy/statistical/min", "functional/ivy/statistical/min/min_array", "functional/ivy/statistical/min/min_container", "functional/ivy/statistical/min/min_functional", "functional/ivy/statistical/prod", "functional/ivy/statistical/prod/prod_array", "functional/ivy/statistical/prod/prod_container", "functional/ivy/statistical/prod/prod_functional", "functional/ivy/statistical/std", "functional/ivy/statistical/std/std_array", "functional/ivy/statistical/std/std_container", "functional/ivy/statistical/std/std_functional", "functional/ivy/statistical/sum", "functional/ivy/statistical/sum/sum_array", "functional/ivy/statistical/sum/sum_container", "functional/ivy/statistical/sum/sum_functional", "functional/ivy/statistical/var", "functional/ivy/statistical/var/var_array", "functional/ivy/statistical/var/var_container", "functional/ivy/statistical/var/var_functional", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/all/all_array", "functional/ivy/utility/all/all_container", "functional/ivy/utility/all/all_functional", "functional/ivy/utility/any", "functional/ivy/utility/any/any_array", "functional/ivy/utility/any/any_container", "functional/ivy/utility/any/any_functional", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "roadmap", "stateful", "stateful/activations", "stateful/activations/GEGLU", "stateful/activations/GELU", "stateful/converters", "stateful/converters/to_ivy_module", "stateful/initializers", "stateful/initializers/Constant:\n    def __init__", "stateful/initializers/FirstLayerSiren", "stateful/initializers/GlorotUniform", "stateful/initializers/KaimingNormal:\n    def __init__", "stateful/initializers/Ones", "stateful/initializers/Siren", "stateful/initializers/Uniform:\n    def __init__", "stateful/initializers/Zeros", "stateful/layers", "stateful/layers/Conv1D", "stateful/layers/Conv1DTranspose", "stateful/layers/Conv2D", "stateful/layers/Conv2DTranspose", "stateful/layers/Conv3D", "stateful/layers/Conv3DTranspose", "stateful/layers/DepthwiseConv2D", "stateful/layers/Dropout", "stateful/layers/LSTM", "stateful/layers/Linear", "stateful/layers/MultiHeadAttention", "stateful/module", "stateful/module/Module", "stateful/norms", "stateful/norms/LayerNorm", "stateful/optimizers", "stateful/optimizers/Adam", "stateful/optimizers/LAMB", "stateful/optimizers/LARS", "stateful/optimizers/Optimizer", "stateful/optimizers/SGD", "stateful/sequential", "stateful/sequential/Sequential", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["backend_handler.rst", "backend_handler/ContextManager:\n    def __init__.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/try_import_ivy_jax.rst", "backend_handler/try_import_ivy_mxnet.rst", "backend_handler/try_import_ivy_numpy.rst", "backend_handler/try_import_ivy_tf.rst", "backend_handler/try_import_ivy_torch.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "contributing.rst", "contributing/0_setting_up.rst", "contributing/1_the_basics.rst", "contributing/4_open_tasks.rst", "contributing/building_the_docs.rst", "data_classes/array/activations.rst", "data_classes/array/activations/ArrayWithActivations.rst", "data_classes/array/conversions.rst", "data_classes/array/conversions/args_to_ivy.rst", "data_classes/array/conversions/args_to_native.rst", "data_classes/array/conversions/to_ivy.rst", "data_classes/array/conversions/to_native.rst", "data_classes/array/creation.rst", "data_classes/array/creation/ArrayWithCreation.rst", "data_classes/array/data_type.rst", "data_classes/array/data_type/ArrayWithDataTypes.rst", "data_classes/array/device.rst", "data_classes/array/device/ArrayWithDevice.rst", "data_classes/array/elementwise.rst", "data_classes/array/elementwise/ArrayWithElementwise.rst", "data_classes/array/general.rst", "data_classes/array/general/ArrayWithGeneral.rst", "data_classes/array/gradients.rst", "data_classes/array/gradients/ArrayWithGradients.rst", "data_classes/array/image.rst", "data_classes/array/image/ArrayWithImage.rst", "data_classes/array/layers.rst", "data_classes/array/layers/ArrayWithLayers.rst", "data_classes/array/linear_algebra.rst", "data_classes/array/linear_algebra/ArrayWithLinearAlgebra.rst", "data_classes/array/losses.rst", "data_classes/array/losses/ArrayWithLosses.rst", "data_classes/array/manipulation.rst", "data_classes/array/manipulation/ArrayWithManipulation.rst", "data_classes/array/norms.rst", "data_classes/array/norms/ArrayWithNorms.rst", "data_classes/array/random.rst", "data_classes/array/random/ArrayWithRandom.rst", "data_classes/array/searching.rst", "data_classes/array/searching/ArrayWithSearching.rst", "data_classes/array/set.rst", "data_classes/array/set/ArrayWithSet.rst", "data_classes/array/sorting.rst", "data_classes/array/sorting/ArrayWithSorting.rst", "data_classes/array/statistical.rst", "data_classes/array/statistical/ArrayWithStatistical.rst", "data_classes/array/utility.rst", "data_classes/array/utility/ArrayWithUtility.rst", "data_classes/array/wrapping.rst", "data_classes/array/wrapping/add_ivy_array_instance_methods.rst", "data_classes/container/activations.rst", "data_classes/container/activations/ContainerWithActivations.rst", "data_classes/container/base.rst", "data_classes/container/base/ContainerBase.rst", "data_classes/container/container.rst", "data_classes/container/container/Container.rst", "data_classes/container/container/MultiDevContainer.rst", "data_classes/container/creation.rst", "data_classes/container/creation/ContainerWithCreation.rst", "data_classes/container/data_type.rst", "data_classes/container/data_type/ContainerWithDataTypes.rst", "data_classes/container/device.rst", "data_classes/container/device/ContainerWithDevice.rst", "data_classes/container/elementwise.rst", "data_classes/container/elementwise/ContainerWithElementwise.rst", "data_classes/container/general.rst", "data_classes/container/general/ContainerWithGeneral.rst", "data_classes/container/gradients.rst", "data_classes/container/gradients/ContainerWithGradients.rst", "data_classes/container/image.rst", "data_classes/container/image/ContainerWithImage.rst", "data_classes/container/layers.rst", "data_classes/container/layers/ContainerWithLayers.rst", "data_classes/container/linear_algebra.rst", "data_classes/container/linear_algebra/ContainerWithLinearAlgebra.rst", "data_classes/container/losses.rst", "data_classes/container/losses/ContainerWithLosses.rst", "data_classes/container/manipulation.rst", "data_classes/container/manipulation/ContainerWithManipulation.rst", "data_classes/container/norms.rst", "data_classes/container/norms/ContainerWithNorms.rst", "data_classes/container/random.rst", "data_classes/container/random/ContainerWithRandom.rst", "data_classes/container/searching.rst", "data_classes/container/searching/ContainerWithSearching.rst", "data_classes/container/set.rst", "data_classes/container/set/ContainerWithSet.rst", "data_classes/container/sorting.rst", "data_classes/container/sorting/ContainerWithSorting.rst", "data_classes/container/statistical.rst", "data_classes/container/statistical/ContainerWithStatistical.rst", "data_classes/container/utility.rst", "data_classes/container/utility/ContainerWithUtility.rst", "data_classes/container/wrapping.rst", "data_classes/container/wrapping/add_ivy_container_instance_methods.rst", "deep_dive.rst", "deep_dive/0_navigating_the_code.rst", "deep_dive/10_docstrings.rst", "deep_dive/11_docstring_examples.rst", "deep_dive/12_array_api_tests.rst", "deep_dive/13_ivy_tests.rst", "deep_dive/1_function_types.rst", "deep_dive/2_backend_setting.rst", "deep_dive/3_function_wrapping.rst", "deep_dive/4_arrays.rst", "deep_dive/5_containers.rst", "deep_dive/6_data_types.rst", "deep_dive/7_devices.rst", "deep_dive/8_inplace_updates.rst", "deep_dive/9_function_arguments.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/tanh.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/can_cast/can_cast_array.rst", "functional/ivy/data_type/can_cast/can_cast_container.rst", "functional/ivy/data_type/can_cast/can_cast_functional.rst", "functional/ivy/data_type/can_cast/static_can_cast_container.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/device/DevClonedItem.rst", "functional/ivy/device/DevClonedIter.rst", "functional/ivy/device/DevClonedNest.rst", "functional/ivy/device/DevDistItem.rst", "functional/ivy/device/DevDistIter.rst", "functional/ivy/device/DevDistNest.rst", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__.rst", "functional/ivy/device/DevMapper.rst", "functional/ivy/device/DevMapperMultiProc.rst", "functional/ivy/device/MultiDev:\n    def __init__.rst", "functional/ivy/device/MultiDevItem.rst", "functional/ivy/device/MultiDevIter.rst", "functional/ivy/device/MultiDevNest.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev_clone.rst", "functional/ivy/device/dev_clone_array.rst", "functional/ivy/device/dev_clone_iter.rst", "functional/ivy/device/dev_clone_nest.rst", "functional/ivy/device/dev_dist.rst", "functional/ivy/device/dev_dist_array.rst", "functional/ivy/device/dev_dist_iter.rst", "functional/ivy/device/dev_dist_nest.rst", "functional/ivy/device/dev_unify.rst", "functional/ivy/device/dev_unify_array.rst", "functional/ivy/device/dev_unify_iter.rst", "functional/ivy/device/dev_unify_nest.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/abs/abs_array.rst", "functional/ivy/elementwise/abs/abs_container.rst", "functional/ivy/elementwise/abs/abs_functional.rst", "functional/ivy/elementwise/abs/static_abs_container.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acos/acos_array.rst", "functional/ivy/elementwise/acos/acos_container.rst", "functional/ivy/elementwise/acos/acos_functional.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/acosh/acosh_array.rst", "functional/ivy/elementwise/acosh/acosh_container.rst", "functional/ivy/elementwise/acosh/acosh_functional.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/add/add_array.rst", "functional/ivy/elementwise/add/add_container.rst", "functional/ivy/elementwise/add/add_functional.rst", "functional/ivy/elementwise/add/static_add_container.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asin/asin_array.rst", "functional/ivy/elementwise/asin/asin_container.rst", "functional/ivy/elementwise/asin/asin_functional.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/asinh/asinh_array.rst", "functional/ivy/elementwise/asinh/asinh_container.rst", "functional/ivy/elementwise/asinh/asinh_functional.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan/atan_array.rst", "functional/ivy/elementwise/atan/atan_container.rst", "functional/ivy/elementwise/atan/atan_functional.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atan2/atan2_array.rst", "functional/ivy/elementwise/atan2/atan2_container.rst", "functional/ivy/elementwise/atan2/atan2_functional.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/atanh/atanh_array.rst", "functional/ivy/elementwise/atanh/atanh_container.rst", "functional/ivy/elementwise/atanh/atanh_functional.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_array.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_container.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_array.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_container.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/ceil/ceil_array.rst", "functional/ivy/elementwise/ceil/ceil_container.rst", "functional/ivy/elementwise/ceil/ceil_functional.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cos/cos_array.rst", "functional/ivy/elementwise/cos/cos_container.rst", "functional/ivy/elementwise/cos/cos_functional.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/cosh/cosh_array.rst", "functional/ivy/elementwise/cosh/cosh_container.rst", "functional/ivy/elementwise/cosh/cosh_functional.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/divide/divide_array.rst", "functional/ivy/elementwise/divide/divide_container.rst", "functional/ivy/elementwise/divide/divide_functional.rst", "functional/ivy/elementwise/divide/static_divide_container.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/equal/equal_array.rst", "functional/ivy/elementwise/equal/equal_container.rst", "functional/ivy/elementwise/equal/equal_functional.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/erf/erf_array.rst", "functional/ivy/elementwise/erf/erf_container.rst", "functional/ivy/elementwise/erf/erf_functional.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/exp/exp_array.rst", "functional/ivy/elementwise/exp/exp_container.rst", "functional/ivy/elementwise/exp/exp_functional.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/expm1/expm1_array.rst", "functional/ivy/elementwise/expm1/expm1_container.rst", "functional/ivy/elementwise/expm1/expm1_functional.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor/floor_array.rst", "functional/ivy/elementwise/floor/floor_container.rst", "functional/ivy/elementwise/floor/floor_functional.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/floor_divide/floor_divide_array.rst", "functional/ivy/elementwise/floor_divide/floor_divide_container.rst", "functional/ivy/elementwise/floor_divide/floor_divide_functional.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater/greater_array.rst", "functional/ivy/elementwise/greater/greater_container.rst", "functional/ivy/elementwise/greater/greater_functional.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/greater_equal/greater_equal_array.rst", "functional/ivy/elementwise/greater_equal/greater_equal_container.rst", "functional/ivy/elementwise/greater_equal/greater_equal_functional.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isfinite/isfinite_array.rst", "functional/ivy/elementwise/isfinite/isfinite_container.rst", "functional/ivy/elementwise/isfinite/isfinite_functional.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isinf/isinf_array.rst", "functional/ivy/elementwise/isinf/isinf_container.rst", "functional/ivy/elementwise/isinf/isinf_functional.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/isnan/isnan_array.rst", "functional/ivy/elementwise/isnan/isnan_container.rst", "functional/ivy/elementwise/isnan/isnan_functional.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less/less_array.rst", "functional/ivy/elementwise/less/less_container.rst", "functional/ivy/elementwise/less/less_functional.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/less_equal/less_equal_array.rst", "functional/ivy/elementwise/less_equal/less_equal_container.rst", "functional/ivy/elementwise/less_equal/less_equal_functional.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log/log_array.rst", "functional/ivy/elementwise/log/log_container.rst", "functional/ivy/elementwise/log/log_functional.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log10/log10_array.rst", "functional/ivy/elementwise/log10/log10_container.rst", "functional/ivy/elementwise/log10/log10_functional.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log1p/log1p_array.rst", "functional/ivy/elementwise/log1p/log1p_container.rst", "functional/ivy/elementwise/log1p/log1p_functional.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/log2/log2_array.rst", "functional/ivy/elementwise/log2/log2_container.rst", "functional/ivy/elementwise/log2/log2_functional.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logaddexp/logaddexp_array.rst", "functional/ivy/elementwise/logaddexp/logaddexp_container.rst", "functional/ivy/elementwise/logaddexp/logaddexp_functional.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_and/logical_and_array.rst", "functional/ivy/elementwise/logical_and/logical_and_container.rst", "functional/ivy/elementwise/logical_and/logical_and_functional.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_not/logical_not_array.rst", "functional/ivy/elementwise/logical_not/logical_not_container.rst", "functional/ivy/elementwise/logical_not/logical_not_functional.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_or/logical_or_array.rst", "functional/ivy/elementwise/logical_or/logical_or_container.rst", "functional/ivy/elementwise/logical_or/logical_or_functional.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/logical_xor/logical_xor_array.rst", "functional/ivy/elementwise/logical_xor/logical_xor_container.rst", "functional/ivy/elementwise/logical_xor/logical_xor_functional.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/multiply/multiply_array.rst", "functional/ivy/elementwise/multiply/multiply_container.rst", "functional/ivy/elementwise/multiply/multiply_functional.rst", "functional/ivy/elementwise/multiply/static_multiply_container.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/negative/negative_array.rst", "functional/ivy/elementwise/negative/negative_container.rst", "functional/ivy/elementwise/negative/negative_functional.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/not_equal/not_equal_array.rst", "functional/ivy/elementwise/not_equal/not_equal_container.rst", "functional/ivy/elementwise/not_equal/not_equal_functional.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/positive/positive_array.rst", "functional/ivy/elementwise/positive/positive_container.rst", "functional/ivy/elementwise/positive/positive_functional.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/pow/pow_array.rst", "functional/ivy/elementwise/pow/pow_container.rst", "functional/ivy/elementwise/pow/pow_functional.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/remainder/remainder_array.rst", "functional/ivy/elementwise/remainder/remainder_container.rst", "functional/ivy/elementwise/remainder/remainder_functional.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/round/round_array.rst", "functional/ivy/elementwise/round/round_container.rst", "functional/ivy/elementwise/round/round_functional.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sign/sign_array.rst", "functional/ivy/elementwise/sign/sign_container.rst", "functional/ivy/elementwise/sign/sign_functional.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sin/sin_array.rst", "functional/ivy/elementwise/sin/sin_container.rst", "functional/ivy/elementwise/sin/sin_functional.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sinh/sinh_array.rst", "functional/ivy/elementwise/sinh/sinh_container.rst", "functional/ivy/elementwise/sinh/sinh_functional.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/sqrt/sqrt_array.rst", "functional/ivy/elementwise/sqrt/sqrt_container.rst", "functional/ivy/elementwise/sqrt/sqrt_functional.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/square/square_array.rst", "functional/ivy/elementwise/square/square_container.rst", "functional/ivy/elementwise/square/square_functional.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/subtract/static_subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_array.rst", "functional/ivy/elementwise/subtract/subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_functional.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tan/static_tan_container.rst", "functional/ivy/elementwise/tan/tan_array.rst", "functional/ivy/elementwise/tan/tan_container.rst", "functional/ivy/elementwise/tan/tan_functional.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/tanh/static_tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_array.rst", "functional/ivy/elementwise/tanh/tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_functional.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/elementwise/trunc/trunc_array.rst", "functional/ivy/elementwise/trunc/trunc_container.rst", "functional/ivy/elementwise/trunc/trunc_functional.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/all_equal/all_equal_array.rst", "functional/ivy/general/all_equal/all_equal_container.rst", "functional/ivy/general/all_equal/all_equal_functional.rst", "functional/ivy/general/all_equal/static_all_equal_container.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/arrays_equal.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/copy_array.rst", "functional/ivy/general/cumprod.rst", "functional/ivy/general/cumsum.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/floormod.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/gather_nd/gather_nd_array.rst", "functional/ivy/general/gather_nd/gather_nd_container.rst", "functional/ivy/general/gather_nd/gather_nd_functional.rst", "functional/ivy/general/gather_nd/static_gather_nd_container.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/indices_where.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/one_hot.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/queue_timeout.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_to_tuple.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/supports_inplace.rst", "functional/ivy/general/tmp_dir.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unstack.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_step/adam_step_array.rst", "functional/ivy/gradients/adam_step/adam_step_container.rst", "functional/ivy/gradients/adam_step/adam_step_functional.rst", "functional/ivy/gradients/adam_step/static_adam_step_container.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/adam_update/adam_update_container.rst", "functional/ivy/gradients/adam_update/adam_update_functional.rst", "functional/ivy/gradients/adam_update/static_adam_update_container.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional.rst", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/is_variable/is_variable_container.rst", "functional/ivy/gradients/is_variable/is_variable_functional.rst", "functional/ivy/gradients/is_variable/static_is_variable_container.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lamb_update/lamb_update_container.rst", "functional/ivy/gradients/lamb_update/lamb_update_functional.rst", "functional/ivy/gradients/lamb_update/static_lamb_update_container.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/lars_update/lars_update_container.rst", "functional/ivy/gradients/lars_update/lars_update_functional.rst", "functional/ivy/gradients/lars_update/static_lars_update_container.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_container.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_functional.rst", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/linear_algebra/cholesky.rst", "functional/ivy/linear_algebra/cholesky/cholesky_array.rst", "functional/ivy/linear_algebra/cholesky/cholesky_functional.rst", "functional/ivy/linear_algebra/cross.rst", "functional/ivy/linear_algebra/cross/cross_array.rst", "functional/ivy/linear_algebra/cross/cross_functional.rst", "functional/ivy/linear_algebra/det.rst", "functional/ivy/linear_algebra/det/det_array.rst", "functional/ivy/linear_algebra/det/det_functional.rst", "functional/ivy/linear_algebra/diagonal.rst", "functional/ivy/linear_algebra/diagonal/diagonal_array.rst", "functional/ivy/linear_algebra/diagonal/diagonal_functional.rst", "functional/ivy/linear_algebra/eigh.rst", "functional/ivy/linear_algebra/eigh/eigh_array.rst", "functional/ivy/linear_algebra/eigh/eigh_functional.rst", "functional/ivy/linear_algebra/eigvalsh.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional.rst", "functional/ivy/linear_algebra/inv.rst", "functional/ivy/linear_algebra/inv/inv_array.rst", "functional/ivy/linear_algebra/inv/inv_functional.rst", "functional/ivy/linear_algebra/matmul.rst", "functional/ivy/linear_algebra/matmul/matmul_array.rst", "functional/ivy/linear_algebra/matmul/matmul_container.rst", "functional/ivy/linear_algebra/matmul/matmul_functional.rst", "functional/ivy/linear_algebra/matrix_norm.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional.rst", "functional/ivy/linear_algebra/matrix_power.rst", "functional/ivy/linear_algebra/matrix_rank.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional.rst", "functional/ivy/linear_algebra/matrix_transpose.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional.rst", "functional/ivy/linear_algebra/outer.rst", "functional/ivy/linear_algebra/outer/outer_array.rst", "functional/ivy/linear_algebra/outer/outer_functional.rst", "functional/ivy/linear_algebra/pinv.rst", "functional/ivy/linear_algebra/pinv/pinv_array.rst", "functional/ivy/linear_algebra/pinv/pinv_functional.rst", "functional/ivy/linear_algebra/qr.rst", "functional/ivy/linear_algebra/qr/qr_array.rst", "functional/ivy/linear_algebra/qr/qr_functional.rst", "functional/ivy/linear_algebra/slogdet.rst", "functional/ivy/linear_algebra/solve.rst", "functional/ivy/linear_algebra/solve/solve_array.rst", "functional/ivy/linear_algebra/solve/solve_functional.rst", "functional/ivy/linear_algebra/svd.rst", "functional/ivy/linear_algebra/svd/svd_array.rst", "functional/ivy/linear_algebra/svd/svd_functional.rst", "functional/ivy/linear_algebra/svdvals.rst", "functional/ivy/linear_algebra/svdvals/svdvals_array.rst", "functional/ivy/linear_algebra/svdvals/svdvals_functional.rst", "functional/ivy/linear_algebra/tensordot.rst", "functional/ivy/linear_algebra/tensordot/tensordot_array.rst", "functional/ivy/linear_algebra/tensordot/tensordot_functional.rst", "functional/ivy/linear_algebra/trace.rst", "functional/ivy/linear_algebra/trace/trace_array.rst", "functional/ivy/linear_algebra/trace/trace_functional.rst", "functional/ivy/linear_algebra/vecdot.rst", "functional/ivy/linear_algebra/vecdot/vecdot_array.rst", "functional/ivy/linear_algebra/vecdot/vecdot_functional.rst", "functional/ivy/linear_algebra/vector_norm.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_array.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional.rst", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/cross_entropy/cross_entropy_array.rst", "functional/ivy/losses/cross_entropy/cross_entropy_container.rst", "functional/ivy/losses/cross_entropy/cross_entropy_functional.rst", "functional/ivy/losses/cross_entropy/static_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional.rst", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/clip/clip_array.rst", "functional/ivy/manipulation/clip/clip_container.rst", "functional/ivy/manipulation/clip/clip_functional.rst", "functional/ivy/manipulation/clip/static_clip_container.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/concat/concat_array.rst", "functional/ivy/manipulation/concat/concat_container.rst", "functional/ivy/manipulation/concat/concat_functional.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/constant_pad/constant_pad_array.rst", "functional/ivy/manipulation/constant_pad/constant_pad_container.rst", "functional/ivy/manipulation/constant_pad/constant_pad_functional.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/expand_dims/expand_dims_array.rst", "functional/ivy/manipulation/expand_dims/expand_dims_container.rst", "functional/ivy/manipulation/expand_dims/expand_dims_functional.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/flip/flip_array.rst", "functional/ivy/manipulation/flip/flip_container.rst", "functional/ivy/manipulation/flip/flip_functional.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/permute_dims/permute_dims_array.rst", "functional/ivy/manipulation/permute_dims/permute_dims_container.rst", "functional/ivy/manipulation/permute_dims/permute_dims_functional.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/repeat/repeat_array.rst", "functional/ivy/manipulation/repeat/repeat_container.rst", "functional/ivy/manipulation/repeat/repeat_functional.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/reshape/reshape_array.rst", "functional/ivy/manipulation/reshape/reshape_container.rst", "functional/ivy/manipulation/reshape/reshape_functional.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/roll/roll_array.rst", "functional/ivy/manipulation/roll/roll_container.rst", "functional/ivy/manipulation/roll/roll_functional.rst", "functional/ivy/manipulation/roll/static_roll_container.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/squeeze/squeeze_array.rst", "functional/ivy/manipulation/squeeze/squeeze_container.rst", "functional/ivy/manipulation/squeeze/squeeze_functional.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/stack/stack_array.rst", "functional/ivy/manipulation/stack/stack_container.rst", "functional/ivy/manipulation/stack/stack_functional.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/swapaxes/swapaxes_array.rst", "functional/ivy/manipulation/swapaxes/swapaxes_container.rst", "functional/ivy/manipulation/swapaxes/swapaxes_functional.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/tile/tile_array.rst", "functional/ivy/manipulation/tile/tile_container.rst", "functional/ivy/manipulation/tile/tile_functional.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/manipulation/zero_pad/zero_pad_array.rst", "functional/ivy/manipulation/zero_pad/zero_pad_container.rst", "functional/ivy/manipulation/zero_pad/zero_pad_functional.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_indices_where.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/norms/layer_norm/layer_norm_array.rst", "functional/ivy/norms/layer_norm/layer_norm_container.rst", "functional/ivy/norms/layer_norm/layer_norm_functional.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/randint/randint_functional.rst", "functional/ivy/random/randint/static_randint_container.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/random_uniform/random_uniform_container.rst", "functional/ivy/random/random_uniform/random_uniform_functional.rst", "functional/ivy/random/random_uniform/static_random_uniform_container.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/where.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_counts/static_unique_counts_container.rst", "functional/ivy/set/unique_counts/unique_counts_array.rst", "functional/ivy/set/unique_counts/unique_counts_container.rst", "functional/ivy/set/unique_counts/unique_counts_functional.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/argsort/argsort_array.rst", "functional/ivy/sorting/argsort/argsort_container.rst", "functional/ivy/sorting/argsort/argsort_functional.rst", "functional/ivy/sorting/argsort/static_argsort_container.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/sorting/sort/sort_array.rst", "functional/ivy/sorting/sort/sort_container.rst", "functional/ivy/sorting/sort/sort_functional.rst", "functional/ivy/sorting/sort/static_sort_container.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/einsum/einsum_array.rst", "functional/ivy/statistical/einsum/einsum_container.rst", "functional/ivy/statistical/einsum/einsum_functional.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/max/max_array.rst", "functional/ivy/statistical/max/max_container.rst", "functional/ivy/statistical/max/max_functional.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/mean/mean_array.rst", "functional/ivy/statistical/mean/mean_container.rst", "functional/ivy/statistical/mean/mean_functional.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/min/min_array.rst", "functional/ivy/statistical/min/min_container.rst", "functional/ivy/statistical/min/min_functional.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/prod/prod_array.rst", "functional/ivy/statistical/prod/prod_container.rst", "functional/ivy/statistical/prod/prod_functional.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/std/std_array.rst", "functional/ivy/statistical/std/std_container.rst", "functional/ivy/statistical/std/std_functional.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/sum/sum_array.rst", "functional/ivy/statistical/sum/sum_container.rst", "functional/ivy/statistical/sum/sum_functional.rst", "functional/ivy/statistical/var.rst", "functional/ivy/statistical/var/var_array.rst", "functional/ivy/statistical/var/var_container.rst", "functional/ivy/statistical/var/var_functional.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/all/all_array.rst", "functional/ivy/utility/all/all_container.rst", "functional/ivy/utility/all/all_functional.rst", "functional/ivy/utility/any.rst", "functional/ivy/utility/any/any_array.rst", "functional/ivy/utility/any/any_container.rst", "functional/ivy/utility/any/any_functional.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "roadmap.rst", "stateful.rst", "stateful/activations.rst", "stateful/activations/GEGLU.rst", "stateful/activations/GELU.rst", "stateful/converters.rst", "stateful/converters/to_ivy_module.rst", "stateful/initializers.rst", "stateful/initializers/Constant:\n    def __init__.rst", "stateful/initializers/FirstLayerSiren.rst", "stateful/initializers/GlorotUniform.rst", "stateful/initializers/KaimingNormal:\n    def __init__.rst", "stateful/initializers/Ones.rst", "stateful/initializers/Siren.rst", "stateful/initializers/Uniform:\n    def __init__.rst", "stateful/initializers/Zeros.rst", "stateful/layers.rst", "stateful/layers/Conv1D.rst", "stateful/layers/Conv1DTranspose.rst", "stateful/layers/Conv2D.rst", "stateful/layers/Conv2DTranspose.rst", "stateful/layers/Conv3D.rst", "stateful/layers/Conv3DTranspose.rst", "stateful/layers/DepthwiseConv2D.rst", "stateful/layers/Dropout.rst", "stateful/layers/LSTM.rst", "stateful/layers/Linear.rst", "stateful/layers/MultiHeadAttention.rst", "stateful/module.rst", "stateful/module/Module.rst", "stateful/norms.rst", "stateful/norms/LayerNorm.rst", "stateful/optimizers.rst", "stateful/optimizers/Adam.rst", "stateful/optimizers/LAMB.rst", "stateful/optimizers/LARS.rst", "stateful/optimizers/Optimizer.rst", "stateful/optimizers/SGD.rst", "stateful/sequential.rst", "stateful/sequential/Sequential.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["Backend handler", "&lt;no title&gt;", "choose_random_backend", "clear_backend_stack", "current_backend", "get_backend", "set_backend", "try_import_ivy_jax", "try_import_ivy_mxnet", "try_import_ivy_numpy", "try_import_ivy_tf", "try_import_ivy_torch", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Contributing", "Setting Up", "The Basics", "Open Tasks", "Building the Docs", "Activations", "ArrayWithActivations", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data type", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linear algebra", "ArrayWithLinearAlgebra", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "Container", "MultiDevContainer", "Creation", "ContainerWithCreation", "Data type", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linear algebra", "ContainerWithLinearAlgebra", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Deep Dive", "Navigating the Code", "Docstrings", "Docstring Examples", "Array API Tests", "Ivy Tests", "Function Types", "Backend Setting", "Function Wrapping", "Arrays", "Containers", "Data Types", "Devices", "Inplace Updates", "Function Arguments", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "&lt;no title&gt;", "Activations", "gelu", "leaky_relu", "relu", "sigmoid", "softmax", "softplus", "tanh", "Compilation", "compile", "Constants", "Creation", "arange", "asarray", "empty", "empty_like", "eye", "from_dlpack", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "ones", "ones_like", "tril", "triu", "zeros", "zeros_like", "Data type", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "ivy.Array.can_cast", "ivy.Container.can_cast", "ivy.can_cast", "ivy.Container.static_can_cast", "closest_valid_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "invalid_dtype", "is_float_dtype", "is_int_dtype", "promote_types", "result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "valid_dtype", "Device", "&lt;no title&gt;", "DevClonedItem", "DevClonedIter", "DevClonedNest", "DevDistItem", "DevDistIter", "DevDistNest", "&lt;no title&gt;", "DevMapper", "DevMapperMultiProc", "&lt;no title&gt;", "MultiDevItem", "MultiDevIter", "MultiDevNest", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "dev_clone", "dev_clone_array", "dev_clone_iter", "dev_clone_nest", "dev_dist", "dev_dist_array", "dev_dist_iter", "dev_dist_nest", "dev_unify", "dev_unify_array", "dev_unify_iter", "dev_unify_nest", "dev_util", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "ivy.Array.abs", "ivy.Container.abs", "ivy.abs", "ivy.Container.static_abs", "acos", "ivy.Array.acos", "ivy.Container.acos", "ivy.acos", "acosh", "ivy.Array.acosh", "ivy.Container.acosh", "ivy.acosh", "add", "ivy.Array.add", "ivy.Container.add", "ivy.add", "ivy.Container.static_add", "asin", "ivy.Array.asin", "ivy.Container.asin", "ivy.asin", "asinh", "ivy.Array.asinh", "ivy.Container.asinh", "ivy.asinh", "atan", "ivy.Array.atan", "ivy.Container.atan", "ivy.atan", "atan2", "ivy.Array.atan2", "ivy.Container.atan2", "ivy.atan2", "atanh", "ivy.Array.atanh", "ivy.Container.atanh", "ivy.atanh", "bitwise_and", "ivy.Array.bitwise_and", "ivy.Container.bitwise_and", "ivy.bitwise_and", "bitwise_invert", "ivy.Array.bitwise_invert", "ivy.Container.bitwise_invert", "ivy.bitwise_invert", "bitwise_left_shift", "ivy.Array.bitwise_left_shift", "ivy.Container.bitwise_left_shift", "ivy.bitwise_left_shift", "bitwise_or", "ivy.Array.bitwise_or", "ivy.Container.bitwise_or", "ivy.bitwise_or", "bitwise_right_shift", "ivy.Array.bitwise_right_shift", "ivy.Container.bitwise_right_shift", "ivy.bitwise_right_shift", "bitwise_xor", "ivy.Array.bitwise_xor", "ivy.Container.bitwise_xor", "ivy.bitwise_xor", "ceil", "ivy.Array.ceil", "ivy.Container.ceil", "ivy.ceil", "cos", "ivy.Array.cos", "ivy.Container.cos", "ivy.cos", "cosh", "ivy.Array.cosh", "ivy.Container.cosh", "ivy.cosh", "divide", "ivy.Array.divide", "ivy.Container.divide", "ivy.divide", "ivy.Container.static_divide", "equal", "ivy.Array.equal", "ivy.Container.equal", "ivy.equal", "erf", "ivy.Array.erf", "ivy.Container.erf", "ivy.erf", "exp", "ivy.Array.exp", "ivy.Container.exp", "ivy.exp", "expm1", "ivy.Array.expm1", "ivy.Container.expm1", "ivy.expm1", "floor", "ivy.Array.floor", "ivy.Container.floor", "ivy.floor", "floor_divide", "ivy.Array.floor_divide", "ivy.Container.floor_divide", "ivy.floor_divide", "greater", "ivy.Array.greater", "ivy.Container.greater", "ivy.greater", "greater_equal", "ivy.Array.greater_equal", "ivy.Container.greater_equal", "ivy.greater_equal", "isfinite", "ivy.Array.isfinite", "ivy.Container.isfinite", "ivy.isfinite", "isinf", "ivy.Array.isinf", "ivy.Container.isinf", "ivy.isinf", "isnan", "ivy.Array.isnan", "ivy.Container.isnan", "ivy.isnan", "less", "ivy.Array.less", "ivy.Container.less", "ivy.less", "less_equal", "ivy.Array.less_equal", "ivy.Container.less_equal", "ivy.less_equal", "log", "ivy.Array.log", "ivy.Container.log", "ivy.log", "log10", "ivy.Array.log10", "ivy.Container.log10", "ivy.log10", "log1p", "ivy.Array.log1p", "ivy.Container.log1p", "ivy.log1p", "log2", "ivy.Array.log2", "ivy.Container.log2", "ivy.log2", "logaddexp", "ivy.Array.logaddexp", "ivy.Container.logaddexp", "ivy.logaddexp", "logical_and", "ivy.Array.logical_and", "ivy.Container.logical_and", "ivy.logical_and", "logical_not", "ivy.Array.logical_not", "ivy.Container.logical_not", "ivy.logical_not", "logical_or", "ivy.Array.logical_or", "ivy.Container.logical_or", "ivy.logical_or", "logical_xor", "ivy.Array.logical_xor", "ivy.Container.logical_xor", "ivy.logical_xor", "maximum", "minimum", "multiply", "ivy.Array.multiply", "ivy.Container.multiply", "ivy.multiply", "ivy.Container.static_multiply", "negative", "ivy.Array.negative", "ivy.Container.negative", "ivy.negative", "not_equal", "ivy.Array.not_equal", "ivy.Container.not_equal", "ivy.not_equal", "positive", "ivy.Array.positive", "ivy.Container.positive", "ivy.positive", "pow", "ivy.Array.pow", "ivy.Container.pow", "ivy.pow", "remainder", "ivy.Array.remainder", "ivy.Container.remainder", "ivy.remainder", "round", "ivy.Array.round", "ivy.Container.round", "ivy.round", "sign", "ivy.Array.sign", "ivy.Container.sign", "ivy.sign", "sin", "ivy.Array.sin", "ivy.Container.sin", "ivy.sin", "sinh", "ivy.Array.sinh", "ivy.Container.sinh", "ivy.sinh", "sqrt", "ivy.Array.sqrt", "ivy.Container.sqrt", "ivy.sqrt", "square", "ivy.Array.square", "ivy.Container.square", "ivy.square", "subtract", "ivy.Container.static_subtract", "ivy.Array.subtract", "ivy.Container.subtract", "ivy.subtract", "tan", "ivy.Container.static_tan", "ivy.Array.tan", "ivy.Container.tan", "ivy.tan", "tanh", "ivy.Container.static_tanh", "ivy.Array.tanh", "ivy.Container.tanh", "ivy.tanh", "trunc", "ivy.Array.trunc", "ivy.Container.trunc", "ivy.trunc", "General", "all_equal", "ivy.Array.all_equal", "ivy.Container.all_equal", "ivy.all_equal", "ivy.Container.static_all_equal", "arg_info", "arg_names", "array_equal", "arrays_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "ivy.Container.clip_vector_norm", "ivy.clip_vector_norm", "container_types", "copy_array", "cumprod", "cumsum", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "floormod", "fourier_encode", "gather", "gather_nd", "ivy.Array.gather_nd", "ivy.Container.gather_nd", "ivy.gather_nd", "ivy.Container.static_gather_nd", "get_all_arrays_in_memory", "get_min_base", "get_min_denominator", "get_num_dims", "get_referrers_recursive", "has_nans", "indices_where", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "one_hot", "print_all_arrays_in_memory", "queue_timeout", "scatter_flat", "scatter_nd", "set_min_base", "set_min_denominator", "set_queue_timeout", "set_tmp_dir", "shape", "shape_to_tuple", "stable_divide", "stable_pow", "supports_inplace", "tmp_dir", "to_list", "to_numpy", "to_scalar", "try_else_none", "unstack", "value_is_nan", "Gradients", "&lt;no title&gt;", "adam_step", "ivy.Array.adam_step", "ivy.Container.adam_step", "ivy.adam_step", "ivy.Container.static_adam_step", "adam_update", "ivy.Container.adam_update", "ivy.adam_update", "ivy.Container.static_adam_update", "execute_with_gradients", "gradient_descent_update", "ivy.Container.gradient_descent_update", "ivy.gradient_descent_update", "ivy.Container.static_gradient_descent_update", "is_variable", "ivy.Container.is_variable", "ivy.is_variable", "ivy.Container.static_is_variable", "lamb_update", "ivy.Container.lamb_update", "ivy.lamb_update", "ivy.Container.static_lamb_update", "lars_update", "ivy.Container.lars_update", "ivy.lars_update", "ivy.Container.static_lars_update", "optimizer_update", "ivy.Container.optimizer_update", "ivy.optimizer_update", "ivy.Container.static_optimizer_update", "set_with_grads", "stop_gradient", "unset_with_grads", "variable", "variable_data", "with_grads", "Layers", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "Linear algebra", "cholesky", "ivy.Array.cholesky", "ivy.cholesky", "cross", "ivy.Array.cross", "ivy.cross", "det", "ivy.Array.det", "ivy.det", "diagonal", "ivy.Array.diagonal", "ivy.diagonal", "eigh", "ivy.Array.eigh", "ivy.eigh", "eigvalsh", "ivy.Array.eigvalsh", "ivy.eigvalsh", "inv", "ivy.Array.inv", "ivy.inv", "matmul", "ivy.Array.matmul", "ivy.Container.matmul", "ivy.matmul", "matrix_norm", "ivy.Array.matrix_norm", "ivy.matrix_norm", "matrix_power", "matrix_rank", "ivy.Array.matrix_rank", "ivy.matrix_rank", "matrix_transpose", "ivy.Array.matrix_transpose", "ivy.matrix_transpose", "outer", "ivy.Array.outer", "ivy.outer", "pinv", "ivy.Array.pinv", "ivy.pinv", "qr", "ivy.Array.qr", "ivy.qr", "slogdet", "solve", "ivy.Array.solve", "ivy.solve", "svd", "ivy.Array.svd", "ivy.svd", "svdvals", "ivy.Array.svdvals", "ivy.svdvals", "tensordot", "ivy.Array.tensordot", "ivy.tensordot", "trace", "ivy.Array.trace", "ivy.trace", "vecdot", "ivy.Array.vecdot", "ivy.vecdot", "vector_norm", "ivy.Array.vector_norm", "ivy.vector_norm", "vector_to_skew_symmetric_matrix", "ivy.Array.vector_to_skew_symmetric_matrix", "ivy.vector_to_skew_symmetric_matrix", "Losses", "binary_cross_entropy", "ivy.Array.binary_cross_entropy", "ivy.Container.binary_cross_entropy", "ivy.binary_cross_entropy", "ivy.Container.static_binary_cross_entropy", "cross_entropy", "ivy.Array.cross_entropy", "ivy.Container.cross_entropy", "ivy.cross_entropy", "ivy.Container.static_cross_entropy", "sparse_cross_entropy", "ivy.Array.sparse_cross_entropy", "ivy.Container.sparse_cross_entropy", "ivy.sparse_cross_entropy", "ivy.Container.static_sparse_cross_entropy", "Manipulation", "clip", "ivy.Array.clip", "ivy.Container.clip", "ivy.clip", "ivy.Container.static_clip", "concat", "ivy.Array.concat", "ivy.Container.concat", "ivy.concat", "constant_pad", "ivy.Array.constant_pad", "ivy.Container.constant_pad", "ivy.constant_pad", "expand_dims", "ivy.Array.expand_dims", "ivy.Container.expand_dims", "ivy.expand_dims", "flip", "ivy.Array.flip", "ivy.Container.flip", "ivy.flip", "permute_dims", "ivy.Array.permute_dims", "ivy.Container.permute_dims", "ivy.permute_dims", "repeat", "ivy.Array.repeat", "ivy.Container.repeat", "ivy.repeat", "reshape", "ivy.Array.reshape", "ivy.Container.reshape", "ivy.reshape", "roll", "ivy.Array.roll", "ivy.Container.roll", "ivy.roll", "ivy.Container.static_roll", "split", "squeeze", "ivy.Array.squeeze", "ivy.Container.squeeze", "ivy.squeeze", "stack", "ivy.Array.stack", "ivy.Container.stack", "ivy.stack", "swapaxes", "ivy.Array.swapaxes", "ivy.Container.swapaxes", "ivy.swapaxes", "tile", "ivy.Array.tile", "ivy.Container.tile", "ivy.tile", "zero_pad", "ivy.Array.zero_pad", "ivy.Container.zero_pad", "ivy.zero_pad", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_indices_where", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "ivy.Array.layer_norm", "ivy.Container.layer_norm", "ivy.layer_norm", "Random", "multinomial", "randint", "ivy.randint", "ivy.Container.static_randint", "random_normal", "random_uniform", "ivy.Container.random_uniform", "ivy.random_uniform", "ivy.Container.static_random_uniform", "seed", "shuffle", "Searching", "argmax", "argmin", "nonzero", "where", "Set", "unique_all", "unique_counts", "ivy.Container.static_unique_counts", "ivy.Array.unique_counts", "ivy.Container.unique_counts", "ivy.unique_counts", "unique_inverse", "unique_values", "Sorting", "argsort", "ivy.Array.argsort", "ivy.Container.argsort", "ivy.argsort", "ivy.Container.static_argsort", "sort", "ivy.Array.sort", "ivy.Container.sort", "ivy.sort", "ivy.Container.static_sort", "Statistical", "einsum", "ivy.Array.einsum", "ivy.Container.einsum", "ivy.einsum", "max", "ivy.Array.max", "ivy.Container.max", "ivy.max", "mean", "ivy.Array.mean", "ivy.Container.mean", "ivy.mean", "min", "ivy.Array.min", "ivy.Container.min", "ivy.min", "prod", "ivy.Array.prod", "ivy.Container.prod", "ivy.prod", "std", "ivy.Array.std", "ivy.Container.std", "ivy.std", "sum", "ivy.Array.sum", "ivy.Container.sum", "ivy.sum", "var", "ivy.Array.var", "ivy.Container.var", "ivy.var", "Utility", "all", "ivy.Array.all", "ivy.Container.all", "ivy.all", "any", "ivy.Array.any", "ivy.Container.any", "ivy.any", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Roadmap", "Framework classes", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "&lt;no title&gt;", "FirstLayerSiren", "GlorotUniform", "&lt;no title&gt;", "Ones", "Siren", "&lt;no title&gt;", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"class": [0, 6, 12, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 117, 121, 122, 123, 124, 126, 128, 129, 131, 132, 133, 143, 144, 145, 186, 209, 223, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 511, 518, 555, 561, 580, 585, 587, 589, 591, 621, 786, 788, 798, 821, 824, 888, 896, 897, 898, 899, 900, 901, 903, 904, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933], "ivi": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 116, 118, 119, 120, 122, 123, 124, 125, 126, 127, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 279, 283, 287, 292, 296, 300, 304, 308, 312, 316, 320, 324, 328, 332, 336, 340, 344, 348, 353, 357, 361, 365, 369, 373, 377, 381, 385, 389, 393, 397, 401, 405, 409, 413, 417, 421, 425, 429, 433, 437, 441, 442, 443, 448, 452, 456, 460, 464, 468, 472, 476, 480, 484, 488, 492, 497, 502, 507, 511, 512, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 592, 596, 597, 601, 605, 609, 613, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 640, 643, 646, 649, 652, 655, 658, 662, 665, 666, 669, 672, 675, 678, 681, 682, 685, 688, 691, 694, 697, 700, 703, 706, 707, 712, 717, 722, 723, 728, 732, 736, 740, 744, 748, 752, 756, 761, 762, 766, 770, 774, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 809, 810, 811, 814, 815, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 833, 834, 835, 836, 841, 846, 847, 851, 855, 859, 863, 867, 871, 875, 879, 880, 884, 888, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 903, 904, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 935, 936], "backend_handl": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 888], "contextmanag": [0, 1], "modul": [0, 4, 5, 16, 18, 21, 65, 66, 69, 70, 71, 72, 73, 110, 111, 117, 118, 119, 121, 125, 128, 129, 131, 133, 144, 145, 511, 562, 809, 810, 814, 888, 896, 897, 898, 899, 900, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 924, 925, 932, 933], "sourc": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 121, 122, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 892, 893, 896, 897, 898, 899, 900, 901, 903, 904, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 935, 936], "base": [0, 19, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 117, 120, 122, 128, 144, 167, 177, 186, 223, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 273, 361, 364, 405, 408, 409, 412, 413, 416, 417, 420, 460, 463, 511, 546, 569, 576, 585, 826, 827, 828, 832, 834, 846, 847, 850, 896, 897, 898, 901, 903, 904, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933], "object": [0, 69, 70, 71, 72, 73, 130, 133, 167, 173, 186, 206, 223, 268, 585, 786, 789, 791, 793, 794, 795, 800, 801, 802, 803, 809, 820, 901, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 922, 923], "__init__": [0, 1, 4, 5, 69, 70, 71, 72, 73, 113, 119, 123, 128, 130, 131, 132, 133, 186, 187, 188, 189, 223, 224, 231, 232, 233, 234, 235, 236, 237, 238, 585, 586, 809, 810, 814, 888, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933], "choose_random_backend": 0, "exclud": [0, 2, 115, 128, 167, 168, 809, 815, 817], "none": [0, 2, 5, 12, 24, 25, 26, 27, 28, 35, 36, 37, 38, 45, 46, 47, 48, 49, 50, 51, 52, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 113, 115, 118, 122, 123, 124, 125, 126, 128, 130, 132, 133, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 192, 194, 195, 197, 199, 201, 202, 203, 206, 209, 223, 232, 233, 241, 242, 265, 266, 267, 268, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 516, 517, 523, 524, 525, 526, 528, 529, 530, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 549, 551, 552, 556, 562, 564, 567, 568, 569, 570, 575, 576, 582, 585, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 792, 797, 798, 799, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 828, 829, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 899, 900, 901, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933], "clear_backend_stack": 0, "current_backend": [0, 71, 72, 113, 118], "arg": [0, 4, 21, 24, 25, 26, 69, 70, 128, 130, 132, 223, 232, 247, 251, 255, 267, 511, 568, 899, 900, 922, 923], "kwarg": [0, 4, 24, 25, 26, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 128, 130, 132, 223, 232, 247, 251, 255, 511, 561, 899, 900, 922, 923], "return": [0, 4, 5, 12, 24, 25, 26, 27, 28, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 61, 62, 63, 64, 69, 70, 71, 72, 73, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 222, 223, 232, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 611, 612, 613, 614, 615, 616, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 792, 796, 797, 798, 799, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 893, 899, 900, 910, 919, 920, 926, 930], "current": [0, 4, 5, 12, 16, 18, 19, 20, 21, 69, 70, 71, 72, 73, 118, 124, 128, 133, 144, 145, 186, 207, 208, 210, 222, 223, 232, 256, 257, 261, 263, 511, 545, 552, 556, 563, 565, 786, 787, 796, 797, 888], "prioriti": [0, 4, 19, 69, 70, 125], "global_backend": [0, 4], "argument": [0, 4, 5, 14, 20, 24, 25, 26, 27, 28, 69, 70, 71, 72, 73, 112, 113, 114, 115, 117, 118, 119, 121, 122, 128, 130, 131, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 195, 198, 214, 223, 232, 233, 247, 251, 255, 273, 274, 277, 287, 290, 292, 295, 336, 339, 369, 372, 452, 455, 484, 487, 488, 491, 497, 501, 511, 517, 518, 522, 532, 539, 561, 568, 623, 626, 635, 722, 756, 759, 786, 792, 804, 805, 808, 826, 828, 832, 846, 851, 854, 871, 874, 879, 880, 883, 891, 893, 899, 900, 922, 923], "s": [0, 4, 5, 6, 12, 15, 16, 17, 18, 19, 21, 24, 27, 28, 69, 70, 112, 114, 115, 117, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 166, 167, 178, 182, 183, 186, 207, 208, 223, 242, 266, 273, 464, 467, 511, 520, 585, 592, 594, 597, 599, 605, 607, 613, 615, 636, 685, 687, 688, 690, 786, 792, 798, 846, 867, 870, 875, 878, 888, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 932, 933], "paramet": [0, 4, 5, 24, 25, 26, 27, 28, 65, 66, 69, 70, 71, 72, 73, 110, 111, 113, 114, 117, 130, 131, 144, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 222, 223, 232, 233, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 274, 277, 279, 282, 283, 286, 287, 290, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 344, 347, 348, 351, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 442, 443, 446, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 496, 497, 501, 502, 506, 507, 510, 511, 512, 515, 517, 518, 519, 520, 521, 522, 523, 524, 526, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 587, 590, 592, 594, 596, 597, 599, 601, 603, 605, 607, 609, 611, 613, 615, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 642, 643, 645, 646, 648, 649, 651, 652, 654, 655, 657, 658, 661, 662, 664, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 699, 700, 702, 703, 705, 706, 707, 710, 712, 715, 717, 720, 722, 723, 726, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 748, 751, 752, 755, 756, 759, 761, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 814, 815, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 839, 841, 844, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887, 891, 893, 899, 900, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933], "from": [0, 4, 5, 6, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 65, 66, 69, 70, 71, 72, 73, 110, 111, 112, 113, 114, 115, 117, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 167, 168, 169, 171, 173, 174, 175, 178, 179, 181, 185, 186, 195, 198, 214, 223, 232, 233, 242, 257, 261, 266, 267, 273, 377, 380, 484, 487, 511, 532, 539, 540, 543, 579, 585, 592, 594, 605, 607, 623, 631, 634, 636, 646, 648, 685, 687, 697, 699, 722, 740, 743, 752, 755, 762, 765, 782, 783, 784, 785, 786, 788, 798, 799, 809, 810, 811, 812, 814, 815, 817, 821, 825, 826, 827, 833, 846, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887, 888, 894, 899, 900, 910, 918, 921, 926, 930], "which": [0, 4, 5, 14, 15, 16, 18, 19, 20, 21, 69, 70, 71, 72, 73, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 156, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 195, 198, 200, 204, 206, 209, 210, 222, 223, 232, 233, 243, 248, 249, 250, 251, 252, 253, 254, 255, 257, 261, 263, 265, 266, 267, 273, 464, 467, 511, 517, 529, 530, 532, 539, 540, 543, 545, 551, 555, 563, 564, 565, 567, 568, 583, 585, 592, 594, 596, 597, 599, 605, 607, 609, 611, 613, 615, 618, 620, 621, 623, 634, 636, 640, 642, 646, 648, 662, 664, 682, 684, 685, 687, 697, 699, 700, 702, 706, 712, 715, 717, 720, 722, 728, 731, 740, 743, 748, 751, 756, 759, 761, 766, 769, 786, 791, 792, 793, 794, 799, 800, 801, 802, 803, 809, 810, 811, 812, 815, 817, 821, 822, 823, 824, 825, 826, 827, 828, 832, 834, 835, 836, 839, 841, 844, 846, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887, 888, 891, 893, 899, 900, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 932, 933], "try": [0, 4, 13, 15, 16, 18, 19, 20, 21, 69, 70, 121, 122, 130, 145, 511, 582, 888], "infer": [0, 4, 112, 119, 123, 124, 128, 133, 164, 165, 167, 168, 169, 171, 174, 175, 179, 181, 185, 273, 377, 380, 511, 548, 573, 722, 752, 755], "when": [0, 4, 14, 15, 18, 19, 20, 69, 70, 71, 72, 73, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 133, 145, 186, 192, 223, 273, 287, 290, 365, 368, 460, 463, 511, 522, 555, 576, 706, 707, 710, 712, 715, 717, 720, 786, 797, 821, 822, 823, 825, 846, 851, 854, 859, 862, 867, 870, 875, 878, 888, 922, 923], "global": [0, 4, 5, 6, 12, 69, 70, 71, 72, 73, 118, 119, 123, 124, 128, 186, 201, 202, 203, 223, 232, 233, 265, 266, 267, 511, 546, 547, 566, 569, 570, 571, 575, 576, 804, 805, 808, 924, 925], "set": [0, 4, 5, 6, 12, 14, 17, 19, 24, 27, 28, 58, 69, 70, 103, 112, 113, 118, 120, 121, 122, 123, 124, 125, 128, 130, 131, 223, 242, 252, 253, 264, 265, 266, 267, 273, 304, 307, 511, 512, 515, 569, 570, 571, 572, 585, 592, 594, 597, 599, 601, 603, 605, 607, 609, 611, 613, 615, 636, 640, 642, 662, 664, 666, 668, 675, 677, 682, 684, 786, 787, 796, 797, 798, 802, 803, 809, 819, 821, 822, 827, 828, 832, 833, 834, 835, 836, 839, 841, 844, 846, 867, 870, 875, 878, 910, 919, 926, 927, 928, 929, 930, 931], "ret": [0, 4, 5, 12, 24, 25, 26, 27, 28, 69, 70, 113, 114, 128, 133, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 198, 200, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 222, 223, 232, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 272, 273, 274, 277, 279, 282, 283, 286, 287, 290, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 344, 347, 348, 351, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 442, 443, 446, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 496, 497, 501, 502, 506, 507, 510, 511, 512, 515, 517, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 543, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 567, 568, 573, 575, 576, 577, 579, 580, 581, 583, 584, 585, 587, 590, 592, 594, 596, 597, 599, 601, 603, 605, 607, 609, 611, 613, 615, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 642, 643, 645, 646, 648, 649, 651, 652, 654, 655, 657, 658, 661, 662, 664, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 699, 700, 702, 703, 705, 706, 707, 710, 712, 715, 717, 720, 722, 723, 726, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 748, 751, 752, 755, 756, 759, 761, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781, 782, 783, 784, 785, 786, 787, 788, 792, 796, 797, 798, 804, 805, 808, 809, 810, 811, 812, 814, 815, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 839, 841, 844, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887, 891, 893, 899, 900, 926, 930], "exampl": [0, 4, 5, 6, 12, 16, 18, 19, 20, 31, 32, 35, 36, 37, 38, 39, 40, 49, 50, 57, 58, 65, 66, 71, 72, 76, 77, 80, 81, 82, 83, 84, 85, 94, 95, 98, 99, 102, 103, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 144, 145, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 174, 175, 178, 180, 181, 184, 185, 186, 192, 195, 196, 197, 198, 199, 207, 208, 223, 242, 243, 245, 257, 258, 259, 260, 261, 264, 266, 268, 270, 271, 273, 274, 275, 276, 277, 278, 287, 288, 289, 290, 291, 292, 295, 308, 311, 312, 315, 316, 319, 328, 331, 332, 335, 336, 337, 338, 339, 340, 343, 344, 347, 361, 364, 369, 370, 371, 372, 377, 380, 381, 384, 397, 400, 441, 442, 448, 451, 452, 455, 468, 471, 484, 487, 488, 491, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 511, 512, 513, 514, 515, 516, 519, 520, 528, 529, 536, 539, 540, 541, 542, 543, 544, 547, 558, 573, 574, 579, 580, 581, 585, 587, 588, 589, 590, 591, 623, 624, 626, 628, 629, 630, 635, 636, 637, 639, 640, 642, 643, 645, 646, 648, 655, 657, 666, 668, 672, 674, 685, 687, 691, 693, 694, 696, 706, 707, 710, 712, 715, 717, 720, 722, 723, 724, 725, 726, 727, 728, 731, 736, 739, 740, 743, 748, 751, 752, 755, 756, 757, 758, 759, 760, 761, 762, 765, 766, 769, 770, 773, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 839, 846, 847, 850, 867, 870, 871, 874, 879, 880, 883, 888], "If": [0, 4, 5, 6, 14, 17, 18, 19, 20, 21, 24, 27, 28, 69, 70, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 133, 145, 167, 168, 170, 171, 172, 174, 175, 178, 180, 181, 182, 183, 184, 185, 186, 192, 194, 214, 223, 242, 266, 273, 274, 277, 279, 282, 283, 286, 287, 290, 292, 295, 296, 299, 300, 303, 304, 307, 336, 339, 340, 343, 344, 347, 361, 364, 365, 368, 369, 372, 405, 408, 409, 412, 417, 420, 421, 424, 429, 432, 433, 436, 443, 446, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 497, 501, 502, 506, 507, 510, 511, 555, 585, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615, 636, 637, 639, 640, 642, 662, 664, 666, 668, 675, 677, 678, 680, 682, 684, 685, 687, 697, 699, 700, 702, 706, 707, 710, 712, 715, 717, 720, 722, 736, 739, 740, 743, 756, 759, 761, 762, 765, 766, 769, 782, 783, 784, 786, 798, 799, 809, 814, 815, 817, 821, 822, 823, 824, 826, 827, 828, 832, 834, 835, 836, 839, 841, 844, 846, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887, 888], "import": [0, 4, 15, 20, 65, 66, 110, 111, 113, 114, 115, 119, 121, 122, 123, 124, 125, 128, 130, 131, 133, 145, 223, 264, 888, 894], "numpi": [0, 4, 5, 6, 14, 15, 19, 20, 69, 70, 117, 119, 123, 124, 125, 126, 128, 130, 133, 511, 580, 846, 847, 850, 888], "np": [0, 4, 121, 123, 124, 125, 126, 130, 131, 133, 888], "x": [0, 4, 12, 21, 24, 27, 28, 31, 32, 35, 36, 37, 38, 49, 50, 57, 58, 69, 70, 71, 72, 76, 77, 80, 81, 82, 83, 84, 85, 94, 95, 98, 99, 102, 103, 104, 105, 113, 114, 115, 118, 119, 122, 125, 126, 128, 130, 131, 132, 133, 156, 157, 158, 159, 160, 161, 162, 163, 167, 169, 171, 173, 175, 178, 179, 181, 182, 183, 184, 185, 186, 192, 194, 195, 196, 197, 198, 199, 204, 223, 242, 243, 244, 245, 248, 249, 257, 261, 266, 268, 273, 274, 275, 276, 277, 278, 279, 282, 283, 286, 287, 288, 289, 290, 291, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 332, 335, 336, 337, 338, 339, 340, 343, 344, 347, 357, 360, 361, 364, 365, 368, 369, 370, 371, 372, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 405, 408, 409, 412, 413, 416, 417, 420, 429, 432, 441, 442, 448, 451, 456, 459, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 519, 520, 521, 523, 524, 526, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 548, 550, 551, 553, 554, 555, 557, 558, 559, 560, 564, 573, 574, 577, 579, 580, 581, 583, 584, 585, 596, 601, 603, 604, 618, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 642, 643, 645, 646, 648, 649, 651, 652, 654, 655, 657, 662, 664, 665, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 681, 685, 687, 688, 690, 691, 693, 694, 696, 700, 702, 706, 707, 710, 712, 715, 717, 720, 722, 723, 724, 725, 726, 727, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 748, 751, 752, 755, 756, 757, 758, 759, 760, 761, 762, 765, 766, 767, 768, 769, 770, 773, 774, 777, 778, 781, 786, 787, 792, 796, 797, 798, 804, 805, 808, 809, 811, 812, 813, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 844, 845, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887, 888, 910, 921], "arrai": [0, 4, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 76, 77, 80, 81, 82, 83, 84, 85, 94, 95, 98, 99, 102, 103, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 145, 146, 154, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 195, 197, 198, 199, 204, 206, 209, 211, 212, 214, 218, 223, 242, 243, 244, 245, 248, 249, 250, 251, 252, 253, 254, 255, 257, 261, 263, 267, 268, 273, 274, 276, 277, 278, 279, 282, 283, 286, 287, 289, 290, 291, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 338, 339, 340, 343, 344, 347, 348, 351, 353, 356, 357, 360, 361, 364, 365, 368, 369, 371, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 442, 443, 446, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 496, 497, 498, 500, 501, 502, 503, 505, 506, 507, 510, 511, 512, 514, 515, 516, 519, 520, 521, 523, 524, 526, 528, 529, 530, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 548, 550, 551, 552, 553, 554, 555, 557, 558, 560, 563, 564, 565, 567, 568, 573, 574, 577, 579, 580, 581, 583, 584, 585, 587, 589, 590, 591, 592, 594, 597, 599, 601, 603, 605, 607, 609, 611, 613, 615, 618, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 642, 643, 645, 646, 648, 649, 651, 652, 654, 655, 657, 658, 661, 662, 664, 665, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 699, 700, 702, 703, 705, 706, 707, 710, 712, 715, 717, 720, 722, 723, 725, 726, 727, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 748, 751, 752, 755, 756, 758, 759, 760, 761, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781, 782, 783, 784, 785, 786, 788, 798, 799, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 839, 841, 844, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887, 888, 891, 893, 910, 918, 921], "2": [0, 4, 18, 19, 21, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 57, 58, 69, 70, 71, 72, 76, 77, 80, 81, 82, 83, 84, 85, 94, 95, 98, 99, 102, 103, 115, 119, 122, 126, 127, 128, 130, 131, 132, 133, 145, 156, 158, 159, 160, 161, 163, 166, 167, 174, 175, 178, 180, 181, 185, 186, 192, 195, 196, 197, 198, 199, 223, 242, 243, 245, 257, 259, 261, 268, 273, 274, 275, 276, 277, 278, 287, 288, 289, 290, 291, 292, 295, 300, 303, 304, 307, 312, 315, 316, 319, 328, 331, 332, 335, 336, 337, 338, 339, 340, 343, 344, 347, 361, 364, 369, 370, 371, 372, 377, 380, 381, 384, 397, 400, 417, 420, 441, 442, 448, 451, 452, 455, 468, 471, 484, 487, 488, 491, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 511, 512, 513, 514, 515, 519, 520, 523, 524, 526, 529, 536, 539, 540, 541, 542, 543, 544, 558, 573, 574, 579, 585, 587, 588, 589, 590, 591, 623, 626, 627, 628, 629, 630, 635, 636, 637, 639, 640, 642, 643, 645, 646, 647, 648, 655, 657, 658, 661, 662, 664, 666, 668, 672, 674, 675, 677, 678, 680, 685, 687, 691, 692, 693, 694, 696, 700, 701, 702, 706, 707, 710, 717, 720, 722, 723, 724, 725, 726, 727, 728, 731, 736, 739, 740, 743, 748, 751, 752, 755, 756, 757, 758, 759, 760, 761, 762, 765, 770, 773, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 839, 846, 847, 850, 851, 854, 879, 880, 883, 888], "0": [0, 4, 19, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 51, 52, 57, 58, 61, 62, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 113, 114, 115, 128, 130, 131, 132, 133, 156, 158, 159, 160, 161, 162, 163, 167, 168, 172, 176, 177, 181, 182, 183, 184, 185, 186, 192, 195, 197, 198, 199, 206, 223, 225, 228, 232, 235, 239, 242, 243, 245, 248, 249, 250, 251, 252, 253, 254, 255, 257, 261, 264, 266, 267, 271, 273, 274, 275, 277, 278, 279, 282, 283, 286, 287, 290, 291, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 320, 323, 328, 331, 332, 335, 336, 337, 338, 339, 340, 343, 344, 347, 361, 364, 365, 368, 369, 370, 371, 372, 381, 384, 405, 408, 409, 412, 417, 420, 441, 442, 443, 446, 448, 451, 452, 455, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 514, 515, 516, 519, 520, 523, 524, 526, 528, 529, 530, 536, 539, 540, 543, 544, 549, 558, 564, 567, 568, 573, 579, 580, 581, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 605, 606, 607, 608, 609, 610, 611, 612, 623, 624, 626, 628, 629, 630, 635, 636, 637, 639, 640, 642, 643, 645, 646, 647, 648, 655, 657, 685, 687, 691, 693, 694, 695, 696, 700, 702, 706, 707, 710, 712, 715, 717, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 744, 747, 748, 751, 756, 757, 758, 759, 760, 761, 762, 765, 766, 767, 768, 769, 770, 773, 778, 780, 786, 798, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 839, 846, 847, 850, 851, 854, 855, 858, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 883, 888, 901, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933], "print": [0, 4, 5, 6, 12, 18, 31, 32, 35, 36, 37, 38, 39, 40, 49, 50, 57, 58, 65, 66, 69, 70, 71, 72, 73, 76, 77, 80, 81, 82, 83, 84, 85, 94, 95, 98, 99, 102, 103, 110, 111, 115, 122, 128, 130, 131, 132, 156, 158, 159, 160, 161, 162, 163, 167, 174, 175, 178, 180, 181, 184, 185, 186, 192, 195, 196, 197, 198, 199, 207, 208, 223, 243, 257, 258, 259, 260, 261, 263, 266, 270, 273, 274, 275, 276, 277, 278, 287, 288, 289, 290, 291, 292, 295, 308, 311, 312, 315, 316, 319, 328, 331, 332, 335, 336, 337, 338, 339, 340, 343, 344, 347, 361, 364, 369, 370, 371, 372, 377, 380, 381, 384, 397, 400, 441, 442, 448, 451, 452, 455, 468, 471, 484, 487, 488, 491, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 511, 512, 513, 514, 515, 516, 519, 520, 528, 529, 536, 539, 540, 541, 542, 543, 544, 547, 565, 573, 574, 579, 580, 581, 585, 587, 588, 590, 591, 623, 624, 626, 628, 629, 630, 635, 636, 637, 639, 640, 642, 643, 645, 646, 648, 655, 657, 672, 674, 685, 687, 691, 693, 694, 696, 706, 707, 710, 712, 715, 717, 720, 722, 723, 724, 725, 726, 727, 736, 739, 740, 743, 748, 751, 752, 755, 756, 757, 758, 759, 760, 761, 762, 765, 770, 773, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 839, 846, 847, 850, 851, 854, 867, 870, 871, 874, 879, 880, 883, 888], "function": [0, 4, 5, 6, 14, 19, 21, 24, 31, 32, 35, 36, 37, 38, 39, 40, 49, 50, 57, 58, 65, 66, 69, 70, 76, 77, 80, 81, 82, 83, 84, 85, 94, 95, 98, 99, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 119, 121, 125, 127, 129, 130, 131, 132, 143, 144, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 282, 283, 286, 287, 288, 289, 290, 291, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 337, 338, 339, 340, 343, 344, 347, 348, 351, 353, 356, 357, 360, 361, 364, 365, 368, 369, 370, 371, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 442, 443, 446, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 594, 596, 597, 599, 601, 603, 605, 607, 609, 611, 613, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 642, 643, 645, 646, 648, 649, 651, 652, 654, 655, 657, 658, 661, 662, 664, 665, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 699, 700, 702, 703, 705, 706, 707, 710, 712, 715, 717, 720, 722, 723, 724, 725, 726, 727, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 748, 751, 752, 755, 756, 757, 758, 759, 760, 761, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 841, 844, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887, 888, 891, 893, 896, 897, 898, 926, 929, 931], "py": [0, 4, 5, 19, 113, 114, 118, 119, 123, 124, 126, 128, 130, 132, 133, 809, 810, 814], "noqa": [0, 4, 5, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 180, 181, 182, 183, 184, 185, 186, 195, 198, 273, 274, 277, 287, 290, 312, 315, 332, 335, 336, 339, 344, 347, 452, 455, 468, 471, 484, 487, 488, 491, 497, 501, 502, 506, 636, 643, 645, 722, 736, 739, 740, 743, 756, 759, 846, 851, 854], "The": [0, 4, 5, 13, 14, 16, 17, 18, 20, 21, 24, 25, 26, 27, 28, 69, 70, 71, 72, 73, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 144, 156, 157, 158, 161, 163, 164, 165, 167, 168, 173, 177, 182, 183, 186, 190, 191, 192, 200, 205, 207, 208, 210, 213, 218, 222, 223, 232, 233, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 269, 272, 273, 274, 277, 279, 282, 283, 286, 287, 290, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 344, 347, 348, 351, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 443, 446, 452, 455, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 497, 501, 502, 506, 507, 510, 511, 517, 519, 522, 523, 531, 532, 538, 540, 543, 553, 554, 555, 557, 558, 559, 560, 562, 567, 568, 569, 570, 571, 574, 575, 576, 584, 585, 587, 590, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615, 618, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 639, 640, 642, 643, 645, 646, 648, 649, 651, 652, 654, 655, 657, 662, 664, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 699, 700, 702, 706, 707, 710, 712, 715, 717, 720, 722, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 748, 751, 752, 755, 761, 774, 777, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 814, 821, 822, 823, 824, 826, 827, 828, 832, 834, 835, 836, 839, 841, 844, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887, 888, 899, 900, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930], "set_backend": [0, 4, 5, 12, 118, 119, 120, 123, 186, 207, 208, 223, 264, 511, 573, 888], "ha": [0, 4, 5, 14, 15, 16, 19, 69, 70, 114, 115, 118, 119, 120, 123, 124, 128, 130, 132, 133, 144, 145, 167, 178, 223, 242, 273, 274, 277, 443, 446, 460, 463, 636, 658, 661, 681, 682, 684, 685, 687, 694, 696, 722, 736, 739, 762, 765, 826, 827, 828, 832, 834, 846, 855, 858, 863, 866, 867, 870, 871, 874, 875, 878], "over": [0, 4, 14, 16, 18, 65, 66, 69, 70, 110, 111, 114, 115, 119, 125, 130, 145, 636, 662, 664, 691, 693, 697, 699, 700, 702, 804, 805, 808, 809, 815, 817, 846, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887, 924, 925], "ani": [0, 4, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 63, 64, 65, 66, 69, 70, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 195, 198, 223, 268, 273, 274, 277, 287, 290, 292, 295, 336, 339, 353, 356, 369, 372, 381, 384, 401, 404, 452, 455, 484, 487, 488, 491, 497, 501, 511, 512, 515, 532, 533, 534, 535, 536, 539, 550, 557, 558, 559, 560, 575, 576, 585, 596, 623, 626, 633, 635, 722, 756, 759, 782, 783, 784, 785, 786, 792, 796, 804, 805, 808, 809, 815, 817, 826, 828, 832, 846, 851, 854, 879, 880, 883, 888], "pass": [0, 4, 20, 65, 66, 69, 70, 71, 72, 73, 110, 111, 114, 115, 116, 117, 118, 119, 121, 122, 125, 126, 130, 145, 186, 200, 223, 232, 267, 273, 304, 307, 511, 522, 555, 585, 621, 782, 783, 784, 899, 900, 922, 923, 926, 930, 932, 933], "jax": [0, 4, 5, 6, 15, 16, 19, 20, 119, 123, 124, 125, 126, 128, 130, 133, 145, 585, 601, 603, 826, 827, 828, 832, 834, 888], "get_backend": [0, 118, 119], "specifi": [0, 5, 69, 70, 112, 117, 118, 123, 124, 125, 126, 128, 131, 132, 133, 167, 168, 170, 174, 176, 177, 180, 182, 183, 184, 186, 192, 194, 223, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 261, 263, 266, 267, 268, 273, 464, 467, 511, 517, 529, 539, 540, 543, 550, 583, 636, 646, 648, 662, 664, 691, 693, 694, 696, 697, 699, 700, 702, 706, 707, 710, 712, 715, 717, 720, 722, 723, 726, 728, 731, 732, 735, 740, 743, 756, 759, 762, 765, 766, 769, 778, 781, 786, 791, 793, 794, 800, 801, 802, 803, 821, 822, 823, 826, 827, 828, 832, 834, 835, 836, 839, 846, 847, 850, 863, 866, 871, 874, 879, 880, 883, 884, 887], "isn": [0, 5, 19, 131, 145], "t": [0, 5, 15, 16, 18, 19, 20, 21, 65, 66, 110, 111, 115, 123, 128, 130, 131, 132, 133, 145, 511, 520, 623, 632, 633], "associ": [0, 5, 19, 118, 120, 145, 273, 287, 290, 443, 446, 636, 666, 668, 675, 677, 703, 705], "option": [0, 5, 18, 19, 24, 25, 26, 27, 28, 65, 66, 69, 70, 71, 72, 110, 111, 113, 114, 115, 118, 122, 123, 124, 125, 126, 128, 133, 145, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 192, 194, 200, 201, 202, 203, 210, 222, 223, 242, 266, 267, 268, 273, 274, 277, 279, 282, 283, 286, 287, 290, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 344, 347, 348, 351, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 442, 443, 446, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 496, 497, 501, 502, 506, 507, 510, 511, 517, 523, 524, 526, 529, 530, 531, 533, 534, 535, 537, 539, 540, 543, 551, 562, 564, 567, 568, 575, 576, 585, 618, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 642, 643, 645, 646, 648, 652, 654, 655, 657, 658, 661, 662, 664, 666, 668, 669, 671, 672, 674, 675, 677, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 699, 700, 702, 703, 705, 706, 707, 710, 712, 715, 717, 720, 722, 723, 726, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 748, 751, 752, 755, 756, 759, 761, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781, 782, 783, 784, 785, 786, 787, 792, 797, 798, 804, 805, 808, 809, 810, 811, 812, 814, 815, 817, 820, 821, 822, 823, 825, 826, 834, 835, 836, 839, 841, 844, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887], "str": [0, 5, 24, 25, 26, 69, 70, 123, 124, 164, 165, 167, 178, 186, 190, 200, 201, 202, 205, 206, 209, 210, 211, 212, 215, 216, 217, 222, 223, 239, 242, 243, 245, 248, 249, 250, 251, 267, 511, 517, 531, 533, 534, 535, 562, 567, 568, 623, 624, 626, 628, 629, 630, 636, 678, 680, 782, 783, 784, 785, 786, 792, 846, 847, 850], "we": [0, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 65, 66, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 144, 145, 585, 596, 888, 894], "want": [0, 5, 15, 17, 18, 19, 65, 66, 110, 111, 117, 131, 132, 133, 145], "retriev": [0, 5, 19, 511, 517], "i": [0, 5, 19, 21, 112, 128, 131, 133, 167, 168, 178, 273, 274, 277, 304, 307, 320, 323, 328, 331, 336, 339, 369, 372, 373, 376, 385, 388, 441, 442, 448, 451, 460, 463, 464, 467, 511, 519, 520, 585, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615, 636, 640, 642, 658, 661, 666, 668, 675, 677, 682, 684, 685, 687, 694, 696, 700, 702, 722, 766, 769, 826, 827, 828, 832, 834, 835, 836, 839, 841, 844, 846, 847, 850, 851, 854, 855, 858, 859, 862, 867, 870, 871, 874, 875, 878], "e": [0, 5, 15, 16, 17, 19, 21, 112, 122, 131, 145, 166, 167, 178, 186, 191, 214, 223, 239, 273, 274, 277, 304, 307, 320, 323, 328, 331, 336, 339, 361, 364, 369, 372, 373, 376, 385, 388, 405, 408, 413, 416, 441, 442, 448, 451, 460, 463, 464, 467, 585, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615, 636, 640, 642, 658, 661, 666, 668, 675, 677, 682, 684, 685, 687, 700, 702, 722, 766, 769, 809, 814, 815, 817, 826, 827, 828, 832, 834, 835, 836, 839, 841, 844, 846, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878], "one": [0, 5, 15, 16, 18, 19, 69, 70, 80, 81, 82, 83, 94, 95, 98, 99, 115, 118, 121, 122, 123, 125, 126, 127, 130, 131, 133, 145, 167, 168, 178, 186, 193, 195, 198, 223, 252, 253, 254, 255, 267, 274, 278, 287, 291, 511, 512, 514, 515, 516, 540, 544, 561, 564, 567, 568, 636, 658, 661, 662, 664, 672, 674, 678, 680, 697, 699, 700, 702, 722, 723, 727, 736, 739, 740, 743, 756, 759, 760, 762, 765, 811, 813, 821, 822, 824, 826, 827, 828, 832, 833, 834, 846, 847, 850, 888], "default": [0, 5, 19, 24, 25, 26, 27, 28, 65, 66, 69, 70, 71, 72, 73, 110, 111, 114, 115, 118, 119, 122, 123, 124, 126, 132, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 192, 194, 201, 202, 203, 204, 223, 232, 233, 242, 243, 247, 248, 249, 250, 251, 252, 253, 254, 255, 262, 264, 265, 266, 267, 268, 271, 272, 273, 274, 277, 279, 282, 283, 286, 287, 290, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 344, 347, 348, 351, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 442, 443, 446, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 496, 497, 501, 502, 506, 507, 510, 511, 512, 515, 517, 523, 524, 526, 529, 530, 533, 534, 535, 537, 538, 539, 540, 543, 548, 549, 550, 551, 552, 555, 556, 557, 558, 560, 561, 562, 564, 566, 567, 568, 571, 573, 575, 576, 583, 584, 585, 587, 590, 592, 594, 596, 597, 599, 601, 603, 605, 607, 609, 611, 613, 615, 618, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 642, 643, 645, 646, 648, 652, 654, 655, 657, 658, 661, 662, 664, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 699, 700, 702, 703, 705, 706, 707, 710, 712, 715, 717, 720, 722, 723, 726, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 748, 751, 752, 755, 756, 759, 761, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781, 782, 783, 784, 785, 786, 787, 788, 792, 796, 797, 798, 799, 804, 805, 808, 809, 810, 811, 812, 814, 815, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 834, 835, 836, 839, 841, 844, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887, 899, 900, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933], "torch": [0, 5, 12, 19, 113, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 164, 165, 186, 207, 208, 223, 264, 511, 573, 722, 736, 739, 888], "tensorflow": [0, 5, 12, 15, 16, 19, 20, 123, 124, 125, 126, 128, 133, 145, 888], "mxnet": [0, 5, 15, 20, 123, 124, 125, 128, 133, 888], "either": [0, 5, 12, 18, 19, 21, 69, 70, 114, 115, 118, 119, 122, 123, 124, 128, 130, 131, 145, 167, 173, 273, 287, 290, 304, 307, 389, 392, 405, 408, 409, 412, 417, 420, 421, 424, 443, 446, 464, 467, 472, 475, 476, 479, 497, 501, 511, 532, 557, 561, 562, 636, 658, 661, 782, 783, 784, 785, 846, 863, 866, 871, 874, 910, 921, 922, 923], "doesn": [0, 5, 18, 21, 115, 123, 128, 145], "matter": [0, 5, 14, 115], "been": [0, 5, 19, 114, 118, 119, 122, 123, 124, 126, 128, 144, 145, 223, 242, 511, 533, 534, 535, 809, 810], "ivy_np": [0, 5], "us": [0, 5, 12, 15, 16, 17, 19, 20, 35, 36, 65, 66, 69, 70, 71, 72, 73, 80, 81, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 144, 145, 156, 158, 159, 160, 161, 162, 163, 166, 186, 205, 223, 232, 233, 258, 262, 265, 266, 267, 268, 270, 272, 273, 274, 275, 276, 292, 295, 312, 315, 332, 335, 344, 347, 381, 384, 441, 442, 448, 451, 452, 455, 468, 471, 484, 487, 511, 539, 546, 547, 561, 567, 568, 569, 570, 575, 576, 585, 587, 590, 592, 594, 605, 607, 609, 611, 623, 629, 631, 632, 634, 635, 636, 643, 645, 646, 648, 662, 664, 706, 707, 710, 722, 736, 739, 740, 743, 748, 751, 756, 759, 770, 773, 782, 783, 784, 785, 786, 787, 789, 795, 796, 797, 799, 804, 805, 808, 821, 822, 823, 824, 826, 827, 846, 847, 850, 879, 880, 883, 888, 910, 918, 921, 922, 923, 924, 925, 926, 928, 929], "ivy_jax": [0, 5], "subsequ": [0, 6, 18, 115, 117, 118, 121, 125, 126, 132], "call": [0, 6, 12, 15, 21, 71, 72, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 223, 267, 511, 566, 571, 582, 585, 596, 786, 787, 792, 796, 797, 910, 921, 922, 923, 926, 930], "nativ": [0, 6, 24, 26, 27, 28, 69, 70, 123, 125, 130, 131, 167, 179, 186, 190, 191, 200, 223, 239, 240, 241, 242, 243, 262, 269, 272, 511, 555, 557, 560, 899, 900], "native_arrai": [0, 6, 12, 37, 38, 71, 72, 82, 83, 156, 158, 159, 160, 161, 162, 163, 167, 178, 186, 195, 198, 223, 245, 261, 273, 274, 277, 292, 295, 312, 315, 332, 335, 336, 339, 369, 372, 381, 384, 441, 442, 448, 451, 452, 455, 484, 487, 488, 491, 502, 506, 511, 512, 513, 514, 515, 516, 520, 528, 529, 536, 539, 540, 543, 574, 579, 580, 581, 585, 587, 590, 623, 626, 629, 630, 635, 636, 640, 642, 643, 645, 646, 648, 691, 693, 706, 707, 710, 717, 720, 722, 723, 726, 736, 739, 740, 743, 748, 751, 761, 770, 773, 804, 805, 808, 809, 810, 821, 822, 823, 824, 825, 826, 827, 828, 832, 846, 847, 850, 851, 854, 879, 880, 883], "1": [0, 6, 12, 15, 16, 21, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 69, 70, 71, 72, 76, 77, 80, 81, 82, 83, 84, 85, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 115, 118, 122, 125, 126, 127, 128, 130, 131, 132, 133, 145, 156, 158, 159, 160, 161, 163, 167, 168, 175, 176, 177, 178, 180, 181, 185, 186, 192, 195, 196, 197, 198, 199, 206, 223, 227, 230, 232, 237, 242, 243, 245, 247, 251, 255, 257, 260, 261, 268, 273, 274, 275, 276, 277, 279, 282, 283, 286, 287, 288, 289, 290, 291, 292, 295, 304, 307, 312, 315, 316, 319, 328, 331, 332, 335, 336, 337, 338, 339, 340, 343, 344, 347, 361, 364, 365, 368, 369, 370, 371, 372, 377, 380, 381, 384, 397, 400, 405, 408, 409, 412, 413, 416, 417, 420, 441, 442, 448, 451, 452, 455, 460, 463, 468, 471, 472, 475, 476, 479, 484, 487, 488, 491, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 511, 512, 513, 514, 515, 516, 519, 520, 528, 529, 536, 539, 540, 541, 542, 543, 544, 558, 564, 567, 568, 573, 574, 576, 579, 580, 581, 583, 585, 587, 588, 589, 590, 591, 623, 624, 625, 626, 627, 628, 629, 630, 631, 635, 636, 637, 639, 640, 641, 642, 643, 645, 646, 647, 648, 655, 657, 666, 668, 672, 674, 682, 684, 685, 687, 691, 693, 694, 696, 697, 698, 699, 700, 702, 706, 707, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 731, 736, 739, 740, 743, 744, 747, 748, 751, 752, 755, 756, 757, 758, 759, 760, 761, 762, 765, 766, 769, 770, 773, 786, 798, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 854, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887, 888, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 932, 933], "type": [0, 6, 12, 18, 20, 24, 25, 26, 27, 28, 32, 35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 77, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 120, 121, 122, 124, 125, 126, 128, 130, 131, 133, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 222, 223, 239, 240, 241, 242, 243, 245, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 519, 520, 522, 523, 524, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 550, 551, 553, 554, 555, 557, 558, 559, 560, 564, 567, 568, 569, 570, 573, 575, 576, 577, 579, 580, 581, 583, 584, 585, 587, 588, 589, 590, 591, 592, 594, 595, 597, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 611, 612, 613, 614, 615, 616, 618, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 792, 796, 797, 798, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921], "ndarrai": [0, 6, 121, 123, 124, 125, 126, 130, 167, 169, 179, 511, 580], "Or": [0, 6, 131], "jaxlib": [0, 6, 18, 123, 124, 126, 130], "xla_extens": [0, 6, 123, 124, 126, 130], "devicearrai": [0, 6, 130], "try_import_ivy_jax": 0, "warn": [0, 7, 8, 9, 10, 11], "fals": [0, 7, 8, 9, 10, 11, 24, 25, 26, 27, 28, 37, 38, 45, 46, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 122, 125, 131, 132, 133, 186, 192, 195, 197, 198, 199, 204, 223, 242, 243, 254, 258, 259, 262, 267, 270, 272, 273, 274, 276, 278, 279, 281, 283, 285, 287, 289, 291, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 315, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 380, 381, 383, 384, 385, 387, 388, 389, 391, 392, 393, 395, 396, 397, 399, 400, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 432, 433, 435, 436, 437, 439, 443, 445, 447, 448, 450, 452, 454, 455, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 493, 495, 497, 498, 500, 502, 503, 505, 507, 509, 511, 512, 513, 514, 515, 516, 519, 520, 524, 525, 529, 532, 536, 538, 540, 542, 544, 548, 555, 557, 558, 560, 561, 573, 583, 585, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 636, 637, 638, 639, 658, 660, 662, 663, 664, 685, 687, 700, 701, 702, 707, 709, 711, 712, 714, 716, 717, 719, 721, 722, 723, 725, 727, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 761, 762, 764, 766, 768, 770, 772, 774, 776, 778, 780, 782, 783, 784, 785, 786, 787, 788, 792, 796, 797, 798, 799, 805, 807, 809, 810, 815, 816, 818, 821, 822, 823, 825, 826, 827, 828, 829, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 899, 900, 922, 923, 926, 927, 928, 929, 930, 931], "try_import_ivy_mxnet": 0, "try_import_ivy_numpi": 0, "try_import_ivy_tf": 0, "try_import_ivy_torch": 0, "unset_backend": [0, 119], "unset": [0, 12, 119, 128, 130], "adjust": [0, 12, 846, 867, 870, 875, 878], "dict": [0, 12, 24, 25, 26, 27, 28, 69, 70, 71, 72, 73, 122, 131, 132, 223, 232, 233, 242, 245, 248, 249, 250, 251, 511, 517, 533, 534, 535, 786, 788, 789, 792, 795, 798, 799], "previous": [0, 12, 18, 21, 117, 118, 128, 511, 522], "otherwis": [0, 12, 24, 25, 26, 27, 28, 69, 70, 121, 123, 124, 126, 128, 130, 167, 168, 186, 192, 195, 198, 201, 202, 203, 223, 242, 273, 385, 388, 389, 392, 393, 396, 511, 521, 582, 585, 601, 603, 618, 636, 637, 639, 643, 645, 697, 699, 700, 702, 782, 783, 784, 786, 799, 821, 822, 823, 825, 846, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887], "implement": [0, 12, 20, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 186, 192, 214, 223, 268, 273, 274, 277, 279, 282, 283, 286, 292, 295, 296, 299, 300, 303, 304, 307, 340, 343, 344, 347, 361, 364, 365, 368, 405, 408, 409, 412, 413, 416, 417, 420, 443, 446, 460, 463, 464, 467, 476, 479, 480, 483, 497, 501, 502, 506, 636, 649, 651, 826, 827, 828, 832, 834, 835, 836, 839, 841, 844, 846, 851, 854, 855, 858, 859, 862, 888], "wa": [0, 12, 15, 69, 70, 115, 128, 130, 511, 582, 786, 799, 846, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887], "last": [0, 12, 16, 19, 69, 70, 115, 119, 145, 156, 161, 223, 242, 623, 633, 636, 640, 642, 646, 648, 662, 664, 694, 696, 697, 699, 706, 712, 715, 717, 720, 722, 740, 743, 756, 759, 761, 766, 769, 835, 836, 839, 841, 844, 879, 880, 883, 884, 887, 910, 920], "henc": [0, 12, 826, 827, 828, 832, 834], "here": [0, 12, 18, 19, 20, 113, 115, 122, 126, 128, 129, 130, 131, 132, 133, 144, 145], "tensor": [0, 12, 14, 69, 70, 113, 118, 119, 121, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 167, 176, 177, 186, 204, 273, 312, 315, 441, 442, 511, 564, 567, 568, 623, 631, 633, 636, 691, 693, 722, 736, 739, 752, 755, 761, 809, 810, 821, 824, 888, 910, 918, 920], "howev": [0, 12, 15, 18, 20, 114, 117, 118, 119, 121, 122, 123, 124, 125, 126, 130, 131, 132, 133, 145], "befor": [0, 12, 18, 19, 20, 69, 70, 114, 117, 121, 123, 124, 125, 128, 131, 145, 223, 267, 273, 507, 510, 623, 634, 635, 782, 783, 784, 786, 798, 826, 827, 828, 832, 834, 846, 863, 866, 871, 874], "becom": [0, 12, 14, 16, 19, 115, 122, 128, 133, 145, 722, 723, 726], "swap": [0, 12, 722, 770, 773], "python": [0, 12, 13, 14, 15, 18, 19, 21, 128, 130, 131, 145, 167, 168, 223, 262, 272, 273, 464, 467, 888, 894], "framework": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 23, 24, 25, 26, 27, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 69, 70, 72, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 112, 116, 118, 119, 120, 121, 124, 126, 127, 130, 133, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 892, 893, 894, 897, 898, 899, 900, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 925, 926, 927, 928, 929, 930, 931, 933, 934, 936], "op": [0, 12, 113, 128, 145], "eagertensor": [0, 12], "def": [1, 20, 113, 115, 118, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 187, 188, 189, 224, 231, 234, 586, 888, 902, 905, 908], "support": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 23, 25, 26, 27, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 69, 70, 72, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 114, 115, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 133, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 892, 893, 894, 897, 898, 900, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 925, 926, 927, 928, 929, 930, 931, 933, 934, 936], "backend": [4, 5, 6, 12, 14, 19, 20, 24, 26, 28, 69, 70, 112, 114, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 129, 130, 133, 186, 207, 208, 210, 222, 223, 258, 260, 270, 511, 552, 555, 556, 562, 585, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615, 621, 888, 894, 899, 900, 926, 927, 928, 929, 930, 931], "ml": [13, 15, 16, 17, 127, 128, 129, 131, 132, 133, 144, 888, 894], "explos": [13, 15, 888], "A": [13, 14, 15, 16, 21, 69, 70, 71, 72, 73, 112, 117, 118, 122, 123, 124, 128, 131, 145, 167, 172, 179, 223, 232, 233, 267, 273, 456, 459, 511, 547, 579, 636, 672, 674, 681, 682, 684, 685, 687, 722, 761, 766, 769, 786, 787, 789, 791, 793, 794, 795, 796, 797, 800, 801, 802, 803, 846, 847, 850, 879, 880, 883, 884, 887, 888, 932, 933], "huge": [13, 15, 131, 888], "number": [13, 14, 18, 69, 70, 71, 72, 73, 115, 122, 124, 125, 128, 131, 133, 164, 165, 166, 167, 168, 169, 172, 176, 177, 178, 179, 186, 193, 205, 206, 209, 211, 212, 214, 223, 259, 260, 261, 273, 287, 290, 304, 307, 336, 339, 369, 372, 373, 376, 441, 442, 443, 446, 460, 463, 464, 467, 468, 471, 472, 475, 507, 510, 511, 512, 515, 538, 547, 548, 563, 581, 584, 623, 634, 636, 649, 651, 666, 668, 681, 685, 687, 697, 699, 722, 723, 726, 732, 735, 744, 747, 748, 751, 756, 759, 761, 766, 769, 774, 777, 778, 781, 782, 783, 784, 785, 809, 810, 819, 821, 824, 826, 827, 828, 832, 846, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887, 888, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921], "tool": [13, 16, 19, 129, 133, 144, 145, 888], "have": [13, 14, 15, 16, 18, 19, 20, 21, 69, 70, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 144, 145, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 206, 223, 268, 273, 274, 277, 279, 282, 283, 286, 287, 290, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 344, 347, 348, 351, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 442, 443, 446, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 496, 497, 501, 502, 506, 507, 510, 511, 523, 524, 526, 529, 533, 534, 535, 537, 540, 543, 551, 564, 567, 568, 585, 601, 603, 618, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 639, 640, 642, 643, 645, 646, 648, 649, 651, 652, 654, 655, 657, 658, 661, 662, 664, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 699, 700, 702, 703, 705, 706, 707, 710, 712, 715, 717, 720, 722, 723, 726, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 748, 751, 752, 755, 756, 759, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781, 804, 805, 808, 809, 810, 811, 812, 814, 815, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 834, 835, 836, 839, 841, 844, 846, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887, 888], "explod": [13, 14, 888], "onto": [13, 14, 223, 252, 253, 786, 792, 798, 888], "scene": [13, 14, 112, 127, 129, 585, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615, 888], "b": [13, 16, 17, 71, 72, 76, 77, 80, 81, 82, 83, 84, 85, 94, 95, 98, 99, 102, 103, 112, 115, 118, 119, 122, 127, 128, 129, 131, 132, 133, 143, 186, 195, 197, 198, 199, 223, 245, 273, 274, 276, 277, 278, 287, 289, 290, 291, 292, 295, 312, 315, 332, 335, 336, 338, 339, 344, 347, 369, 371, 372, 381, 384, 448, 451, 452, 455, 468, 471, 484, 487, 488, 491, 497, 498, 500, 501, 502, 503, 505, 506, 511, 512, 514, 515, 516, 519, 520, 528, 529, 536, 539, 540, 542, 543, 544, 581, 585, 587, 589, 590, 591, 623, 626, 629, 630, 635, 636, 637, 639, 640, 642, 643, 645, 672, 674, 682, 684, 691, 693, 703, 705, 706, 707, 710, 722, 723, 725, 726, 727, 736, 739, 740, 743, 748, 751, 756, 758, 759, 760, 766, 769, 770, 773, 804, 805, 808, 809, 811, 813, 814, 815, 817, 821, 823, 824, 825, 826, 828, 829, 831, 832, 835, 836, 839, 846, 847, 850, 851, 854, 879, 880, 883, 888, 894], "why": [13, 15, 19, 122, 125, 126, 130, 888], "unifi": [13, 15, 69, 70, 121, 128, 145, 223, 252, 253, 254, 255, 267, 888], "should": [13, 15, 18, 19, 20, 21, 69, 70, 71, 72, 73, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 130, 131, 132, 164, 165, 167, 178, 182, 183, 186, 194, 223, 273, 274, 277, 279, 282, 283, 286, 287, 290, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 344, 347, 348, 351, 361, 364, 365, 368, 369, 372, 385, 388, 389, 392, 393, 396, 397, 400, 405, 408, 409, 412, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 443, 446, 452, 455, 460, 463, 464, 467, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 496, 497, 501, 502, 506, 507, 510, 511, 522, 555, 564, 585, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615, 623, 635, 636, 637, 639, 640, 642, 643, 645, 646, 648, 655, 657, 658, 661, 666, 668, 672, 674, 675, 677, 678, 680, 682, 684, 685, 687, 691, 693, 694, 696, 697, 699, 700, 702, 722, 752, 755, 809, 820, 821, 822, 823, 826, 827, 828, 832, 834, 846, 847, 850, 851, 854, 855, 858, 863, 866, 867, 870, 871, 874, 875, 878, 888], "them": [13, 14, 15, 16, 117, 119, 121, 122, 128, 130, 131, 132, 145, 888], "c": [13, 15, 16, 17, 98, 99, 112, 115, 118, 122, 127, 128, 129, 131, 145, 273, 452, 455, 511, 519, 520, 528, 581, 585, 587, 590, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615, 623, 629, 722, 766, 769, 811, 813, 821, 824, 846, 847, 850, 867, 870, 875, 878, 888, 894], "standard": [13, 112, 113, 114, 116, 117, 121, 125, 126, 145, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 180, 181, 182, 183, 184, 185, 186, 195, 198, 206, 273, 274, 277, 287, 290, 292, 295, 312, 315, 332, 335, 336, 339, 344, 347, 369, 372, 452, 455, 468, 471, 484, 487, 488, 491, 497, 501, 502, 506, 636, 643, 645, 722, 736, 739, 740, 743, 756, 759, 804, 805, 808, 809, 814, 826, 827, 828, 832, 835, 836, 839, 846, 851, 854, 867, 870, 875, 878, 879, 880, 883, 888, 894, 924, 925], "re": [13, 14, 15, 17, 18, 19, 20, 21, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 130, 133, 145, 223, 267, 511, 533, 636, 691, 693, 722, 756, 759, 821, 825, 888], "collabor": [13, 14, 15, 888], "consortium": [13, 15, 888, 894], "data": [13, 15, 69, 70, 71, 72, 73, 112, 113, 114, 118, 120, 122, 124, 125, 126, 130, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 190, 191, 192, 194, 195, 198, 200, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 218, 222, 223, 225, 226, 227, 228, 229, 230, 235, 236, 237, 239, 273, 274, 277, 279, 282, 283, 286, 287, 290, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 344, 347, 348, 351, 353, 356, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 443, 446, 452, 455, 460, 463, 464, 467, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 496, 497, 501, 502, 506, 507, 510, 511, 519, 520, 557, 558, 560, 577, 585, 601, 603, 621, 623, 632, 636, 637, 639, 640, 642, 643, 645, 646, 648, 649, 651, 652, 654, 655, 657, 658, 661, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 682, 684, 685, 687, 691, 693, 694, 696, 697, 699, 700, 702, 722, 736, 739, 740, 743, 744, 747, 752, 755, 756, 759, 762, 765, 766, 769, 809, 820, 821, 822, 823, 824, 835, 836, 839, 846, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887, 888, 894, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921], "api": [13, 14, 18, 19, 112, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 129, 131, 145, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 180, 181, 182, 183, 184, 185, 186, 195, 198, 273, 274, 277, 287, 290, 292, 295, 312, 315, 332, 335, 336, 339, 344, 347, 369, 372, 452, 455, 468, 471, 484, 487, 488, 491, 497, 501, 502, 506, 636, 643, 645, 722, 736, 739, 740, 743, 756, 759, 826, 827, 828, 832, 835, 836, 839, 846, 851, 854, 879, 880, 883, 888, 894], "open": [14, 15, 16, 17, 18, 21, 114, 144, 167, 168, 809, 811, 812, 815, 817, 888], "project": [14, 15, 16, 18, 19, 21, 113, 119, 130, 132, 144, 145, 809, 810, 814], "grown": 14, "consider": [14, 115, 126], "recent": [14, 15, 18, 19], "year": [14, 16, 145, 888], "especi": [14, 18], "deep": [14, 17, 19, 20, 69, 70, 127, 131, 888], "learn": [14, 15, 18, 20, 112, 118, 127, 133, 144, 273, 377, 380, 585, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615, 782, 783, 784, 785, 888, 926, 927, 928, 929, 930, 931], "can": [14, 15, 16, 17, 18, 19, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 167, 169, 179, 186, 195, 198, 223, 265, 266, 267, 636, 655, 657, 722, 752, 755, 809, 811, 812, 888, 894], "seen": [14, 15, 115, 130, 131], "rapidli": 14, "increas": [14, 223, 247, 251, 255, 722, 732, 735, 778, 781, 786, 798], "github": [14, 19, 20, 114, 117], "repo": [14, 15, 16, 18, 19, 116, 128, 130, 131, 132, 133, 144, 888, 894], "contain": [14, 18, 19, 20, 21, 24, 27, 28, 37, 38, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 118, 123, 125, 126, 127, 128, 129, 132, 133, 145, 156, 159, 160, 162, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 195, 198, 223, 244, 245, 248, 257, 261, 273, 274, 277, 279, 282, 283, 286, 287, 290, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 344, 347, 348, 351, 353, 356, 357, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 442, 443, 446, 448, 451, 452, 455, 456, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 496, 497, 501, 502, 506, 507, 510, 511, 512, 513, 515, 517, 520, 523, 524, 526, 528, 529, 536, 539, 540, 543, 550, 559, 579, 580, 581, 585, 587, 590, 592, 597, 601, 605, 609, 613, 623, 626, 629, 630, 635, 636, 637, 639, 640, 642, 643, 645, 646, 648, 649, 651, 652, 654, 655, 657, 658, 661, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 699, 700, 702, 706, 707, 710, 712, 715, 717, 720, 722, 723, 726, 728, 732, 736, 739, 740, 743, 744, 747, 748, 751, 752, 756, 759, 761, 762, 766, 770, 773, 774, 778, 782, 783, 784, 785, 786, 799, 804, 805, 808, 809, 810, 811, 814, 815, 817, 821, 822, 823, 824, 825, 826, 827, 828, 832, 834, 835, 836, 839, 841, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887, 888, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 926, 930, 932, 933], "term": [14, 19, 122, 623, 633, 910, 920], "time": [14, 15, 16, 18, 19, 20, 117, 118, 122, 123, 126, 128, 131, 133, 145, 585, 592, 594, 605, 607, 623, 633, 722, 774, 777, 782, 783, 784, 785, 821, 822, 823, 826, 827, 828, 832, 910, 921, 922, 923], "These": [14, 15, 16, 19, 114, 115, 117, 118, 122, 123, 125, 126, 128, 129, 131, 132, 133, 145, 636, 649, 651, 888, 894], "ar": [14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 69, 70, 71, 72, 73, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 145, 146, 154, 167, 168, 223, 232, 233, 257, 261, 263, 267, 273, 340, 343, 429, 432, 433, 436, 468, 471, 476, 479, 497, 501, 511, 512, 515, 519, 520, 521, 545, 551, 552, 556, 563, 565, 577, 623, 632, 636, 640, 642, 658, 661, 662, 664, 666, 668, 675, 677, 685, 687, 688, 690, 697, 699, 722, 723, 726, 740, 743, 756, 759, 786, 788, 792, 798, 809, 814, 815, 817, 821, 822, 823, 824, 826, 827, 888, 932, 933], "written": [14, 18, 113, 114, 121, 125, 126, 128, 130, 133, 145], "mani": [14, 15, 16, 18, 19, 20, 69, 70, 114, 115, 118, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 145, 722, 761], "differ": [14, 15, 16, 18, 19, 69, 70, 71, 72, 73, 112, 113, 114, 115, 117, 118, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 145, 186, 206, 223, 244, 245, 248, 249, 273, 287, 290, 443, 446, 492, 496, 623, 632, 722, 766, 769, 846, 863, 866, 871, 874, 888], "while": [14, 15, 18, 19, 69, 70, 71, 72, 73, 115, 119, 125, 132, 133, 145, 273, 429, 432, 433, 436, 826, 827, 846, 855, 858], "thi": [14, 15, 16, 17, 18, 19, 20, 21, 31, 32, 35, 36, 37, 38, 39, 40, 49, 50, 57, 58, 69, 70, 71, 72, 73, 76, 77, 80, 81, 82, 83, 84, 85, 94, 95, 98, 99, 102, 103, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 145, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 195, 196, 197, 198, 199, 223, 247, 251, 255, 262, 267, 272, 273, 274, 275, 276, 277, 278, 287, 288, 289, 290, 291, 292, 295, 312, 315, 328, 331, 332, 335, 336, 337, 338, 339, 344, 347, 365, 368, 369, 370, 371, 372, 429, 432, 433, 436, 452, 455, 464, 467, 468, 471, 484, 487, 488, 491, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 511, 512, 513, 514, 516, 538, 539, 540, 541, 542, 544, 555, 566, 571, 585, 587, 588, 589, 591, 592, 594, 597, 599, 601, 603, 605, 607, 609, 611, 613, 615, 621, 623, 626, 632, 635, 636, 643, 645, 662, 664, 681, 722, 723, 724, 725, 727, 736, 739, 740, 743, 752, 755, 756, 757, 758, 759, 760, 766, 769, 786, 792, 798, 799, 804, 805, 808, 811, 813, 821, 822, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 839, 846, 851, 854, 855, 858, 867, 870, 875, 878, 879, 880, 883, 888, 894, 922, 923, 926, 927, 928, 929, 930, 931], "wonder": [14, 16, 130], "thing": [14, 15, 16, 18, 19, 20, 119, 130, 131], "research": [14, 144], "develop": [14, 15, 16, 17, 18, 19, 20, 144, 145, 888], "also": [14, 15, 17, 18, 19, 24, 25, 26, 27, 28, 31, 32, 35, 36, 37, 38, 39, 40, 49, 50, 57, 58, 69, 70, 76, 77, 80, 81, 82, 83, 84, 85, 94, 95, 98, 99, 102, 103, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 195, 196, 197, 198, 199, 273, 274, 275, 276, 277, 278, 287, 288, 289, 290, 291, 292, 295, 312, 315, 332, 335, 336, 337, 338, 339, 344, 347, 369, 370, 371, 372, 452, 455, 468, 471, 484, 487, 488, 491, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 511, 512, 513, 514, 516, 539, 540, 541, 542, 544, 555, 585, 587, 588, 589, 591, 592, 594, 623, 626, 632, 635, 636, 643, 645, 722, 723, 724, 725, 727, 736, 739, 740, 743, 756, 757, 758, 759, 760, 782, 783, 784, 785, 786, 787, 788, 796, 797, 798, 804, 805, 808, 811, 813, 826, 827, 828, 829, 830, 831, 832, 835, 836, 839, 846, 851, 854, 879, 880, 883, 910, 920], "consid": [14, 15, 69, 70, 113, 118, 129, 130, 131, 273, 429, 432, 433, 436, 826, 827, 828, 832, 834], "speed": 14, "evolv": 14, "sharabl": 14, "code": [14, 15, 16, 18, 19, 20, 21, 69, 70, 71, 72, 73, 84, 85, 112, 114, 115, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 143, 145, 156, 158, 159, 160, 161, 162, 163, 223, 245, 268, 273, 332, 335, 488, 491, 585, 587, 589, 590, 591, 623, 629, 630, 826, 827, 828, 832, 835, 836, 839, 846, 847, 850, 888, 894], "significantli": 14, "hinder": [14, 126], "librari": [14, 15, 16, 128, 133, 143, 145, 223, 268, 273, 365, 368, 429, 432, 433, 436, 636, 649, 651, 826, 827, 828, 832, 834, 846, 851, 854, 855, 858, 859, 862, 888], "outdat": 14, "month": 14, "rigor": 14, "maintain": [14, 19, 835, 836, 839, 841, 844], "against": [14, 69, 70, 117, 145, 186, 193, 636, 658, 661, 662, 664, 666, 668, 675, 677, 821, 822], "newest": 14, "version": [14, 15, 16, 18, 114, 128, 130, 636, 649, 651, 888], "For": [14, 15, 16, 18, 19, 20, 21, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 167, 168, 178, 273, 274, 277, 279, 282, 283, 286, 287, 290, 292, 295, 296, 299, 300, 303, 304, 307, 336, 339, 340, 343, 344, 347, 361, 364, 365, 368, 369, 372, 405, 408, 409, 412, 417, 420, 421, 424, 443, 446, 460, 463, 464, 467, 468, 471, 476, 479, 480, 483, 484, 487, 497, 501, 502, 506, 507, 510, 585, 601, 603, 621, 636, 685, 687, 694, 696, 722, 723, 726, 766, 769, 826, 827, 828, 832, 834, 846, 851, 854, 859, 862, 871, 874, 899, 900], "softwar": [14, 15, 18, 19], "pipelin": [14, 121, 133], "where": [14, 15, 16, 17, 18, 19, 20, 21, 69, 70, 71, 72, 114, 118, 119, 121, 122, 123, 124, 125, 128, 131, 132, 133, 145, 167, 174, 175, 178, 273, 304, 307, 361, 364, 413, 416, 443, 446, 460, 463, 511, 551, 555, 564, 636, 649, 651, 666, 668, 675, 677, 678, 680, 685, 687, 688, 690, 694, 696, 697, 699, 722, 723, 726, 732, 735, 736, 739, 744, 747, 766, 769, 778, 781, 786, 787, 797, 809, 810, 821, 824, 846, 867, 870, 875, 878, 879, 880, 883, 884, 887, 888], "rapid": [14, 15, 18], "prototyp": 14, "vital": [14, 133], "signific": [14, 15, 145], "bottleneck": 14, "As": [14, 19, 65, 66, 110, 111, 117, 118, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 145, 826, 827, 828, 832, 834], "new": [14, 15, 16, 17, 18, 19, 20, 21, 69, 70, 112, 113, 114, 115, 117, 120, 122, 123, 125, 127, 130, 133, 144, 167, 170, 173, 174, 175, 180, 181, 184, 185, 186, 218, 273, 308, 311, 413, 416, 456, 459, 511, 533, 534, 535, 538, 539, 540, 543, 567, 568, 569, 570, 575, 576, 585, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615, 722, 736, 739, 752, 755, 766, 769, 786, 791, 802, 803, 804, 805, 808, 888, 899, 900, 910, 920, 924, 925, 926, 927, 928, 929, 930, 931], "futur": [14, 16, 18, 19, 130, 145, 636, 649, 651], "avail": [14, 18, 19, 69, 70, 114, 124, 145, 223, 242, 258, 259, 260, 270, 511, 534], "specif": [14, 20, 69, 70, 118, 121, 122, 123, 124, 125, 126, 128, 129, 130, 132, 133, 144, 145, 186, 214, 223, 265, 268, 273, 429, 432, 433, 436, 511, 533, 534, 535, 562, 636, 649, 651, 691, 693, 722, 766, 769, 782, 783, 784, 785, 809, 810, 846, 851, 854, 855, 858, 859, 862, 888, 891, 893, 894, 922, 923], "quickli": [14, 16, 18, 19, 131, 132], "obsolet": [14, 16], "user": [14, 15, 18, 19, 21, 112, 117, 119, 122, 125, 127, 145, 910, 921, 922, 923], "constantli": 14, "invent": 14, "wheel": 14, "our": [14, 15, 17, 18, 19, 65, 66, 110, 111, 115, 122, 127, 130, 131, 132, 133, 145, 888], "desir": [14, 69, 70, 186, 192, 195, 198, 223, 268, 511, 551, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921], "provid": [14, 18, 19, 69, 70, 114, 115, 118, 121, 122, 123, 124, 125, 126, 128, 132, 144, 145, 164, 165, 167, 178, 186, 201, 202, 203, 210, 214, 222, 223, 242, 511, 532, 564, 568, 585, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615, 636, 697, 699, 722, 740, 743, 766, 769, 821, 822, 846, 867, 870, 875, 878, 879, 880, 883, 884, 887, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 926, 927, 928, 929, 930, 931], "simultan": [14, 16], "all": [14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 63, 64, 65, 66, 69, 70, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 146, 154, 164, 165, 167, 168, 182, 183, 223, 232, 257, 263, 511, 512, 515, 519, 520, 545, 565, 580, 623, 633, 636, 682, 684, 691, 693, 700, 702, 722, 740, 743, 756, 759, 782, 783, 784, 785, 786, 787, 788, 797, 798, 799, 809, 810, 815, 817, 879, 888, 891, 893], "modern": [14, 15], "simpl": [14, 18, 19, 113, 114, 115, 117, 118, 121, 122, 123, 124, 125, 128, 130, 132, 133, 145, 511, 536], "scalabl": [14, 128], "manner": [14, 24, 27, 28, 69, 70, 113, 114, 124, 131, 144, 145, 786, 798], "must": [14, 16, 18, 19, 20, 69, 70, 71, 72, 73, 113, 114, 115, 118, 121, 122, 123, 124, 126, 128, 132, 133, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 223, 252, 253, 254, 255, 267, 268, 273, 274, 277, 279, 282, 283, 286, 287, 290, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 344, 347, 348, 351, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 442, 443, 446, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 496, 497, 501, 502, 506, 507, 510, 511, 523, 524, 526, 529, 533, 534, 535, 537, 540, 543, 551, 564, 567, 568, 585, 618, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 639, 640, 642, 643, 645, 646, 648, 649, 651, 652, 654, 655, 657, 658, 661, 662, 664, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 699, 700, 702, 703, 705, 706, 707, 710, 712, 715, 717, 720, 722, 723, 726, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 748, 751, 752, 755, 756, 759, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781, 804, 805, 808, 809, 810, 811, 812, 814, 815, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 834, 835, 836, 839, 841, 844, 846, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887, 926, 930], "determin": [14, 69, 70, 114, 118, 122, 123, 124, 186, 195, 198, 200, 205, 210, 211, 212, 222, 223, 258, 259, 260, 270, 273, 279, 282, 283, 286, 287, 290, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 320, 323, 324, 327, 328, 331, 332, 335, 340, 343, 344, 347, 348, 351, 361, 364, 365, 368, 385, 388, 389, 392, 393, 396, 405, 408, 409, 412, 417, 420, 421, 424, 437, 440, 443, 446, 460, 463, 464, 467, 476, 479, 480, 483, 484, 487, 497, 501, 502, 506, 511, 512, 515, 519, 520, 550, 552, 556, 557, 558, 559, 560, 577, 584, 585, 601, 603, 623, 634, 636, 637, 639, 640, 642, 643, 645, 646, 648, 655, 657, 658, 661, 666, 668, 672, 674, 675, 677, 681, 682, 684, 694, 696, 697, 699, 700, 702, 782, 783, 784, 785, 826, 827, 828, 832, 834, 879, 880, 883, 884, 887], "exactli": [14, 16, 115, 122, 124, 888, 894], "common": [14, 20, 69, 70, 115, 118, 120, 122, 124, 145], "ground": [14, 117], "li": 14, "between": [14, 69, 70, 71, 72, 73, 115, 117, 118, 121, 122, 126, 127, 129, 130, 131, 133, 144, 167, 168, 186, 206, 273, 304, 307, 460, 463, 706, 707, 710, 712, 715, 717, 720, 722, 736, 739, 766, 769, 786, 792, 809, 811, 812, 826, 827, 828, 832, 834, 888, 926, 928], "find": [14, 18, 19, 69, 70, 128, 131, 826, 827, 828, 832, 834, 888], "exist": [14, 15, 18, 20, 21, 69, 70, 71, 72, 114, 115, 116, 117, 118, 119, 120, 125, 128, 145, 511, 532, 926, 930], "essenti": [14, 15, 20, 115, 118, 124], "order": [14, 18, 19, 21, 69, 70, 71, 72, 73, 114, 115, 119, 121, 122, 123, 124, 126, 130, 131, 133, 145, 273, 304, 307, 585, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615, 636, 649, 651, 662, 664, 685, 687, 688, 690, 700, 702, 722, 740, 743, 782, 783, 784, 821, 824, 826, 827, 828, 832, 834, 835, 836, 839, 841, 844, 932, 933], "design": [14, 15, 112, 125, 128, 130, 145], "univers": 14, "abstract": [14, 122, 132, 145, 223, 238, 926, 930], "In": [14, 16, 18, 19, 113, 114, 115, 118, 119, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 223, 262, 268, 269, 272, 273, 287, 290, 443, 446, 464, 467, 511, 517, 555, 722, 752, 755, 809, 815, 817, 888], "search": [14, 18, 24, 27, 28, 56, 69, 70, 101, 113, 115, 117, 822, 823, 824, 825], "languag": [14, 16, 128], "first": [14, 15, 18, 19, 21, 115, 118, 121, 122, 126, 128, 130, 131, 133, 164, 165, 167, 176, 177, 186, 213, 218, 223, 242, 254, 273, 287, 290, 312, 315, 320, 323, 324, 327, 328, 331, 332, 335, 353, 356, 373, 376, 381, 384, 397, 400, 401, 404, 421, 424, 425, 428, 433, 436, 437, 440, 443, 446, 452, 455, 460, 463, 492, 496, 511, 519, 585, 596, 636, 640, 642, 646, 648, 649, 651, 658, 661, 672, 674, 678, 680, 685, 687, 691, 693, 697, 699, 722, 728, 731, 756, 759, 766, 769, 770, 773, 782, 783, 784, 785, 786, 787, 796, 797, 809, 820, 821, 822, 823, 826, 827, 828, 832, 910, 921, 922, 923, 926, 930], "see": [14, 17, 18, 19, 20, 116, 118, 122, 124, 126, 130, 131, 144, 145, 167, 168, 173, 176, 177, 186, 194, 214, 273, 287, 290, 312, 315, 320, 323, 324, 327, 328, 331, 332, 335, 348, 351, 365, 368, 397, 400, 421, 424, 433, 436, 437, 440, 443, 446, 452, 455, 460, 463, 464, 467, 492, 496, 636, 666, 668, 675, 677, 682, 684, 697, 699, 700, 702, 821, 823, 826, 827, 828, 832, 834, 846, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887, 888], "clear": [14, 15, 16, 19, 20, 115, 117, 123, 124, 128, 130, 223, 241], "front": [14, 127, 128, 131, 888, 894], "runner": 14, "look": [14, 18, 19, 21, 113, 115, 118, 119, 122, 123, 124, 126, 128, 130, 132, 133, 888], "littl": [14, 130], "deeper": [14, 19, 112, 127, 223, 247, 251, 255, 786, 797, 798], "follow": [14, 15, 18, 19, 20, 21, 69, 70, 113, 114, 115, 117, 119, 121, 122, 123, 124, 125, 127, 128, 130, 131, 132, 133, 145, 186, 209, 223, 267, 273, 464, 467, 511, 553, 554, 555, 575, 576, 585, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615, 623, 634, 635, 636, 678, 680, 700, 702, 786, 792, 798, 826, 827, 828, 832, 834, 888, 910, 920, 926, 930], "same": [14, 16, 18, 19, 21, 24, 25, 26, 69, 70, 113, 115, 117, 118, 121, 122, 124, 125, 126, 128, 130, 132, 133, 167, 168, 171, 175, 178, 181, 182, 183, 185, 186, 192, 193, 194, 223, 232, 233, 267, 273, 274, 277, 287, 290, 316, 319, 336, 339, 369, 372, 443, 446, 464, 467, 468, 471, 472, 475, 507, 510, 511, 537, 539, 540, 543, 564, 567, 568, 585, 601, 603, 618, 623, 624, 625, 626, 627, 628, 629, 630, 635, 636, 637, 639, 640, 642, 643, 645, 646, 648, 649, 651, 652, 654, 655, 657, 669, 671, 675, 677, 678, 680, 682, 684, 685, 687, 694, 696, 697, 699, 722, 728, 731, 740, 743, 744, 747, 756, 759, 762, 765, 766, 769, 782, 783, 784, 786, 799, 826, 827, 828, 832, 834, 835, 836, 839, 841, 844, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 871, 874, 875, 878, 888, 910, 911, 912, 913, 914, 915, 916, 917], "core": [14, 18, 20, 124, 128, 133, 223, 259, 888], "principl": 14, "oper": [14, 18, 20, 69, 70, 71, 72, 114, 115, 118, 121, 122, 124, 125, 131, 132, 167, 176, 177, 186, 214, 273, 287, 290, 328, 331, 332, 335, 381, 384, 448, 451, 452, 455, 464, 467, 488, 491, 511, 521, 533, 534, 535, 577, 585, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615, 623, 624, 625, 626, 627, 628, 629, 630, 632], "expos": [14, 128, 132, 511, 527], "almost": [14, 19, 122, 129, 131], "ident": [14, 16, 69, 70, 118, 120, 122, 130, 131, 145, 223, 257, 786, 799, 888], "uniqu": [14, 118, 122, 145, 223, 232, 233, 782, 783, 784, 785, 786, 792, 826, 827, 828, 832, 833, 834], "syntax": [14, 15], "There": [14, 18, 19, 115, 118, 121, 122, 123, 128, 131, 145], "onli": [14, 17, 18, 19, 69, 70, 113, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 143, 145, 223, 263, 273, 429, 432, 433, 436, 636, 658, 661, 678, 680, 722, 740, 743, 786, 787, 788, 796, 797, 821, 822, 823, 846, 855, 858, 888, 926, 927, 928, 929, 930, 931], "so": [14, 15, 18, 19, 24, 27, 28, 31, 32, 35, 36, 37, 38, 39, 40, 49, 50, 57, 58, 69, 70, 76, 77, 80, 81, 82, 83, 84, 85, 94, 95, 98, 99, 102, 103, 113, 114, 115, 117, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 145, 146, 154, 195, 196, 197, 199, 274, 275, 276, 278, 287, 288, 289, 291, 336, 337, 338, 369, 370, 371, 497, 498, 499, 500, 502, 503, 504, 505, 512, 513, 514, 516, 540, 541, 542, 544, 587, 588, 589, 591, 723, 724, 725, 727, 756, 757, 758, 760, 786, 787, 797, 811, 813, 828, 829, 830, 831, 888], "wai": [14, 15, 18, 119, 125, 130, 131, 132, 133, 145], "manipul": [14, 50, 95, 113, 133, 144, 723, 726, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 748, 751, 752, 755, 756, 759, 761, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781], "unsurprisingli": [14, 115], "fundament": [14, 122, 128], "consist": [14, 69, 70, 121, 125, 223, 255, 636, 649, 651, 846, 847, 850, 922, 923], "each": [14, 15, 16, 19, 20, 69, 70, 71, 72, 73, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 127, 128, 130, 131, 133, 144, 145, 156, 159, 160, 162, 167, 178, 186, 193, 223, 232, 233, 244, 245, 246, 247, 248, 249, 250, 254, 267, 273, 274, 277, 279, 282, 283, 286, 287, 290, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 344, 347, 348, 351, 353, 356, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 443, 446, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 496, 497, 501, 502, 506, 507, 510, 511, 512, 515, 585, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615, 623, 624, 625, 626, 627, 628, 629, 630, 631, 636, 637, 639, 640, 642, 643, 645, 649, 651, 658, 661, 666, 668, 669, 671, 675, 677, 682, 684, 685, 687, 722, 732, 735, 748, 751, 756, 759, 761, 766, 769, 774, 777, 778, 781, 786, 792, 799, 809, 810, 821, 824, 826, 827, 828, 832, 846, 847, 850, 888, 894, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933], "veri": [14, 15, 18, 19, 113, 115, 117, 118, 122, 124, 125, 126, 129, 131, 132, 133, 145, 888], "similar": [14, 113, 122, 123, 124, 131, 145, 273, 464, 467, 623, 634, 910, 921], "convent": [14, 144, 636, 658, 661, 846, 847, 850], "those": [14, 18, 19, 20, 69, 70, 122, 128, 133, 167, 168, 585, 621, 636, 678, 680, 685, 687, 722, 723, 726], "introduc": [14, 122, 131, 722, 756, 759, 826, 827], "2006": 14, "layer": [14, 44, 89, 113, 114, 128, 129, 132, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 804, 805, 808, 888, 901, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 932, 933], "therefor": [14, 19, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 128, 130, 132, 145, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 195, 198, 273, 274, 277, 287, 290, 292, 295, 336, 339, 369, 372, 452, 455, 484, 487, 488, 491, 497, 501, 511, 539, 623, 626, 635, 722, 756, 759, 804, 805, 808, 826, 828, 832, 846, 851, 854, 879, 880, 883], "present": [14, 19, 69, 70, 116, 122, 123, 124, 125, 126, 128], "itself": [14, 18, 19, 122, 125, 126, 132, 144, 145, 511, 517, 786, 798], "cut": 14, "cloth": 14, "adher": [14, 15, 114, 116, 128, 133], "semant": [14, 128, 133, 273, 464, 467], "round": [14, 15, 16, 18, 19, 20, 21, 35, 36, 80, 81, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 273, 287, 290, 336, 339, 369, 372, 373, 376, 443, 446, 484, 487, 507, 510, 888], "up": [14, 15, 16, 17, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 144, 145], "hopefulli": [14, 15, 16, 18, 19, 20, 21, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144], "paint": [14, 128], "pictur": [14, 128], "how": [14, 16, 17, 18, 19, 20, 21, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 144, 145, 888, 894, 910, 921, 922, 923], "pleas": [14, 15, 16, 18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 888], "check": [14, 15, 16, 18, 19, 24, 25, 26, 27, 28, 69, 70, 122, 127, 128, 130, 131, 132, 133, 144, 186, 200, 207, 208, 210, 222, 223, 262, 272, 511, 521, 536, 550, 557, 558, 559, 560, 577, 584, 585, 601, 603, 636, 649, 651, 786, 787, 796, 797, 798, 888], "out": [14, 15, 16, 17, 18, 19, 20, 21, 35, 36, 37, 38, 45, 46, 47, 48, 49, 50, 51, 52, 59, 60, 61, 62, 63, 64, 69, 70, 71, 72, 80, 81, 82, 83, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 128, 130, 131, 132, 133, 144, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 192, 194, 223, 268, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 523, 524, 525, 526, 528, 529, 530, 533, 534, 535, 537, 539, 540, 541, 542, 543, 544, 551, 564, 567, 568, 585, 618, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 825, 826, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 910, 918], "discuss": [14, 15, 16, 17, 18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 888], "faq": [14, 15, 16, 128, 130, 131, 132, 133, 144], "reach": [14, 15, 16, 18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 223, 247, 251, 255, 786, 798], "discord": [14, 15, 16, 18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 888], "you": [14, 15, 16, 17, 18, 19, 20, 21, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 888, 894], "question": [14, 15, 16, 18, 19, 115, 117, 128, 130, 131, 132, 133, 144, 145, 888], "With": [15, 16, 18, 37, 38, 39, 40, 57, 58, 69, 70, 71, 72, 80, 81, 82, 83, 94, 95, 98, 99, 102, 103, 115, 117, 128, 156, 158, 159, 160, 161, 162, 163, 167, 178, 186, 195, 198, 223, 245, 261, 273, 274, 277, 278, 287, 290, 291, 292, 295, 312, 315, 332, 335, 336, 339, 344, 347, 369, 372, 381, 384, 441, 442, 448, 451, 452, 455, 468, 471, 484, 487, 488, 491, 497, 498, 501, 502, 503, 506, 511, 512, 513, 514, 515, 516, 520, 528, 529, 536, 539, 540, 543, 544, 574, 579, 580, 581, 585, 587, 588, 590, 623, 626, 629, 630, 635, 636, 637, 639, 640, 642, 643, 645, 646, 648, 662, 664, 691, 693, 706, 707, 710, 717, 720, 722, 723, 726, 727, 736, 739, 740, 743, 748, 751, 756, 759, 760, 761, 770, 773, 804, 805, 808, 809, 810, 811, 813, 814, 815, 817, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 839, 846, 847, 850, 879, 880, 883], "central": 15, "goal": [15, 20], "being": [15, 16, 18, 19, 69, 70, 115, 117, 120, 121, 122, 123, 124, 125, 126, 128, 131, 144, 145, 167, 168, 511, 566, 571, 826, 833, 888], "would": [15, 18, 19, 21, 112, 114, 115, 117, 119, 120, 121, 122, 125, 126, 127, 128, 130, 132, 133, 145, 156, 161, 223, 268, 888], "entir": [15, 16, 19, 69, 70, 115, 116, 117, 121, 122, 125, 130, 131, 132, 133, 145, 223, 267, 846, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887, 910, 919], "forgiven": 15, "rais": [15, 19, 69, 70, 125, 128, 130, 186, 194, 273, 361, 364, 460, 463, 511, 521, 546, 555, 569, 576, 582, 636, 658, 661, 665, 697, 699, 722, 762, 765, 766, 769, 821, 824, 846, 851, 854, 859, 862, 879, 880, 883, 884, 887, 922, 923, 926, 930], "an": [15, 16, 18, 19, 20, 21, 24, 27, 28, 65, 66, 69, 70, 110, 111, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 156, 159, 160, 162, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 195, 198, 206, 211, 212, 214, 223, 245, 249, 268, 273, 274, 277, 279, 282, 283, 286, 287, 290, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 344, 347, 348, 351, 353, 356, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 442, 443, 446, 448, 451, 452, 455, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 496, 497, 501, 502, 506, 507, 510, 511, 522, 523, 524, 526, 528, 537, 538, 539, 551, 555, 557, 558, 559, 560, 580, 581, 582, 585, 601, 603, 618, 620, 621, 623, 626, 635, 636, 637, 639, 640, 642, 643, 645, 646, 648, 649, 651, 652, 654, 655, 657, 658, 661, 665, 666, 668, 669, 671, 675, 677, 678, 680, 681, 682, 684, 685, 687, 694, 696, 697, 699, 700, 702, 722, 723, 726, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 752, 755, 756, 759, 761, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781, 786, 792, 804, 805, 808, 809, 811, 812, 820, 821, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 839, 841, 844, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887, 888, 899, 900, 922, 923, 926, 927, 928, 930], "eyebrow": 15, "somehow": 15, "pytorch": [15, 16, 20, 118, 123, 124, 125, 126, 128, 130, 133, 145, 585, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615, 888, 926, 927, 928, 929, 930, 931], "other": [15, 18, 19, 69, 70, 71, 72, 113, 114, 115, 117, 118, 121, 122, 125, 128, 130, 132, 133, 143, 144, 145, 164, 165, 167, 168, 273, 365, 368, 511, 512, 515, 517, 585, 596, 809, 815, 817, 826, 833, 846, 867, 870, 875, 878, 888], "strong": [15, 145], "industri": 15, "back": [15, 121, 127, 128, 130, 145, 888, 894, 922, 923, 926, 930], "momentum": 15, "won": [15, 16, 19, 133], "ad": [15, 18, 19, 20, 110, 111, 113, 114, 115, 117, 118, 120, 121, 122, 123, 125, 126, 128, 132, 145, 511, 575, 576, 636, 649, 651, 722, 736, 739, 932, 933], "just": [15, 16, 18, 19, 114, 115, 117, 118, 125, 128, 130, 131, 145, 846, 847, 850, 910, 919], "make": [15, 16, 18, 19, 20, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 128, 130, 131, 133, 223], "problem": [15, 19, 121, 130], "even": [15, 16, 18, 19, 114, 118, 123, 124, 126, 130, 131, 132, 133, 145, 273, 460, 463, 468, 471], "wors": 15, "rather": [15, 69, 70, 113, 114, 117, 122, 133, 145, 167, 168, 223, 267, 511, 557, 558, 560, 585, 601, 603], "funni": 15, "comic": 15, "strip": 15, "easi": [15, 18, 19, 118, 122], "feasibl": 15, "space": [15, 167, 168, 176, 177, 511, 538], "case": [15, 18, 19, 20, 24, 27, 28, 69, 70, 71, 72, 73, 113, 114, 115, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 132, 133, 145, 167, 178, 223, 262, 269, 272, 273, 274, 277, 279, 282, 283, 286, 287, 290, 292, 295, 296, 299, 300, 303, 304, 307, 332, 335, 336, 339, 340, 343, 344, 347, 361, 364, 365, 368, 369, 372, 405, 408, 409, 412, 417, 420, 421, 424, 443, 446, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 497, 501, 502, 506, 507, 510, 511, 555, 567, 568, 636, 662, 664, 722, 752, 755, 786, 789, 795, 846, 851, 854, 855, 858, 859, 862, 867, 870, 871, 874, 875, 878, 910, 921, 922, 923, 926, 930], "unlik": [15, 115, 122, 223], "charger": 15, "charact": 15, "encod": [15, 131, 511, 538], "instant": [15, 888], "messag": [15, 19, 128, 130, 935, 936], "much": [15, 19, 113, 121, 122, 125, 128, 130, 131], "doe": [15, 19, 21, 69, 70, 112, 113, 114, 115, 117, 118, 119, 123, 125, 126, 128, 130, 131, 145, 273, 332, 335, 511, 555, 722, 761], "mandat": [15, 117, 125], "adopt": [15, 19, 121], "continu": [15, 16, 116, 117, 145], "own": [15, 16, 18, 114, 128, 145], "signatur": [15, 113, 114, 115, 122, 123, 124, 125, 126, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 184, 185, 186, 195, 198, 273, 274, 277, 292, 295, 332, 335, 336, 339, 344, 347, 369, 372, 452, 455, 484, 487, 488, 491, 722, 736, 739, 756, 759, 826, 827, 828, 832, 835, 836, 839, 846, 851, 854], "replac": [15, 19, 21, 69, 70, 115, 117, 120, 122, 123, 124, 128, 130, 133, 145, 511, 567, 568, 722, 723, 726, 809, 810], "your": [15, 16, 17, 18, 20, 21, 113, 114, 131, 132, 145, 888], "10": [15, 18, 21, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 115, 122, 128, 130, 131, 167, 174, 177, 223, 273, 312, 315, 316, 319, 344, 347, 381, 384, 409, 412, 484, 487, 511, 529, 539, 566, 571, 585, 605, 606, 607, 608, 623, 629, 636, 643, 645, 646, 648, 672, 674, 691, 693, 722, 740, 743, 748, 751, 761, 804, 805, 808, 809, 810, 811, 812, 813, 821, 824, 826, 827, 846, 847, 850, 851, 854, 926, 928], "100": [15, 16, 98, 99, 131, 132, 133, 145, 273, 484, 487, 811, 813, 888], "despit": [15, 122, 124], "distinct": [15, 114, 122, 125, 127, 826, 827, 828, 832, 834, 888], "still": [15, 69, 70, 114, 117, 123, 130, 132, 145, 888], "believ": [15, 19], "share": [15, 69, 70, 115, 117, 118, 119, 122, 128, 186, 218], "bring": [15, 128, 129], "benefit": [15, 16, 18, 19, 121, 122, 125, 130, 131, 145], "unrel": [15, 19], "what": [15, 16, 19, 112, 114, 115, 120, 122, 126, 127, 128, 130, 131, 132, 133, 144, 145, 888], "again": [15, 16, 19, 113, 115, 122, 125, 131, 133, 145], "contrari": 15, "bumpi": 15, "road": 15, "allud": [15, 131], "most": [15, 18, 19, 69, 70, 113, 117, 118, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 145, 636, 649, 651], "technolog": 15, "sector": [15, 273, 283, 286, 296, 299, 308, 311], "full": [15, 16, 19, 71, 72, 114, 123, 126, 128, 145, 167, 186, 206, 273, 381, 384, 623, 629, 636, 678, 680, 682, 684, 685, 687, 804, 805, 808], "success": 15, "reason": [15, 19, 113, 115, 118, 121, 122, 123, 125, 128, 130, 273, 464, 467], "build": [15, 17, 18, 118, 127, 129, 132, 133, 145, 826, 827, 828, 832, 834, 888, 910, 921, 922, 923], "custom": [15, 132], "comput": [15, 16, 18, 69, 70, 118, 122, 128, 131, 145, 223, 267, 273, 287, 290, 312, 315, 324, 327, 332, 335, 353, 356, 357, 360, 377, 380, 381, 384, 397, 400, 401, 404, 425, 428, 429, 432, 433, 436, 437, 440, 443, 446, 448, 451, 452, 455, 511, 523, 524, 526, 529, 530, 585, 587, 590, 592, 594, 596, 597, 599, 605, 607, 609, 611, 613, 615, 618, 620, 623, 624, 625, 626, 627, 628, 629, 630, 632, 634, 636, 637, 639, 640, 642, 649, 651, 652, 654, 655, 657, 658, 661, 662, 664, 678, 680, 681, 682, 684, 685, 687, 697, 699, 700, 702, 706, 707, 710, 712, 715, 717, 720, 786, 792, 826, 827, 828, 832, 834, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878], "thank": [15, 131], "interoper": 15, "compon": [15, 128], "bio": [15, 18], "hardwar": [15, 18], "initi": [15, 19, 69, 70, 71, 72, 73, 119, 123, 124, 223, 623, 633, 903, 904, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 926, 930], "pcie": 15, "interfac": [15, 133, 145], "motherboard": 15, "raid": 15, "storag": [15, 131], "virtual": [15, 19, 21], "bluetooth": 15, "wireless": 15, "exchang": 15, "btx": 15, "form": [15, 17, 24, 25, 26, 27, 28, 69, 70, 118, 132, 133, 167, 169, 179, 182, 183, 511, 517, 585, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615, 623, 636, 637, 639, 643, 645, 646, 648, 649, 651, 652, 654, 655, 657, 666, 668, 669, 671, 675, 677, 678, 680, 682, 684, 685, 687, 688, 690, 694, 696, 786, 788, 798], "factor": [15, 223, 232, 265, 266, 267, 585, 587, 590, 592, 594, 605, 607, 609, 611, 623, 624, 625, 626, 627, 628, 629, 630, 636, 637, 639, 910, 911, 912, 913, 914, 915, 916, 917, 926, 927, 928, 929], "sata": 15, "connect": [15, 18, 132, 133, 910, 920, 921], "host": [15, 145], "bu": 15, "adapt": [15, 585, 609, 611, 926, 929], "devic": [15, 19, 34, 69, 70, 79, 98, 99, 112, 113, 118, 120, 123, 130, 131, 145, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 511, 539, 540, 543, 564, 567, 568, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 899, 900, 901, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 932, 933], "html": [15, 21, 114, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 184, 185, 186, 195, 198, 273, 274, 277, 292, 295, 332, 335, 336, 339, 344, 347, 369, 372, 452, 455, 484, 487, 488, 491, 722, 736, 739, 756, 759, 826, 827, 828, 832, 835, 836, 839, 846, 851, 854], "enabl": [15, 18, 19, 69, 70, 71, 72, 73, 117, 118, 121, 122, 125, 127, 128, 129, 131, 133, 145], "anyon": [15, 17, 145], "websit": 15, "tcp": 15, "ip": 15, "node": [15, 69, 70, 122, 786, 787, 796, 797], "commun": [15, 17, 19, 20, 145, 888, 894], "network": [15, 118, 122, 128, 132, 144, 623, 632, 888, 896, 910, 922, 923], "smtp": 15, "possibl": [15, 17, 18, 19, 20, 114, 115, 117, 122, 123, 125, 128, 131, 144, 145, 511, 561, 579, 846, 851, 854, 859, 862], "send": 15, "gmail": 15, "outlook": 15, "pop": 15, "email": 15, "ieee": [15, 166, 186, 206, 273, 287, 290, 365, 368, 443, 446, 464, 467, 484, 487], "754": [15, 166, 186, 206, 273, 287, 290, 365, 368, 443, 446, 464, 467, 484, 487], "allow": [15, 128, 145, 167, 176, 177, 511, 561, 922, 923], "calcul": [15, 69, 70, 71, 72, 73, 114, 273, 274, 277, 279, 282, 283, 286, 287, 290, 292, 295, 296, 299, 300, 303, 304, 307, 340, 343, 344, 347, 348, 351, 361, 364, 365, 368, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 443, 446, 460, 463, 476, 479, 480, 483, 484, 487, 492, 496, 497, 501, 502, 506, 706, 707, 710, 712, 715, 717, 720, 846, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878], "live": [15, 16], "depend": [15, 18, 19, 114, 120, 122, 123, 128, 145, 186, 192, 273, 274, 277, 279, 282, 283, 286, 292, 295, 296, 299, 300, 303, 304, 307, 340, 343, 344, 347, 361, 364, 365, 368, 405, 408, 409, 412, 413, 416, 417, 420, 460, 463, 476, 479, 480, 483, 497, 501, 502, 506, 636, 649, 651, 678, 680, 682, 684, 685, 687, 821, 825, 835, 836, 839, 841, 844], "did": [15, 20, 133], "aris": [15, 145], "until": [15, 19, 145, 888], "substanti": [15, 19, 117, 121], "innov": 15, "growth": 15, "usag": [15, 128, 223, 267], "relev": [15, 18, 20, 115, 122, 123, 131, 926, 927, 928, 929, 930, 931], "area": [15, 125, 143, 273, 283, 286, 296, 299, 308, 311, 888], "necess": 15, "parti": [15, 145], "could": [15, 16, 18, 19, 115, 117, 122, 123, 125, 128, 130, 131, 132, 826, 827, 828, 832, 834], "easili": [15, 19, 131, 132, 133, 145, 888], "engag": [15, 17, 18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "regard": [15, 122, 223], "effect": [15, 114, 121, 122, 126, 145, 167, 178, 585, 613, 615, 846, 867, 870, 875, 878], "2015": 15, "sinc": [15, 18, 19, 145], "alongsid": 15, "machin": [15, 18, 118, 144, 186, 206, 209, 273, 377, 380, 636, 666, 668, 675, 677], "givenframe": [15, 144], "less": [15, 19, 35, 36, 69, 70, 80, 81, 115, 122, 126, 127, 128, 273, 279, 282, 283, 286, 292, 295, 304, 307, 336, 339, 405, 408, 409, 412, 417, 420, 460, 463, 464, 467, 472, 475, 484, 487, 636, 666, 668, 675, 677, 700, 702, 809, 815, 817, 846, 875, 878], "matur": [15, 145], "state": [15, 114, 126, 127, 128, 129, 131, 144, 273, 443, 446, 623, 633, 888, 896, 897, 898, 899, 900, 901, 903, 904, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933], "than": [15, 19, 69, 70, 113, 115, 117, 122, 125, 128, 131, 132, 133, 145, 167, 168, 186, 206, 223, 267, 273, 279, 282, 283, 286, 292, 295, 304, 307, 320, 323, 328, 331, 336, 339, 369, 372, 373, 376, 405, 408, 409, 412, 417, 420, 441, 460, 463, 464, 467, 472, 475, 484, 487, 507, 510, 511, 557, 558, 560, 585, 601, 603, 636, 640, 642, 658, 661, 666, 668, 675, 677, 700, 702, 722, 723, 726, 740, 743, 762, 765, 809, 815, 817, 826, 827, 828, 832, 834, 846, 863, 866, 867, 870, 871, 874, 875, 878], "preced": [15, 132], "mention": [15, 18, 19, 115, 118, 125, 126], "aros": 15, "70": [15, 636, 672, 674, 846, 847, 850], "80": [15, 636, 672, 674, 846, 847, 850], "90": [15, 98, 99, 273, 332, 335, 468, 471, 636, 672, 674, 811, 813, 846, 847, 850], "effort": [15, 17, 145], "stage": [15, 17, 19, 21, 112, 888], "complet": [15, 19, 20, 69, 70, 121, 122, 130, 131, 636, 678, 680], "natur": [15, 115, 121, 122, 144, 273, 361, 364, 405, 408, 413, 416, 636, 681], "like": [15, 18, 19, 21, 112, 113, 114, 115, 117, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 585, 601, 603, 809, 815, 817, 888], "certainli": 15, "mission": [15, 888], "creat": [15, 17, 18, 19, 21, 69, 70, 123, 124, 125, 128, 129, 132, 143, 144, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 184, 185, 223, 232, 233, 511, 539, 540, 543, 564, 567, 568, 579, 585, 620, 809, 810, 811, 812, 815, 817, 888, 894, 899, 900, 901, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933], "At": [15, 20], "process": [15, 16, 17, 18, 19, 21, 118, 122, 128, 133, 223, 232, 233, 262, 272], "ourselv": 15, "lead": [15, 16, 69, 70, 71, 72, 73, 145, 636, 678, 680, 685, 687], "quansight": 15, "compani": 15, "made": [15, 19, 20, 122, 125, 128, 130], "organ": [15, 113, 118, 121, 122], "panda": 15, "scipi": 15, "conda": [15, 18, 21], "dask": [15, 826, 827, 828, 832, 834], "apach": 15, "onnx": 15, "scikit": 15, "jupyt": 15, "aw": 15, "cupi": 15, "net": [15, 16, 128, 133], "sympi": 15, "rai": [15, 273, 304, 307], "modin": 15, "spyder": 15, "includ": [15, 19, 20, 69, 70, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 144, 145, 167, 168, 169, 179, 511, 550, 584, 636, 700, 702, 786, 787, 809, 815, 817, 821, 823, 846, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887, 891, 893, 910, 920, 921, 924, 925], "member": [15, 19], "googl": [15, 888], "octoml": 15, "einop": [15, 69, 70, 511, 533, 534, 535], "further": [15, 16, 19, 21, 115, 121, 127, 131, 132, 888], "sponsor": 15, "lg": 15, "electron": 15, "microsoft": 15, "d": [15, 16, 17, 18, 98, 99, 112, 122, 131, 511, 520, 528, 623, 624, 625, 626, 627, 628, 629, 630, 636, 646, 648, 672, 674, 811, 813, 888, 894], "shaw": 15, "co": [15, 35, 36, 80, 81, 128, 144, 273, 511, 538, 888], "intel": 15, "togeth": [15, 69, 70, 121, 122, 132, 133, 145, 932, 933], "major": [15, 123, 124, 145, 821, 824], "involv": [15, 17, 21, 112, 123, 133, 186, 214, 273, 287, 290, 443, 446, 888, 894], "anoth": [15, 18, 19, 69, 70, 118, 122, 123, 130, 133, 167, 173, 186, 193, 195, 198], "promis": 15, "sign": [15, 18, 35, 36, 80, 81, 129, 133, 167, 168, 273, 274, 277, 287, 290, 304, 307, 328, 331, 443, 446, 464, 467, 636, 681, 826, 827, 828, 832, 834, 846, 863, 866, 871, 874], "pursuit": 15, "unif": [15, 17, 130, 888, 894], "clearli": [15, 20, 115], "lot": [15, 16, 120, 130, 145], "thought": [15, 18, 19, 126], "care": [15, 19, 133], "attent": [15, 19, 121, 122, 623, 634, 635, 910, 921], "gone": [15, 127], "simplifi": [15, 128, 129, 130, 132], "compat": [15, 126, 145, 186, 194, 273, 287, 290, 304, 307, 312, 315, 320, 323, 324, 327, 328, 331, 332, 335, 348, 351, 353, 356, 373, 376, 381, 384, 397, 400, 401, 404, 421, 424, 425, 428, 433, 436, 437, 440, 443, 446, 452, 455, 460, 463, 464, 467, 492, 496, 636, 666, 668, 675, 677, 682, 684, 691, 693, 697, 699, 700, 702, 722, 752, 755, 821, 823, 846, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887, 888], "excit": [15, 17, 112, 888], "complianc": 15, "hope": [15, 145], "due": [15, 18, 122, 125, 273, 443, 446], "suit": [15, 18, 112, 116, 117, 131, 144], "some": [15, 16, 18, 19, 20, 69, 70, 113, 114, 115, 118, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 144, 145, 273, 365, 368, 585, 587, 590, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615, 621, 623, 631, 888, 910, 918], "motiv": [15, 130], "great": [15, 16, 117, 128, 130], "convinc": 15, "celebr": 15, "encourag": [15, 144, 145, 888, 894], "foundat": 15, "point": [16, 19, 114, 115, 121, 125, 126, 128, 130, 131, 144, 166, 167, 168, 170, 172, 174, 180, 184, 186, 192, 206, 211, 214, 273, 279, 282, 283, 286, 287, 290, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 332, 335, 336, 339, 340, 343, 344, 347, 348, 351, 361, 364, 365, 368, 369, 372, 405, 408, 409, 412, 417, 420, 421, 424, 443, 446, 460, 463, 464, 467, 468, 471, 476, 479, 480, 483, 484, 487, 497, 501, 502, 506, 507, 510, 636, 637, 639, 643, 645, 649, 651, 652, 654, 655, 657, 666, 668, 675, 677, 678, 680, 682, 684, 685, 687, 700, 702, 826, 827, 828, 832, 834, 846, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878], "mai": [16, 18, 19, 122, 130, 132, 167, 168, 173, 223, 268, 273, 353, 356, 381, 384, 401, 404, 429, 432, 433, 436, 511, 532, 826, 827, 828, 832, 834, 835, 836, 839, 841, 844, 846, 851, 854, 855, 858, 859, 862], "ask": [16, 128, 130, 145, 888], "perfectli": 16, "happi": [16, 18, 145], "abund": 16, "better": [16, 112, 127, 130, 131, 132], "ll": [16, 17, 19, 115, 122, 125, 131], "give": [16, 18, 19, 112, 114, 115, 119, 126, 130, 722, 752, 755], "two": [16, 71, 72, 114, 115, 117, 121, 122, 127, 131, 133, 167, 168, 172, 178, 182, 183, 186, 213, 218, 273, 328, 331, 468, 471, 511, 519, 636, 637, 639, 643, 645, 646, 648, 649, 651, 652, 654, 655, 657, 658, 661, 662, 664, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 681, 682, 684, 685, 687, 688, 690, 694, 696, 697, 699, 722, 770, 773, 826, 827, 828, 832, 833, 834, 888], "streamlin": 16, "workflow": [16, 19, 131, 143, 888], "save": [16, 69, 70, 145, 511, 572, 922, 923], "week": [16, 19, 20, 888], "let": [16, 114, 115, 122, 123, 124, 128, 130, 131, 132, 133, 846, 855, 858, 867, 870, 871, 874, 875, 878, 888], "sai": [16, 18, 120, 130], "deepmind": 16, "releas": [16, 18, 20, 888], "awesom": 16, "paper": 16, "love": 16, "choic": [16, 18, 125, 131, 846, 867, 870, 875, 878], "perceiverio": 16, "happen": [16, 18, 19, 131], "slew": 16, "rush": 16, "f": [16, 21, 112, 122, 128, 131, 133, 273, 377, 380, 511, 552, 556], "g": [16, 112, 122, 145, 186, 191, 214, 223, 239, 809, 814, 815, 817, 826, 827, 828, 832, 834, 846, 851, 854, 859, 862, 863, 866, 871, 874], "inevit": 16, "deviat": [16, 804, 805, 808, 809, 814, 846, 867, 870, 924, 925], "origin": [16, 69, 70, 71, 72, 73, 119, 120, 123, 128, 130, 273, 304, 307, 636, 662, 664, 722, 752, 755, 756, 759], "often": [16, 118, 145], "erron": 16, "train": [16, 118, 122, 124, 131, 132, 133, 143, 144, 145, 585, 587, 590, 592, 594, 605, 607, 888], "poor": 16, "converg": 16, "perform": [16, 69, 70, 113, 115, 117, 118, 119, 121, 122, 124, 125, 126, 128, 131, 145, 156, 161, 167, 176, 177, 223, 511, 529, 533, 534, 535, 553, 554, 555, 585, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615, 623, 631, 633, 636, 685, 687, 782, 783, 784, 785, 786, 793, 794, 879, 880, 883, 884, 887], "issu": [16, 17, 20, 128, 130, 132, 145], "etc": [16, 18, 19, 20, 65, 66, 69, 70, 110, 111, 113, 115, 117, 121, 122, 123, 126, 128, 130, 131, 145, 167, 176, 177, 511, 539, 540, 543, 564, 567, 568, 809, 810, 811, 812, 815, 817, 826, 827, 828, 832, 834, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 932, 933], "publish": [16, 145], "manag": [16, 17, 125, 145, 223], "get": [16, 17, 18, 20, 69, 70, 112, 118, 123, 124, 125, 128, 129, 130, 131, 132, 186, 204, 205, 206, 209, 223, 232, 233, 242, 243, 256, 257, 262, 266, 269, 272, 511, 518, 545, 546, 547, 566, 888, 894, 910, 919], "work": [16, 18, 19, 20, 112, 117, 122, 123, 124, 127, 128, 129, 130, 132, 133, 888, 894], "repositori": [16, 18, 19, 21, 116], "pull": [16, 17, 18, 21, 113, 145], "request": [16, 17, 113, 223, 259], "confus": [16, 125], "do": [16, 18, 19, 20, 69, 70, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 273, 464, 467, 511, 555, 585, 601, 603, 621, 786, 787, 796, 797, 798], "don": [16, 18, 19, 20, 65, 66, 110, 111, 123, 132, 145], "expect": [16, 145, 511, 518, 888], "codebas": [16, 17, 112, 113, 125, 127, 223, 265, 266, 888], "total": [16, 17, 19, 69, 70, 71, 72, 73, 115, 117, 124, 131, 132, 145, 223, 269, 821, 824, 846, 867, 870, 875, 878], "hour": 16, "spent": 16, "spin": 16, "off": [16, 127, 636, 646, 648, 694, 696], "test": [16, 18, 20, 112, 115, 145, 186, 211, 212, 273, 385, 388, 389, 392, 393, 396, 879, 880, 883, 884, 887], "error": [16, 18, 69, 70, 117, 121, 124, 126, 130, 145, 156, 157, 223, 273, 357, 360, 846, 851, 854, 859, 862, 922, 923, 926, 930], "iter": [16, 24, 25, 26, 27, 28, 65, 66, 69, 70, 71, 72, 73, 110, 111, 122, 128, 131, 164, 165, 223, 245, 246, 248, 249, 250, 251, 254, 267, 511, 512, 515, 568, 573, 722, 732, 735, 748, 751, 761, 774, 777, 778, 781, 786, 787, 788, 792, 796, 797, 798], "address": [16, 19, 20, 121, 128], "sake": 16, "singl": [16, 19, 69, 70, 113, 115, 117, 118, 120, 122, 125, 126, 128, 131, 132, 133, 145, 223, 232, 233, 252, 253, 254, 255, 511, 581, 584, 809, 814, 815, 817, 826, 827], "multipl": [16, 19, 69, 70, 80, 81, 82, 83, 94, 95, 98, 99, 115, 118, 122, 145, 273, 287, 291, 443, 446, 511, 512, 514, 515, 516, 540, 544, 561, 636, 655, 657, 722, 723, 726, 727, 756, 759, 760, 761, 804, 805, 808, 811, 813, 821, 822, 823, 846, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887, 910, 920], "line": [16, 18, 115, 121, 129, 130, 131, 132, 143, 888, 894], "convert": [16, 24, 25, 26, 27, 28, 69, 70, 121, 128, 145, 146, 154, 167, 169, 179, 186, 190, 191, 223, 239, 240, 241, 242, 262, 269, 272, 511, 574, 580, 581, 636, 703, 705, 786, 788, 798, 799, 900], "directli": [16, 19, 113, 114, 118, 121, 122, 123, 124, 125, 126, 128, 130, 132, 133, 144, 145, 786, 798], "graph": [16, 118, 122, 129, 145, 585, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615, 826, 827, 828, 832, 834, 922, 923], "guarante": [16, 121, 145, 826, 827], "turn": [16, 115, 122], "4": [16, 21, 35, 36, 49, 50, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 115, 119, 122, 128, 130, 131, 132, 133, 156, 158, 159, 161, 167, 175, 178, 181, 185, 186, 195, 197, 198, 199, 223, 245, 261, 273, 274, 276, 277, 278, 287, 288, 289, 290, 291, 292, 295, 304, 307, 312, 315, 332, 335, 336, 338, 339, 344, 347, 369, 371, 372, 381, 384, 441, 442, 448, 451, 452, 455, 468, 471, 484, 487, 488, 491, 497, 498, 500, 501, 502, 503, 505, 506, 511, 520, 529, 538, 539, 540, 542, 543, 544, 574, 579, 585, 587, 589, 590, 591, 623, 626, 627, 628, 630, 633, 635, 636, 640, 642, 643, 645, 646, 648, 655, 657, 666, 668, 672, 674, 691, 693, 694, 696, 706, 717, 720, 722, 723, 724, 725, 726, 727, 728, 731, 736, 739, 740, 743, 748, 751, 752, 755, 756, 758, 759, 760, 761, 770, 773, 804, 805, 808, 809, 810, 811, 813, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 835, 836, 839, 846, 847, 850, 851, 854, 879, 880, 883, 888, 926, 927, 928, 929, 931], "step": [16, 18, 19, 21, 39, 40, 69, 70, 84, 85, 115, 119, 121, 122, 123, 124, 128, 131, 132, 133, 144, 167, 168, 176, 177, 223, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 599, 605, 606, 607, 608, 609, 611, 613, 615, 782, 783, 784, 785, 888, 926, 927, 928, 929, 930, 931], "take": [16, 17, 18, 19, 114, 115, 117, 122, 123, 124, 128, 130, 132, 133, 145, 273, 332, 335, 888, 894], "few": [16, 19, 20, 118, 122, 123, 124, 125, 129, 130, 131, 132, 143, 888, 894], "second": [16, 18, 115, 125, 130, 186, 213, 218, 223, 254, 273, 287, 290, 312, 315, 320, 323, 324, 327, 328, 331, 332, 335, 353, 356, 373, 376, 381, 384, 397, 400, 401, 404, 421, 424, 425, 428, 433, 436, 437, 440, 443, 446, 452, 455, 460, 463, 492, 496, 511, 519, 566, 571, 585, 587, 590, 592, 594, 605, 607, 636, 640, 642, 646, 648, 649, 651, 658, 661, 672, 674, 678, 680, 685, 687, 691, 693, 697, 699, 722, 766, 769, 770, 773, 782, 784, 826, 827, 828, 832, 926, 927, 928], "automat": [16, 18, 19, 118, 122, 126, 127, 128, 129, 132, 133, 888], "convers": [16, 25, 26, 27, 28, 69, 70, 127, 129, 133, 144, 145, 888, 894], "everyon": [16, 17, 19, 145], "regardless": [16, 17, 69, 70, 130, 133, 164, 165], "wouldn": 16, "nice": [16, 117], "write": [16, 19, 20, 21, 69, 70, 112, 113, 114, 115, 117, 118, 119, 125, 128, 130, 133, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 192, 194, 223, 268, 273, 274, 277, 279, 282, 283, 286, 287, 290, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 344, 347, 348, 351, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 442, 443, 446, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 496, 497, 501, 502, 506, 507, 510, 511, 523, 524, 526, 529, 530, 533, 534, 535, 537, 539, 540, 543, 551, 564, 567, 568, 585, 618, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 639, 640, 642, 643, 645, 646, 648, 652, 654, 655, 657, 658, 661, 662, 664, 666, 668, 669, 671, 672, 674, 675, 677, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 699, 700, 702, 703, 705, 706, 707, 710, 712, 715, 717, 720, 722, 723, 726, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 748, 751, 752, 755, 756, 759, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781, 804, 805, 808, 809, 810, 811, 812, 814, 815, 817, 820, 821, 825, 826, 834, 835, 836, 839, 841, 844, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887], "onc": [16, 18, 19, 122, 123, 124, 128, 131, 145, 223, 267, 636, 655, 657, 685, 687, 809, 810], "know": [16, 19, 826, 827, 828, 832, 834], "among": [16, 69, 70, 117], "frantic": 16, "port": 16, "lucid": 16, "honk": 16, "improv": [16, 19, 118, 128], "understand": [16, 18, 19, 20, 21, 112, 114, 115, 116, 126, 127], "pattern": [16, 69, 70, 114, 123, 511, 533, 534, 535], "hasn": 16, "chang": [16, 18, 19, 20, 21, 31, 32, 35, 36, 37, 38, 39, 40, 49, 50, 57, 58, 76, 77, 80, 81, 82, 83, 84, 85, 94, 95, 98, 99, 102, 103, 114, 116, 117, 122, 128, 132, 145, 195, 196, 197, 199, 223, 274, 275, 276, 278, 287, 288, 289, 291, 336, 337, 338, 369, 370, 371, 497, 498, 499, 500, 502, 503, 504, 505, 512, 513, 514, 516, 540, 541, 542, 544, 587, 588, 589, 591, 636, 640, 642, 722, 723, 724, 725, 727, 752, 755, 756, 757, 758, 760, 786, 788, 798, 811, 813, 828, 829, 830, 831, 888, 894], "now": [16, 18, 21, 69, 70, 113, 120, 122, 123, 126, 130, 131, 133, 144, 145, 910, 921, 922, 923], "spend": 16, "torchvis": 16, "probabl": [16, 623, 631, 809, 810, 910, 918], "sonnet": 16, "about": [16, 18, 19, 116, 127, 128, 132, 133, 145, 186, 206, 209], "next": [16, 18, 19, 20, 21, 114, 115, 119, 120, 130, 131, 186, 206, 888, 922, 923, 926, 927, 928, 929, 930, 931], "everyth": [16, 19, 20, 129, 145], "zero": [16, 69, 70, 71, 72, 115, 121, 122, 123, 124, 126, 128, 131, 132, 156, 158, 159, 167, 170, 172, 178, 182, 183, 185, 186, 192, 273, 287, 290, 292, 295, 320, 323, 344, 347, 365, 368, 369, 372, 429, 432, 433, 436, 441, 442, 443, 446, 448, 451, 452, 455, 460, 463, 464, 467, 468, 471, 484, 487, 488, 491, 497, 501, 502, 506, 511, 529, 564, 567, 568, 585, 587, 590, 592, 594, 605, 607, 609, 611, 623, 631, 636, 643, 645, 658, 661, 666, 668, 675, 677, 697, 699, 700, 702, 722, 736, 739, 740, 743, 748, 751, 756, 759, 778, 781, 804, 805, 808, 809, 811, 812, 821, 822, 823, 824, 826, 827, 828, 832, 834, 846, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887, 888, 901, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 926, 927, 928, 929], "need": [16, 18, 19, 20, 21, 113, 114, 115, 116, 118, 121, 122, 125, 128, 130, 131, 144, 145, 511, 523, 524, 526, 722, 723, 726, 736, 739], "said": 16, "high": [16, 20, 69, 70, 98, 99, 131, 809, 811, 812, 813, 815, 816, 817, 818], "level": [16, 17, 20, 118, 127, 128, 131, 132, 133, 145], "optim": [16, 125, 129, 131, 133, 144, 223, 585, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615, 782, 783, 784, 785, 888, 927, 928, 929, 931], "trainer": [16, 143, 145, 888], "statu": 16, "quo": 16, "kera": 16, "dopamin": 16, "ignit": 16, "catalyst": 16, "lightn": 16, "fastai": 16, "haiku": [16, 133], "flax": [16, 133, 145], "trax": [16, 133], "objax": [16, 133], "idea": [16, 144], "fulli": [16, 121, 122, 126, 128, 129, 130, 131, 132, 133, 145, 910, 920, 921], "offer": [16, 132], "strongli": [17, 18, 888, 894], "welcom": [17, 18, 19, 888, 894], "absolut": [17, 69, 70, 273, 274, 277, 636, 681], "skill": 17, "whether": [17, 18, 24, 25, 26, 27, 28, 69, 70, 71, 72, 73, 110, 111, 123, 125, 126, 156, 157, 164, 165, 186, 192, 204, 210, 211, 212, 222, 223, 242, 243, 254, 258, 259, 262, 263, 267, 270, 272, 273, 393, 396, 511, 512, 515, 519, 520, 529, 532, 536, 538, 548, 550, 552, 555, 556, 557, 558, 559, 560, 561, 573, 577, 583, 584, 585, 592, 594, 596, 597, 599, 601, 603, 605, 607, 609, 611, 613, 615, 618, 623, 631, 636, 649, 651, 782, 783, 784, 785, 786, 787, 788, 792, 796, 797, 798, 799, 809, 810, 879, 880, 883, 884, 887, 899, 900, 910, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931], "vetern": 17, "beginn": 17, "start": [17, 18, 19, 20, 21, 69, 70, 112, 114, 115, 123, 127, 128, 130, 131, 132, 144, 145, 167, 168, 176, 177, 223, 238], "aspect": [17, 131, 888], "guid": [17, 18, 19, 117, 888], "through": [17, 19, 20, 112, 115, 118, 119, 122, 127, 128, 130, 131, 132, 133, 144, 273, 304, 307], "journei": [17, 888, 894], "inclusvi": 17, "big": [17, 145], "team": [17, 18, 19], "board": 17, "contributor": [17, 18, 19, 127, 888], "split": [17, 19, 69, 70, 127, 128, 145, 223, 232, 248, 249, 250, 251, 265, 266, 267, 511, 561, 722, 888], "section": [17, 19, 20, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 132, 826, 827, 828, 832, 834], "below": [17, 18, 20, 21, 112, 113, 115, 118, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 144, 167, 182, 183, 273, 312, 315, 332, 335, 344, 347, 468, 471, 502, 506, 636, 643, 645, 646, 648, 694, 696, 722, 736, 739, 740, 743, 826, 827, 835, 836, 839, 888], "best": [17, 18, 19, 20, 21, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 511, 561], "go": [17, 18, 19, 20, 112, 113, 115, 122, 127, 131, 145, 786, 797], "finish": [17, 18, 112, 888], "dive": [17, 19, 20, 127, 130, 131, 145, 888], "right": [17, 18, 19, 69, 70, 112, 115, 131, 273, 320, 323, 328, 331, 636, 685, 687], "environ": [17, 19, 21, 144], "basic": [17, 20, 21], "fork": [17, 18, 511, 562], "doc": [17, 20, 114, 126, 128, 131, 132, 888], "document": [17, 19, 129, 131, 133], "local": [17, 18, 21, 118], "task": [17, 19, 144, 782, 783, 784, 785, 888], "help": [17, 18, 115, 119, 121, 122, 130, 131, 132, 143, 511, 517, 846, 871, 874, 888], "video": [17, 19, 114, 115, 126], "realli": [18, 122, 145], "contribut": [18, 19, 20, 128, 894], "toward": [18, 128, 722, 756, 759, 888, 894], "page": [18, 19, 129, 133, 143, 888, 894], "explain": [18, 19, 20, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 888, 894], "main": [18, 21, 120, 122, 167, 172, 182, 183, 636, 646, 648, 694, 696], "prefer": [18, 122], "mode": [18, 45, 46, 69, 70, 115, 122, 145, 164, 165, 223, 252, 253, 254, 255, 267, 273, 287, 290, 443, 446, 636, 678, 679, 680], "git": [18, 19], "recurs": [18, 21, 24, 25, 26, 27, 28, 69, 70, 118, 122, 132, 145, 786, 787, 788, 796, 797, 798], "submodul": [18, 19, 20, 21, 116, 117, 118, 124, 127, 128, 132, 888, 924, 925, 932, 933], "com": 18, "unifyai": [18, 21], "http": [18, 114, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 184, 185, 186, 195, 198, 273, 274, 277, 292, 295, 332, 335, 336, 339, 344, 347, 369, 372, 452, 455, 484, 487, 488, 491, 585, 587, 590, 592, 594, 722, 736, 739, 756, 759, 826, 827, 828, 832, 835, 836, 839, 846, 851, 854], "gh": 18, "your_fold": 18, "id": [18, 121, 122, 223, 242, 922, 923], "cours": [18, 19, 115, 131, 145], "whatev": [18, 145], "integr": [18, 117, 186, 192], "familiar": [18, 20], "decid": [18, 69, 70, 786, 797], "sure": [18, 20, 116], "elig": 18, "free": [18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 144, 888], "student": 18, "licenc": 18, "peopl": [18, 19, 112], "seem": [18, 132, 145], "miss": [18, 115, 117, 121, 122, 926, 930], "add": [18, 19, 20, 35, 36, 65, 66, 69, 70, 71, 72, 80, 81, 82, 83, 110, 111, 112, 113, 114, 118, 119, 121, 122, 126, 128, 130, 145, 273, 274, 277, 291, 512, 516, 804, 805, 808, 888, 894, 924, 925], "explicit": [18, 21, 122, 123, 125, 128, 145], "remind": 18, "channel": [18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 511, 538, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920], "pace": 18, "updat": [18, 19, 20, 21, 69, 70, 112, 115, 116, 120, 121, 122, 123, 126, 128, 130, 131, 133, 145, 223, 232, 511, 555, 567, 568, 585, 587, 590, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615, 623, 633, 782, 783, 784, 786, 793, 794, 802, 803, 899, 900, 926, 927, 928, 929, 930, 931], "suggest": [18, 19, 113], "latest": [18, 20, 21, 114, 145, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 184, 185, 186, 195, 198, 273, 274, 277, 292, 295, 332, 335, 336, 339, 344, 347, 369, 372, 452, 455, 484, 487, 488, 491, 722, 736, 739, 756, 759, 826, 827, 828, 832, 835, 836, 839, 846, 851, 854, 910, 919], "packag": [18, 21, 145], "ensur": [18, 19, 117, 121, 123, 126, 511, 555], "align": [18, 69, 70, 128, 130, 888, 894], "accord": [18, 21, 69, 70, 118, 123, 186, 195, 198, 206, 273, 287, 290, 328, 331, 443, 446, 511, 539, 567, 568, 636, 697, 699, 722, 732, 735, 778, 781, 846, 867, 870, 875, 878], "stabl": [18, 59, 60, 104, 105, 128, 145, 511, 546, 547, 569, 570, 575, 576, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845], "pypi": [18, 20, 145], "mayb": [18, 24, 27, 28, 128, 130], "person": [18, 19], "experi": [18, 129, 131, 145], "avoid": [18, 19, 117, 119, 120, 122, 130, 223, 273, 365, 368], "pip": [18, 144, 888], "instal": [18, 21, 144, 888], "abil": [18, 129, 145], "certain": [18, 69, 70, 145, 167, 168, 176, 177], "perhap": [18, 130, 131, 132, 145], "keep": [18, 19, 69, 70, 116, 122, 129, 131, 133, 511, 583], "track": [18, 19, 223, 786, 798, 922, 923], "termin": [18, 19, 21, 69, 70, 71, 72, 73, 122, 128, 131], "run": [18, 21, 116, 117, 119, 126, 128, 129, 130, 131, 132, 133, 144, 145, 223, 232, 585, 587, 590, 592, 594, 605, 607, 782, 783, 784, 785, 910, 921, 922, 923], "command": [18, 21, 888], "ivy_dev": [18, 19, 21], "name": [18, 19, 21, 114, 117, 128, 130, 131, 133, 164, 165, 511, 517, 636, 649, 651, 678, 680, 685, 687, 826, 827, 828, 832], "3": [18, 21, 31, 32, 35, 36, 37, 38, 39, 40, 49, 50, 71, 72, 76, 77, 80, 81, 82, 83, 84, 85, 94, 95, 98, 99, 102, 103, 115, 119, 122, 128, 130, 131, 132, 133, 156, 158, 159, 160, 161, 166, 167, 175, 178, 181, 184, 185, 186, 195, 196, 197, 198, 199, 223, 242, 245, 261, 268, 273, 274, 276, 277, 278, 287, 288, 289, 290, 291, 292, 295, 312, 315, 328, 331, 332, 335, 336, 338, 339, 344, 347, 361, 364, 369, 370, 371, 372, 377, 380, 381, 384, 397, 400, 441, 442, 448, 451, 452, 455, 468, 471, 484, 487, 488, 491, 497, 498, 500, 501, 502, 503, 505, 506, 511, 512, 513, 514, 519, 520, 529, 536, 539, 540, 541, 542, 543, 544, 573, 574, 579, 581, 585, 587, 588, 589, 590, 591, 623, 624, 625, 626, 628, 629, 630, 635, 636, 637, 639, 640, 642, 643, 645, 646, 648, 655, 657, 666, 668, 672, 674, 685, 687, 691, 693, 694, 696, 703, 705, 706, 707, 710, 717, 720, 722, 723, 724, 725, 726, 727, 728, 731, 736, 739, 740, 743, 748, 751, 752, 755, 756, 758, 759, 760, 761, 762, 765, 770, 773, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 835, 836, 839, 846, 847, 850, 851, 854, 871, 874, 879, 880, 883, 888], "8": [18, 21, 49, 50, 71, 72, 80, 81, 98, 99, 115, 122, 127, 131, 156, 160, 223, 245, 273, 287, 290, 291, 312, 315, 336, 339, 344, 347, 381, 384, 441, 442, 468, 471, 484, 487, 488, 491, 502, 506, 511, 520, 539, 585, 587, 590, 623, 630, 636, 640, 642, 643, 645, 646, 648, 672, 674, 691, 693, 706, 707, 710, 722, 723, 724, 726, 740, 743, 748, 751, 761, 809, 810, 811, 812, 813, 821, 825, 826, 827, 846, 847, 850, 888, 910, 921], "activ": [18, 19, 21, 23, 65, 66, 68, 110, 111, 113, 132, 157, 158, 159, 160, 161, 162, 163, 888, 897, 898], "setup": 18, "click": [18, 19, 114, 888], "icon": [18, 19], "side": [18, 19], "choos": [18, 19, 133, 223, 268, 273, 429, 432, 433, 436, 821, 825, 826, 827, 828, 832, 834, 846, 851, 854, 855, 858, 859, 862], "left": [18, 19, 69, 70, 115, 123, 273, 320, 323, 636, 649, 651, 662, 664, 685, 687, 821, 822, 888], "panel": 18, "select": [18, 19, 117, 128, 130, 133, 145], "drop": [18, 145], "down": [18, 130], "path": [18, 21], "manual": [18, 19, 117, 132, 786, 787, 796, 797], "builtin": [18, 21, 130, 132], "requir": [18, 21, 113, 114, 115, 117, 120, 121, 123, 124, 126, 130, 145, 164, 165, 273, 484, 487, 636, 649, 651, 722, 766, 769, 899, 900], "cmd": [18, 21], "directori": [18, 19, 21, 511, 572], "folder": [18, 19, 21, 113, 116, 117, 118], "file": [18, 19, 21, 69, 70, 113, 114, 118, 119, 121, 122, 128, 131, 511, 572, 922, 923], "abov": [18, 19, 21, 114, 115, 118, 119, 121, 122, 125, 126, 130, 131, 132, 133, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 195, 198, 273, 274, 277, 287, 290, 292, 295, 312, 315, 332, 335, 336, 339, 344, 347, 369, 372, 443, 446, 452, 455, 468, 471, 484, 487, 488, 491, 497, 501, 502, 506, 511, 539, 623, 626, 635, 636, 643, 645, 646, 648, 649, 651, 694, 696, 722, 736, 739, 740, 743, 756, 759, 804, 805, 808, 809, 811, 812, 826, 827, 828, 832, 835, 836, 839, 846, 851, 854, 863, 866, 867, 870, 871, 874, 879, 880, 883], "m": [18, 19, 21, 112, 128, 167, 178, 182, 183, 511, 520, 636, 637, 639, 643, 645, 646, 648, 649, 651, 652, 654, 655, 657, 658, 661, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 682, 684, 685, 687, 688, 690, 694, 696, 809, 814, 815, 817], "python3": [18, 21], "script": [18, 19, 21, 115, 128, 145], "bat": [18, 19, 21], "OR": [18, 19, 21, 273, 324, 327, 433, 436, 879, 884, 887], "bin": [18, 19, 21], "mac": [18, 19, 21], "linux": [18, 19, 21], "virtualenv": 18, "found": [18, 19, 69, 70, 71, 72, 73, 114, 121, 122, 223, 257], "os": 18, "note": [18, 19, 113, 114, 115, 122, 273, 464, 467, 636, 649, 651, 685, 687, 722, 766, 769, 826, 828, 832, 846, 855, 858], "tick": [18, 19], "abl": [18, 19, 69, 70, 118, 123, 125, 130, 133], "To": [18, 115, 118, 122, 131, 132, 133, 888], "ivy_test": [18, 19], "test_array_api": [18, 19, 116, 117], "cd": [18, 19, 21], "r": [18, 69, 70, 511, 520, 583, 636, 678, 680, 703, 705], "txt": 18, "visual": [18, 145], "jetbrain": 18, "remot": 18, "mitig": 18, "potenti": [18, 127, 273, 365, 368], "conflict": [18, 19, 131], "addit": [18, 19, 69, 70, 113, 114, 117, 122, 123, 130, 131, 133, 223, 268, 273, 287, 290, 511, 533, 534, 535, 804, 805, 808, 910, 920], "yet": [18, 20, 122], "particular": [18, 19, 113, 125, 273, 274, 277], "system": [18, 145, 636, 682, 684], "instruct": [18, 20], "desktop": 18, "wsl": 18, "powershel": 18, "admin": 18, "visit": 18, "link": 18, "imag": [18, 21, 42, 87, 113, 128, 129, 131, 133, 144, 623, 624, 625, 626, 627, 629, 630, 888], "profession": 18, "execut": [18, 21, 122, 125, 128, 130, 133, 145, 511, 582], "deploy": 18, "top": [18, 19, 117, 131, 132, 888], "press": [18, 131, 888], "ok": 18, "correctli": [18, 69, 70, 117, 122, 123, 126, 132, 145, 636, 662, 664, 821, 822], "caus": [18, 19, 115, 117, 122, 125, 145], "earlier": [18, 19], "might": [18, 19, 113, 117, 120, 128, 130, 131, 511, 532], "necessari": [18, 115, 119, 122, 125], "virtualis": 18, "detail": [18, 19, 20, 113, 116, 117, 118, 119, 120, 122, 126, 131, 132, 167, 173, 826, 827, 828, 832, 834], "sudo": 18, "apt": 18, "ca": 18, "certif": 18, "curl": 18, "gnupg": 18, "lsb": 18, "mkdir": 18, "p": [18, 19, 69, 70, 82, 83, 167, 178, 511, 523, 524, 525, 526, 623, 631, 636, 662, 664, 700, 702, 910, 918], "keyr": 18, "fssl": 18, "download": [18, 117], "gpg": 18, "dearmor": 18, "o": [18, 128, 511, 520], "echo": 18, "deb": 18, "arch": 18, "dpkg": 18, "architectur": [18, 133, 145], "lsb_releas": 18, "cs": 18, "tee": 18, "list": [18, 20, 21, 24, 25, 26, 27, 28, 65, 66, 69, 70, 84, 85, 102, 103, 110, 111, 113, 115, 123, 124, 126, 128, 131, 132, 133, 145, 167, 168, 169, 170, 178, 179, 180, 184, 186, 193, 223, 232, 233, 242, 244, 245, 248, 249, 252, 253, 267, 511, 520, 574, 579, 583, 587, 589, 591, 623, 624, 625, 626, 627, 628, 629, 630, 636, 691, 693, 722, 728, 731, 740, 743, 761, 766, 769, 786, 787, 788, 792, 797, 798, 804, 805, 808, 821, 824, 826, 828, 829, 831, 832, 879, 880, 883, 884, 887, 888, 910, 911, 912, 913, 914, 915, 916, 917], "dev": [18, 69, 70, 71, 73, 118, 124, 128, 130, 132, 223, 232, 257], "null": 18, "ce": 18, "cli": 18, "containerd": 18, "io": 18, "compos": [18, 122, 145], "plugin": 18, "systemctl": 18, "permiss": 18, "relat": [18, 19, 144, 223], "post": [18, 133, 804, 805, 808, 888, 894], "It": [18, 19, 21, 112, 113, 114, 115, 119, 121, 122, 125, 128, 130, 131, 132, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 192, 194, 223, 268, 273, 274, 277, 279, 282, 283, 286, 287, 290, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 344, 347, 348, 351, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 442, 443, 446, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 496, 497, 501, 502, 506, 507, 510, 511, 523, 524, 526, 529, 533, 534, 535, 537, 540, 543, 551, 564, 567, 568, 585, 618, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 639, 640, 642, 643, 645, 646, 648, 652, 654, 655, 657, 658, 661, 662, 664, 666, 668, 669, 671, 672, 674, 675, 677, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 699, 700, 702, 703, 705, 706, 707, 710, 712, 715, 717, 720, 722, 723, 726, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 748, 751, 752, 755, 756, 759, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781, 804, 805, 808, 809, 810, 811, 812, 814, 815, 817, 820, 821, 822, 825, 826, 834, 835, 836, 839, 841, 844, 879, 880, 883, 884, 887], "headach": 18, "arm": [18, 19], "m1": 18, "instead": [18, 19, 20, 114, 115, 117, 118, 122, 125, 126, 128, 130, 131, 145], "featur": [18, 113, 126, 131, 888], "vm": 18, "azur": 18, "cloud": [18, 144], "mean": [18, 19, 61, 62, 69, 70, 106, 107, 110, 111, 112, 115, 118, 122, 123, 124, 125, 128, 130, 131, 132, 133, 144, 145, 223, 252, 253, 254, 255, 267, 511, 534, 782, 783, 784, 785, 786, 792, 809, 814, 826, 827, 846, 888, 901], "configur": [18, 19, 21, 69, 70, 123, 223, 266, 786, 799], "defin": [18, 20, 113, 114, 123, 126, 130, 132, 145, 273, 443, 446, 464, 467, 511, 564, 636, 640, 642, 649, 651, 682, 684, 809, 811, 812, 846, 851, 854, 855, 858, 859, 862], "dockerfil": [18, 21], "longer": [18, 123, 125], "worri": 18, "platform": 18, "agnost": [18, 121, 126, 128, 130, 133, 145, 888], "usual": 18, "studio": 18, "favourit": 18, "extens": [18, 19, 114, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 180, 181, 182, 183, 184, 185, 186, 195, 198, 273, 274, 277, 287, 290, 292, 295, 312, 315, 332, 335, 336, 339, 344, 347, 369, 372, 452, 455, 468, 471, 484, 487, 488, 491, 497, 501, 502, 506, 636, 643, 645, 722, 736, 739, 740, 743, 756, 759, 826, 827, 828, 832, 835, 836, 839, 846, 851, 854, 879, 880, 883], "theme": 18, "too": [18, 19, 145, 273, 287, 290, 443, 446], "done": [18, 19, 115, 117, 131], "unsupport": [18, 123, 186, 207, 208], "old": [18, 69, 70, 125], "slow": 18, "ipad": 18, "long": [18, 19, 115, 623, 633], "browser": 18, "cool": [18, 113], "requisit": 18, "head": [18, 122, 623, 634, 888, 910, 921], "pane": [18, 19], "readi": [18, 20], "begin": [18, 786, 787, 797], "outlin": [18, 19, 20, 112, 114, 117, 118, 122, 125, 130], "green": [18, 19, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 935, 936], "dropdown": 18, "tab": [18, 131, 888], "master": [18, 19, 122], "vs": 18, "view": [18, 19, 167, 173, 623, 626, 630], "log": [18, 19, 35, 36, 80, 81, 118, 122, 125, 128, 131, 167, 177, 273, 413, 416, 421, 424, 636, 681, 888], "built": [18, 129, 167, 168, 223, 910, 921, 922, 923], "bottom": 18, "box": 18, "patient": 18, "upto": 18, "15": [18, 98, 99, 115, 273, 312, 315, 468, 471, 623, 626, 636, 646, 648, 672, 674, 691, 693, 722, 756, 759, 804, 805, 808, 809, 811, 812, 813, 821, 824, 826, 827, 846, 847, 850], "minut": 18, "launch": 18, "12": [18, 98, 99, 115, 122, 273, 312, 315, 332, 335, 344, 347, 468, 471, 511, 529, 547, 585, 587, 590, 636, 646, 648, 672, 674, 691, 693, 722, 740, 743, 748, 751, 756, 759, 804, 805, 808, 809, 811, 812, 813, 821, 825, 826, 827, 846, 847, 850], "output": [18, 69, 70, 112, 113, 114, 115, 117, 118, 121, 122, 124, 125, 126, 128, 130, 132, 133, 145, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 192, 194, 223, 232, 233, 267, 268, 273, 274, 277, 279, 282, 283, 286, 287, 290, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 344, 347, 348, 351, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 442, 443, 446, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 496, 497, 501, 502, 506, 507, 510, 511, 522, 523, 524, 526, 529, 530, 533, 534, 535, 537, 539, 540, 543, 551, 564, 567, 568, 585, 596, 618, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 642, 643, 645, 646, 648, 652, 654, 655, 657, 658, 661, 662, 664, 666, 668, 669, 671, 672, 674, 675, 677, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 699, 700, 702, 703, 705, 706, 707, 710, 712, 715, 717, 720, 722, 723, 726, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 748, 751, 752, 755, 756, 759, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781, 786, 799, 804, 805, 808, 809, 810, 811, 812, 814, 815, 817, 820, 821, 825, 835, 836, 839, 841, 844, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887, 888, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921], "That": [18, 19, 130, 131, 132, 273, 464, 467], "alreadi": [18, 19, 69, 70, 119, 122, 126, 130, 145, 223, 273, 336, 339, 369, 372, 443, 446, 468, 471, 507, 510, 636, 672, 674, 888], "refer": [18, 19, 117, 118, 123, 126, 145, 167, 172, 273, 365, 368, 413, 416, 585, 587, 590, 592, 594, 636, 697, 699, 703, 705, 846, 867, 870, 875, 878, 879, 880, 883, 884, 887, 910, 920], "approach": [18, 19, 117, 118, 122, 130, 131, 145], "colour": 18, "applic": [18, 123, 124, 132, 623, 634, 635, 786, 792, 798], "good": [18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 132], "chanc": 18, "vscode": 18, "show": [18, 19, 69, 70, 115, 125, 144, 145, 888], "explor": [18, 129, 133, 144], "troubleshoot": 18, "sometim": [18, 19], "ever": [18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "64": [18, 131, 132, 273, 484, 487, 488, 491, 623, 629, 630, 636, 672, 674, 846, 847, 850, 888, 910, 921], "bit": [18, 115, 118, 122, 130, 186, 205, 206, 209, 273, 316, 319, 320, 323, 328, 331, 846, 863, 866, 871, 874], "usr": 18, "more": [18, 19, 20, 112, 113, 115, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 145, 167, 168, 186, 193, 273, 365, 368, 636, 658, 661, 722, 740, 743, 826, 827, 828, 832, 834, 888], "nutshel": [18, 126], "hook": 18, "lint": 18, "accept": [18, 19, 24, 114, 115, 117, 118, 121, 122, 124, 125, 126, 130, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 195, 198, 273, 274, 277, 287, 290, 292, 295, 312, 315, 332, 335, 336, 339, 344, 347, 369, 372, 429, 432, 433, 436, 452, 455, 464, 467, 468, 471, 484, 487, 488, 491, 497, 501, 502, 506, 511, 539, 623, 626, 635, 636, 643, 645, 722, 736, 739, 740, 743, 756, 759, 804, 805, 808, 826, 827, 828, 832, 835, 836, 839, 846, 851, 854, 855, 858, 879, 880, 883, 888], "fix": [18, 19], "fail": [18, 20, 116, 117, 128, 130], "attempt": [18, 145], "succe": 18, "problemat": 18, "appli": [18, 19, 20, 24, 27, 28, 31, 32, 35, 36, 37, 38, 39, 40, 49, 50, 57, 58, 69, 70, 76, 77, 80, 81, 82, 83, 84, 85, 94, 95, 98, 99, 102, 103, 114, 115, 117, 118, 120, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 143, 145, 156, 157, 158, 159, 160, 161, 162, 163, 186, 195, 196, 197, 199, 214, 274, 275, 276, 278, 287, 288, 289, 291, 336, 337, 338, 369, 370, 371, 497, 498, 499, 500, 502, 503, 504, 505, 511, 512, 513, 514, 516, 533, 534, 535, 540, 541, 542, 544, 585, 587, 588, 589, 591, 605, 607, 609, 611, 623, 632, 634, 635, 636, 666, 668, 675, 677, 706, 707, 710, 712, 715, 717, 720, 722, 723, 724, 725, 727, 756, 757, 758, 760, 766, 769, 782, 783, 784, 786, 792, 795, 798, 799, 804, 805, 808, 811, 813, 828, 829, 830, 831, 888, 896, 897, 898, 924, 925], "proce": [18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "modifi": [18, 19, 114, 118, 123, 124, 128], "properli": [18, 112], "enter": [18, 19, 121, 123, 124, 126, 223], "unsur": [18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "feel": [18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 888], "server": [19, 888], "appropri": [19, 65, 66, 110, 111, 120, 273, 287, 290, 443, 446, 821, 822], "context": [19, 115, 122, 123, 124, 223, 511, 562, 623, 634, 910, 921], "suitabl": [19, 113, 122], "quick": [19, 112, 132], "alwai": [19, 20, 69, 70, 113, 114, 118, 119, 121, 122, 125, 126, 128, 130, 145, 186, 192, 273, 287, 290, 443, 446, 511, 555, 585, 601, 603, 618], "correct": [19, 20, 61, 62, 106, 107, 112, 118, 122, 123, 124, 126, 186, 218, 722, 723, 726, 846, 867, 868, 869, 870, 875, 876, 877, 878, 888], "tendenc": 19, "gener": [19, 20, 21, 38, 65, 66, 69, 70, 83, 110, 111, 112, 113, 114, 115, 118, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 144, 145, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 195, 198, 273, 274, 277, 292, 295, 332, 335, 336, 339, 344, 347, 369, 372, 452, 455, 464, 467, 484, 487, 488, 491, 512, 515, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 601, 603, 722, 736, 739, 756, 759, 809, 810, 811, 812, 815, 817, 819, 826, 827, 828, 832, 835, 836, 839, 846, 851, 854, 888, 926, 930], "land": 19, "end": [19, 122, 125, 127, 144, 145, 167, 168, 273, 304, 307, 888, 894], "world": 19, "come": [19, 20, 132, 143, 888, 894], "fly": 19, "hard": [19, 130], "receiv": [19, 117, 123, 124, 223, 232, 233, 511, 518, 561, 910, 920], "respons": [19, 21], "internship": 19, "comment": 19, "trigger": 19, "unansw": 19, "label": [19, 128, 129, 133, 706, 707, 710, 712, 715, 717, 720], "respond": 19, "remov": [19, 20, 21, 69, 70, 114, 117, 118, 123, 125, 133, 636, 646, 648, 658, 661, 694, 696, 722, 762, 765, 782, 783, 784], "someon": [19, 145], "els": [19, 20, 113, 118, 119, 125, 128, 130, 132, 133, 145, 511, 521, 532, 536, 786, 796], "strive": [19, 145], "repli": 19, "newli": [19, 125, 164, 165, 186, 192, 511, 522], "place": [19, 69, 70, 112, 113, 114, 115, 117, 118, 122, 124, 126, 133, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 195, 198, 223, 268, 273, 274, 277, 287, 290, 292, 295, 312, 315, 332, 335, 336, 339, 344, 347, 369, 372, 452, 455, 468, 471, 484, 487, 488, 491, 497, 501, 502, 506, 511, 539, 553, 554, 555, 623, 626, 635, 636, 643, 645, 722, 736, 739, 740, 743, 756, 759, 804, 805, 808, 826, 827, 828, 832, 835, 836, 839, 846, 851, 854, 879, 880, 883, 926, 927, 928, 929, 930, 931], "bug": [19, 117], "serv": [19, 117, 118, 121, 122, 126, 127, 888], "suspect": 19, "behaviour": [19, 114, 117, 121, 122, 125, 126, 130], "observ": 19, "confid": 19, "noth": [19, 69, 70], "wrong": 19, "someth": [19, 113, 131, 132, 145], "bet": 19, "act": [19, 115, 145], "placehold": [19, 121, 126, 786, 798], "sub": [19, 20, 69, 70, 112, 117, 122, 130, 131, 132, 223, 248, 249, 252, 253, 254, 255, 636, 646, 648, 722, 761, 782, 783, 784, 785, 888], "mark": [19, 117], "ii": [19, 846, 847, 850], "iii": 19, "titl": [19, 888], "issue_numb": 19, "delet": [19, 21], "No": [19, 128], "wait": [19, 69, 70, 71, 72, 73], "progress": [19, 122, 129, 133], "pr": 19, "soon": [19, 122, 143, 145, 888, 894], "partial": [19, 69, 70, 922, 923], "solut": [19, 117, 122, 636, 682, 684], "review": [19, 113], "merg": 19, "everi": [19, 20, 21, 115, 116, 117, 118, 119, 120, 122, 125, 126, 128, 130, 132, 167, 174, 175, 511, 512, 515], "shape": [19, 49, 50, 69, 70, 84, 85, 94, 95, 98, 99, 102, 103, 113, 114, 115, 123, 124, 125, 126, 128, 130, 131, 132, 133, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 223, 235, 263, 268, 273, 274, 277, 279, 282, 283, 286, 287, 290, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 344, 347, 348, 351, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 442, 443, 446, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 496, 497, 501, 502, 506, 507, 510, 511, 523, 524, 526, 529, 533, 534, 535, 537, 540, 543, 548, 551, 564, 567, 568, 574, 585, 587, 589, 591, 618, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 639, 640, 642, 643, 645, 646, 648, 649, 651, 652, 654, 655, 657, 658, 661, 662, 664, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 699, 700, 702, 703, 705, 706, 707, 710, 712, 715, 717, 720, 722, 723, 726, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 748, 751, 752, 753, 754, 755, 756, 759, 761, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 820, 821, 822, 824, 825, 829, 831, 835, 836, 839, 841, 844, 846, 847, 850, 879, 880, 883, 884, 887, 888, 910, 912, 913, 914, 915, 916, 917, 924, 925], "move": [19, 69, 70, 113, 223, 268], "within": [19, 24, 27, 28, 117, 132, 145, 167, 168, 809, 815, 817], "7": [19, 21, 35, 36, 49, 50, 71, 72, 80, 81, 98, 99, 115, 118, 122, 125, 156, 158, 159, 223, 245, 273, 274, 277, 287, 288, 289, 290, 291, 312, 315, 316, 319, 332, 335, 336, 339, 344, 347, 361, 364, 369, 372, 381, 384, 441, 442, 468, 471, 484, 487, 497, 501, 502, 506, 511, 520, 529, 539, 585, 587, 590, 592, 594, 605, 607, 623, 629, 630, 635, 636, 640, 642, 643, 645, 646, 648, 672, 674, 691, 693, 706, 707, 710, 712, 715, 717, 720, 722, 723, 724, 726, 736, 739, 740, 743, 748, 751, 761, 770, 773, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 817, 821, 825, 826, 827, 846, 847, 850], "dai": 19, "close": [19, 114, 273, 365, 368, 468, 471, 636, 685, 687], "likewis": [19, 114, 118, 122, 123, 126, 131], "freed": 19, "flag": [19, 69, 70, 125, 130, 223, 242, 585, 601, 603], "purpos": [19, 21, 115, 117, 118, 120, 121, 122, 126, 127, 130, 273, 365, 368, 888], "remain": [19, 115, 145, 273, 287, 290, 443, 446, 464, 467, 722, 752, 755, 786, 792], "access": [19, 21, 69, 70, 123], "short": [19, 132, 623, 633], "basi": [19, 116, 131], "situat": [19, 133], "alloc": [19, 145, 167, 182, 183, 186, 192, 223], "upon": [19, 115, 117, 125, 145], "period": 19, "prevent": [19, 125, 130, 585, 587, 590, 592, 594, 605, 607, 846, 871, 874, 926, 927, 928], "unabl": 19, "obvious": 19, "never": [19, 122], "reflect": [19, 121], "qualiti": 19, "hypothet": 19, "frustrat": 19, "delai": 19, "busi": 19, "fine": [19, 130, 133], "becaus": [19, 114, 117, 118, 119, 121, 123, 124, 125, 126, 128, 132, 133, 145], "inact": 19, "limit": [19, 69, 70, 71, 72, 73, 115, 117, 128, 131, 133, 145, 186, 206, 209, 511, 523, 524, 526, 722, 723, 726], "me": 19, "unfairli": 19, "definit": [19, 118, 123, 130, 636, 637, 639, 640, 642], "investig": 19, "Then": [19, 21, 130, 145], "practic": [19, 117], "separ": [19, 117, 121, 128, 130, 131], "branch": [19, 122, 145, 164, 165, 273, 304, 307], "simpli": [19, 31, 32, 35, 36, 37, 38, 39, 40, 49, 50, 57, 58, 69, 70, 76, 77, 80, 81, 82, 83, 84, 85, 94, 95, 98, 99, 102, 103, 114, 115, 117, 118, 121, 122, 124, 125, 126, 128, 132, 133, 195, 196, 197, 199, 273, 274, 275, 276, 278, 287, 288, 289, 291, 336, 337, 338, 365, 368, 369, 370, 371, 497, 498, 499, 500, 502, 503, 504, 505, 512, 513, 514, 516, 540, 541, 542, 544, 587, 588, 589, 591, 723, 724, 725, 727, 756, 757, 758, 760, 811, 813, 828, 829, 830, 831], "role": [19, 129], "kept": [19, 69, 70, 71, 72, 73, 125, 782, 783, 784], "date": 19, "upstream": [19, 116], "complic": [19, 128], "root": [19, 21, 131, 273, 484, 487, 809, 810, 814], "merge_with_upstream": 19, "sh": 19, "name_of_your_branch": 19, "resolv": [19, 846, 863, 866, 871, 874], "clone": [19, 21, 69, 70, 223, 244, 245, 246, 247], "push": [19, 116], "both": [19, 114, 115, 118, 122, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 195, 198, 213, 273, 274, 277, 287, 290, 292, 295, 336, 339, 369, 372, 452, 455, 460, 463, 484, 487, 488, 491, 497, 501, 511, 539, 585, 587, 590, 623, 626, 635, 636, 640, 642, 658, 661, 697, 699, 722, 756, 759, 804, 805, 808, 826, 828, 832, 846, 851, 854, 879, 880, 883], "abort": 19, "tediou": 19, "resolut": 19, "stash": 19, "reinstat": 19, "correspond": [19, 69, 70, 71, 72, 114, 115, 116, 118, 121, 122, 123, 126, 186, 193, 273, 304, 307, 460, 463, 636, 640, 642, 649, 651, 682, 684, 722, 728, 731, 756, 759, 809, 810, 821, 822, 823, 826, 827, 828, 832, 834, 846, 863, 866, 867, 870, 871, 874, 875, 878], "fetch": 19, "uncommit": 19, "unstag": 19, "untrack": 19, "comprehens": 19, "explan": [19, 114, 122, 126, 130], "atlassian": 19, "tutori": 19, "wrote": 19, "piec": [19, 118, 120, 121, 128], "inform": [19, 186, 206, 209, 511, 517, 585, 618], "tag": 19, "usu": 19, "describ": [19, 129, 133, 846, 847, 850, 863, 866, 867, 870, 871, 874], "navig": [19, 112], "blame": 19, "revis": 19, "author": [19, 888], "eg": 19, "16": [19, 80, 81, 98, 99, 115, 131, 273, 497, 498, 500, 501, 623, 629, 636, 646, 648, 672, 674, 811, 813, 821, 825, 846, 847, 850], "5": [19, 21, 35, 36, 37, 38, 49, 50, 71, 72, 76, 77, 80, 81, 82, 83, 84, 85, 94, 95, 98, 99, 115, 119, 126, 130, 131, 132, 156, 158, 159, 161, 167, 175, 178, 181, 184, 185, 186, 195, 197, 198, 199, 223, 245, 261, 273, 274, 276, 277, 278, 287, 288, 289, 290, 291, 292, 295, 308, 311, 312, 315, 328, 331, 332, 335, 336, 337, 338, 339, 344, 347, 369, 370, 371, 372, 381, 384, 441, 442, 448, 451, 452, 455, 468, 471, 484, 487, 488, 491, 497, 498, 500, 501, 502, 503, 505, 506, 511, 512, 513, 520, 529, 539, 540, 543, 544, 574, 579, 585, 587, 589, 590, 591, 623, 626, 628, 629, 635, 636, 637, 639, 640, 642, 643, 645, 646, 648, 655, 657, 672, 674, 691, 693, 694, 696, 706, 717, 720, 722, 723, 724, 725, 726, 727, 728, 731, 736, 739, 740, 743, 748, 751, 752, 755, 756, 758, 759, 760, 761, 770, 773, 804, 805, 808, 809, 810, 811, 812, 813, 820, 821, 823, 824, 825, 826, 827, 828, 832, 835, 836, 839, 846, 847, 850, 851, 854, 879, 880, 883, 910, 921], "past": 19, "l": [19, 112, 636, 637, 639, 649, 651, 658, 661, 694, 696], "filepath": [19, 69, 70], "grep": 19, "v": [19, 128, 131, 132, 133, 623, 635, 888, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 930, 932, 933], "commit_id": 19, "handi": 19, "histori": 19, "toggl": 19, "vertic": 19, "highlight": [19, 115], "previou": [19, 117, 126, 133, 145, 585, 592, 594, 605, 607], "shown": [19, 65, 66, 69, 70, 110, 111, 115, 126, 128, 130, 145, 273, 312, 315, 332, 335, 344, 347, 468, 471, 502, 506, 636, 643, 645, 722, 736, 739, 740, 743, 826, 827, 835, 836, 839], "whenev": [19, 130, 131], "think": [19, 115], "interact": [19, 888], "gain": [19, 127, 132, 901], "quit": [19, 20, 114, 118, 120, 121], "repeat": [19, 49, 50, 69, 70, 94, 95, 114, 115, 119, 121, 122, 511, 535, 722, 774, 777], "yourself": [19, 20, 144], "simpler": [19, 130], "cannot": [19, 119, 123, 133], "least": [19, 115, 118, 121, 636, 658, 661], "final": [19, 114, 115, 118, 121, 123, 125, 128, 130, 131, 167, 176, 177, 511, 538, 910, 921], "tickbox": 19, "lower": [19, 69, 70, 115, 128, 145, 167, 172, 182, 273, 441, 636, 637, 639, 809, 815, 817], "corner": 19, "without": [19, 69, 70, 113, 118, 121, 122, 124, 126, 128, 130, 131, 132, 144, 145, 511, 566, 571, 722, 752, 755, 786, 788, 826, 827, 828, 832, 834], "span": 19, "intent": [19, 125], "larg": [19, 131, 273, 287, 290, 443, 446], "discourag": 19, "philosophi": 19, "increment": [19, 511, 554], "frequent": [19, 20], "valuabl": 19, "infrequ": 19, "earli": [19, 888], "wast": 19, "spot": [19, 118], "mistak": 19, "propos": 19, "mountain": 19, "around": [19, 69, 70, 71, 72, 73, 118, 121, 126, 130, 145], "advoc": [19, 145], "individu": [19, 20, 118], "per": [19, 131, 223, 623, 624, 625, 626, 627, 628, 629, 630, 910, 911, 912, 913, 914, 915, 916, 917], "style": [19, 821, 824], "ve": [19, 127, 130, 809, 810, 888], "were": [19, 69, 70, 113, 117, 122], "actual": [19, 112, 118, 125, 127, 130, 132, 145], "aim": [19, 127], "part": [19, 113, 116, 117, 118, 128, 129, 133, 144, 145, 167, 182, 183, 585, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615, 922, 923], "subsect": 19, "session": [19, 888], "block": [19, 118, 127, 129, 133, 145, 223, 888], "smaller": [19, 128, 133, 722, 723, 726, 756, 759, 846, 863, 866, 871, 874], "edit": 19, "exact": [19, 69, 70, 128, 826, 827], "beauti": 19, "particularli": [19, 131, 145], "concern": [19, 112, 115, 122, 125, 127], "effici": [19, 117, 118, 122, 125, 126, 128, 131, 145], "difficult": [19, 117, 145, 826, 827, 828, 832, 834], "undo": 19, "stress": 19, "frequenc": [19, 511, 538], "pycharm": 19, "pytest": [19, 117], "button": 19, "declar": 19, "insid": [19, 21, 113, 123], "exec": 19, "rm": 19, "rf": 19, "cp": 19, "ivy_contain": 19, "bash": [19, 21], "test_ivi": [19, 117], "test_funct": 19, "test_cor": 19, "test_imag": 19, "test_random_crop": 19, "header": 19, "summari": [19, 69, 70, 186, 201, 202, 203, 215, 216, 217, 223, 236, 237, 511, 527, 531, 549, 585, 617, 622], "q": [19, 145, 623, 635, 636, 649, 651, 678, 680], "array_api_test": 19, "test_creation_funct": 19, "test_arang": 19, "window": [19, 21, 623, 624, 625, 626, 627, 628, 629, 630, 910, 911, 912, 913, 914, 915, 916, 917], "variou": [19, 114, 120, 126, 144], "valu": [19, 49, 50, 57, 58, 69, 70, 71, 72, 73, 94, 95, 115, 117, 118, 122, 123, 124, 125, 126, 128, 130, 133, 145, 167, 168, 172, 174, 175, 176, 177, 186, 192, 201, 202, 203, 223, 235, 266, 267, 273, 274, 277, 279, 282, 287, 290, 292, 295, 300, 303, 336, 339, 353, 356, 357, 360, 369, 372, 373, 376, 377, 380, 381, 384, 397, 400, 401, 404, 441, 442, 443, 446, 452, 455, 456, 459, 460, 463, 468, 471, 502, 506, 507, 510, 511, 523, 524, 526, 527, 532, 538, 539, 540, 543, 549, 552, 556, 566, 567, 568, 569, 570, 571, 584, 585, 587, 590, 592, 594, 596, 605, 607, 618, 622, 623, 624, 625, 626, 627, 628, 629, 630, 633, 634, 635, 636, 666, 668, 675, 677, 678, 680, 681, 682, 684, 685, 687, 688, 690, 700, 702, 722, 723, 726, 732, 733, 734, 735, 748, 751, 752, 755, 778, 780, 781, 782, 783, 784, 786, 790, 791, 792, 793, 794, 799, 802, 803, 804, 805, 808, 809, 810, 811, 812, 814, 815, 817, 819, 821, 822, 823, 825, 826, 827, 828, 830, 832, 833, 834, 835, 836, 839, 841, 844, 846, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 910, 911, 912, 913, 914, 915, 916, 917, 921, 922, 923, 924, 925, 926, 927, 928, 930], "cpu": [19, 69, 70, 124, 145, 167, 176, 177, 223, 242, 243, 245, 259, 262, 264, 268, 269, 271, 272, 511, 539, 540, 543, 564, 567, 568, 809, 810, 811, 812, 814, 815, 817, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 932, 933], "gpu": [19, 98, 99, 124, 130, 145, 223, 242, 245, 258, 260, 264, 266, 271, 811, 813], "combin": [19, 69, 70, 71, 72, 73, 115, 117, 118, 121, 122, 133, 636, 640, 642], "wherebi": [20, 122, 786, 798], "broad": 20, "distribut": [20, 69, 70, 124, 145, 223, 244, 248, 249, 250, 251, 623, 631, 706, 707, 710, 712, 715, 717, 720, 809, 810, 811, 812, 814, 815, 817, 910, 918, 922, 923], "across": [20, 69, 70, 115, 117, 118, 122, 123, 126, 223, 232, 233, 244, 245, 247, 248, 249, 250, 251, 255, 265, 266, 511, 519, 520, 786, 792, 821, 823], "todo": [20, 117], "commit": [20, 117], "NOT": [20, 273, 429, 432], "static": [20, 69, 70, 76, 77, 80, 81, 82, 83, 84, 85, 92, 93, 94, 95, 98, 99, 102, 103, 104, 105, 110, 111, 114, 115, 118, 145, 164, 165, 195, 199, 274, 278, 287, 291, 497, 498, 502, 503, 512, 516, 540, 544, 723, 727, 756, 760, 811, 813, 828, 829], "method": [20, 31, 32, 35, 36, 37, 38, 39, 40, 49, 50, 57, 58, 65, 66, 69, 70, 71, 72, 73, 76, 77, 80, 81, 82, 83, 84, 85, 94, 95, 98, 99, 102, 103, 110, 111, 113, 114, 115, 117, 118, 121, 126, 128, 129, 132, 133, 145, 156, 158, 159, 160, 161, 162, 163, 167, 173, 195, 196, 197, 199, 273, 274, 275, 276, 278, 287, 288, 289, 291, 292, 295, 312, 315, 332, 335, 336, 337, 338, 339, 344, 347, 369, 370, 371, 372, 381, 384, 441, 442, 448, 451, 452, 455, 468, 471, 484, 487, 488, 491, 497, 498, 499, 500, 502, 503, 504, 505, 506, 511, 512, 513, 514, 516, 527, 528, 539, 540, 541, 542, 544, 567, 568, 579, 581, 585, 587, 588, 589, 591, 605, 607, 609, 611, 623, 629, 635, 636, 637, 639, 640, 642, 643, 645, 706, 707, 710, 722, 723, 724, 725, 727, 736, 739, 740, 743, 748, 751, 756, 757, 758, 760, 761, 770, 773, 786, 787, 797, 798, 799, 804, 805, 808, 809, 811, 813, 814, 815, 817, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 839, 846, 847, 850, 851, 854, 879, 880, 883, 888, 910, 921, 922, 923], "instanc": [20, 24, 25, 26, 27, 28, 31, 32, 35, 36, 37, 38, 39, 40, 49, 50, 57, 58, 65, 66, 69, 70, 71, 72, 76, 77, 80, 81, 82, 83, 84, 85, 94, 95, 102, 103, 110, 111, 114, 115, 117, 118, 121, 123, 125, 126, 131, 132, 133, 146, 154, 156, 158, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 195, 196, 197, 198, 223, 232, 264, 273, 274, 275, 276, 277, 287, 288, 289, 290, 292, 295, 312, 315, 332, 335, 336, 337, 338, 339, 344, 347, 369, 370, 371, 372, 381, 384, 441, 442, 448, 451, 452, 455, 468, 471, 484, 487, 488, 491, 497, 499, 500, 501, 502, 504, 505, 506, 511, 512, 513, 514, 528, 539, 540, 541, 542, 555, 579, 581, 587, 588, 589, 591, 623, 626, 629, 635, 636, 637, 639, 640, 642, 643, 645, 706, 707, 710, 722, 723, 724, 725, 736, 739, 740, 743, 748, 751, 756, 757, 758, 759, 761, 770, 773, 804, 805, 808, 809, 814, 815, 817, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 839, 846, 847, 850, 851, 854, 879, 880, 883, 899, 900], "revers": [20, 71, 72, 114, 115, 133, 145, 511, 532, 722, 740, 743], "resourc": 20, "content": [20, 21, 69, 70, 125, 128, 131], "thei": [20, 69, 70, 112, 113, 115, 118, 120, 122, 123, 124, 125, 130, 131, 132, 133, 145, 186, 213, 782, 783, 784, 809, 810, 888, 932, 933], "hypothesi": 20, "cover": [20, 114, 115, 118, 120, 127], "lambda": [20, 128, 131, 926, 929, 931], "direct": [20, 132, 133, 144, 835, 841, 844], "bind": [20, 122], "special": [20, 71, 72, 113, 114, 115, 121, 126, 273, 274, 277, 279, 282, 283, 286, 287, 290, 292, 295, 296, 299, 300, 303, 304, 307, 332, 335, 336, 339, 340, 343, 344, 347, 361, 364, 365, 368, 369, 372, 405, 408, 409, 412, 417, 420, 421, 424, 443, 446, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 497, 501, 502, 506, 507, 510, 846, 851, 854, 855, 858, 859, 862, 867, 870, 871, 874, 875, 878], "aforement": 20, "categori": [20, 113, 121, 122, 123, 127, 888], "parent": [20, 130], "arraywithelementwis": [20, 35, 121], "containerwithmanipul": [20, 71, 72, 94], "hint": [20, 113, 114, 118, 121, 125, 126, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 195, 198, 273, 274, 277, 287, 290, 292, 295, 312, 315, 332, 335, 336, 339, 344, 347, 369, 372, 452, 455, 468, 471, 484, 487, 488, 491, 497, 501, 502, 506, 511, 539, 623, 626, 635, 636, 643, 645, 722, 736, 739, 740, 743, 756, 759, 804, 805, 808, 826, 827, 828, 832, 835, 836, 839, 846, 851, 854, 879, 880, 883], "its": [20, 21, 114, 186, 193, 223, 267, 636, 658, 661, 722, 736, 739, 752, 755, 756, 759, 770, 773], "docstr": [20, 21, 31, 32, 35, 36, 37, 38, 39, 40, 49, 50, 57, 58, 76, 77, 80, 81, 82, 83, 84, 85, 94, 95, 98, 99, 102, 103, 112, 113, 118, 122, 126, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 180, 181, 182, 183, 184, 185, 186, 195, 196, 197, 198, 199, 273, 274, 275, 276, 277, 278, 287, 288, 289, 290, 291, 292, 295, 312, 315, 332, 335, 336, 337, 338, 339, 344, 347, 369, 370, 371, 372, 452, 455, 468, 471, 484, 487, 488, 491, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 512, 513, 514, 516, 540, 541, 542, 544, 587, 588, 589, 591, 636, 643, 645, 722, 723, 724, 725, 727, 736, 739, 740, 743, 756, 757, 758, 759, 760, 811, 813, 826, 827, 828, 829, 830, 831, 832, 835, 836, 839, 846, 851, 854, 879, 880, 883], "thorough": [20, 114, 117, 126], "transpil": [20, 127, 129, 888, 894], "builder": [21, 143, 145, 888], "maco": 21, "ubuntu": 21, "uid": 21, "make_docs_without_dock": 21, "rel": [21, 585, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615, 636, 646, 648, 666, 668, 675, 677, 694, 696, 722, 740, 743, 756, 759, 835, 836, 839, 841, 844, 888], "synchron": 21, "rest": [21, 129, 133], "remove_doc": 21, "_": [21, 114, 122, 125, 130, 131, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 184, 185, 186, 195, 198, 273, 274, 277, 292, 295, 332, 335, 336, 339, 344, 347, 369, 372, 452, 455, 484, 487, 488, 491, 585, 587, 590, 592, 594, 636, 703, 705, 722, 736, 739, 756, 759, 826, 827, 835, 836, 839, 846, 851, 854], "indic": [21, 37, 38, 69, 70, 82, 83, 129, 133, 156, 161, 273, 472, 475, 511, 539, 540, 541, 542, 543, 544, 551, 564, 567, 568, 623, 624, 625, 626, 627, 628, 629, 630, 636, 700, 702, 722, 756, 759, 786, 787, 789, 791, 793, 794, 795, 797, 800, 801, 802, 803, 804, 805, 808, 809, 810, 821, 822, 823, 824, 826, 827, 833, 835, 836, 839, 841, 844, 888, 891, 893, 910, 911, 912, 913, 914, 915, 916, 917, 922, 923], "privat": [21, 926, 930], "fulfil": [21, 127, 888], "autogenerated_sourc": 21, "format": [21, 69, 70, 114, 123, 124, 128, 130, 131, 186, 204, 223, 243, 846, 847, 850, 888], "png": [21, 131], "_imag": 21, "lastli": 21, "structur": [21, 69, 70, 71, 72, 73, 113, 118, 121, 122, 131, 132, 511, 527, 786, 799], "rst": 21, "skip": [21, 69, 70, 117, 786, 799], "read": [21, 69, 70, 888], "partial_sourc": 21, "conf": 21, "copi": [21, 69, 70, 114, 119, 123, 128, 130, 131, 144, 145, 167, 169, 173, 186, 192, 223, 268, 511, 528, 580, 581, 722, 752, 755, 786, 788, 835, 841, 844], "create_rst_fil": 21, "filter": [21, 623, 624, 625, 626, 627, 628, 629, 630, 910, 911, 912, 913, 914, 915, 916, 917], "repres": [21, 130, 167, 178, 186, 205, 273, 283, 286, 287, 290, 296, 299, 308, 311, 344, 347, 443, 446, 480, 483, 502, 506, 623, 632, 636, 681, 682, 684], "overal": [21, 114, 122, 123, 124, 133], "markup": 21, "6": [21, 35, 36, 39, 40, 49, 50, 71, 72, 80, 81, 82, 83, 98, 99, 115, 119, 122, 130, 131, 132, 156, 158, 159, 161, 167, 175, 223, 245, 261, 273, 274, 275, 276, 277, 278, 287, 288, 289, 290, 291, 292, 295, 312, 315, 316, 319, 332, 335, 336, 337, 338, 339, 344, 347, 369, 372, 381, 384, 441, 442, 448, 451, 468, 471, 484, 487, 488, 491, 497, 501, 502, 506, 511, 520, 529, 539, 540, 543, 544, 574, 579, 585, 587, 588, 590, 623, 626, 629, 630, 635, 636, 640, 642, 643, 645, 646, 648, 672, 674, 685, 687, 691, 693, 706, 707, 710, 717, 720, 722, 723, 724, 726, 728, 731, 736, 739, 740, 743, 748, 751, 752, 755, 756, 759, 761, 770, 773, 804, 805, 808, 809, 810, 811, 812, 813, 821, 822, 825, 826, 827, 828, 832, 846, 847, 850, 851, 854], "extract": [21, 113], "get_functions_and_class": 21, "doctr": 21, "readm": [21, 145], "module_nam": 21, "copy_readme_to_rst": 21, "tabl": 21, "toc": 21, "tree": 21, "append": [21, 69, 70, 117, 128, 131, 273, 320, 323, 636, 646, 648, 658, 661], "append_toctree_to_rst": 21, "9": [21, 35, 36, 39, 40, 49, 50, 71, 72, 80, 81, 84, 85, 98, 99, 115, 131, 132, 273, 287, 288, 289, 290, 291, 312, 315, 316, 319, 441, 442, 468, 471, 484, 487, 488, 491, 511, 539, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 605, 606, 607, 608, 623, 626, 629, 630, 636, 640, 642, 643, 645, 646, 648, 672, 674, 685, 687, 691, 693, 722, 723, 724, 726, 740, 743, 748, 751, 756, 759, 761, 809, 810, 811, 812, 813, 821, 825, 826, 827, 846, 847, 850, 926, 927, 928], "index": [21, 69, 70, 118, 122, 130, 166, 167, 172, 178, 223, 264, 511, 517, 539, 540, 543, 722, 766, 769, 786, 789, 790, 793, 794, 795, 800, 802, 821, 822, 823, 824, 826, 827, 828, 832, 835, 836, 839, 891, 893], "create_index_rst": 21, "14": [21, 98, 99, 115, 122, 273, 332, 335, 585, 587, 590, 623, 635, 636, 646, 648, 672, 674, 811, 813, 826, 827, 846, 847, 850], "\u03c0": [21, 273, 279, 282, 292, 295, 300, 303, 304, 307], "namespac": [21, 113, 123, 128, 133], "arraywithactiv": 22, "abc": [22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 69, 70, 130, 223, 232, 238, 511, 536, 922, 923, 926, 930], "collect": [24, 69, 70, 117, 144, 156, 164, 223, 511, 585, 623, 706, 786, 799, 804, 809, 896, 910, 924, 926], "wrap": [24, 31, 32, 35, 36, 37, 38, 39, 40, 49, 50, 57, 58, 66, 69, 70, 71, 72, 73, 76, 77, 80, 81, 82, 83, 84, 85, 94, 95, 98, 99, 102, 103, 111, 112, 114, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 133, 145, 146, 154, 195, 196, 197, 199, 274, 275, 276, 278, 287, 288, 289, 291, 336, 337, 338, 369, 370, 371, 497, 498, 499, 500, 502, 503, 504, 505, 511, 512, 513, 514, 516, 522, 540, 541, 542, 544, 585, 587, 588, 589, 591, 621, 723, 724, 725, 727, 756, 757, 758, 760, 811, 813, 828, 829, 830, 831], "args_to_ivi": 24, "include_deriv": [24, 25, 26, 27, 28, 786, 788, 798], "keyword": [24, 25, 26, 69, 70, 71, 72, 73, 113, 123, 124, 125, 126, 131, 167, 178, 223, 232, 233, 247, 251, 255, 511, 518, 561, 786, 792, 846, 871, 874, 922, 923], "variabl": [24, 25, 26, 27, 28, 69, 70, 71, 72, 114, 119, 122, 123, 125, 126, 131, 132, 133, 145, 511, 521, 553, 554, 555, 556, 557, 558, 560, 577, 585, 592, 594, 596, 597, 599, 601, 603, 605, 607, 609, 611, 613, 615, 618, 621, 623, 634, 636, 682, 684, 782, 783, 784, 785, 804, 805, 808, 888, 899, 900, 901, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933], "nest": [24, 25, 26, 27, 28, 69, 70, 71, 72, 73, 113, 118, 121, 122, 130, 131, 132, 145, 223, 247, 251, 255, 511, 579, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 922, 923, 926, 927, 928, 929, 930, 931], "unchang": [24, 25, 26, 27, 28], "posit": [24, 25, 26, 35, 36, 80, 81, 126, 131, 144, 166, 167, 172, 186, 206, 223, 247, 251, 255, 273, 274, 277, 385, 388, 389, 392, 443, 446, 464, 467, 511, 538, 636, 637, 639, 722, 736, 739, 756, 759, 809, 819, 821, 824, 879, 880, 883, 884, 887, 899, 900], "bool": [24, 25, 26, 27, 28, 31, 32, 69, 70, 110, 111, 115, 122, 123, 125, 133, 164, 165, 167, 174, 186, 192, 195, 196, 198, 201, 202, 203, 204, 207, 210, 211, 212, 222, 223, 242, 243, 258, 267, 270, 273, 312, 315, 316, 319, 324, 327, 332, 335, 353, 356, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 425, 428, 429, 432, 433, 436, 452, 455, 511, 512, 515, 519, 520, 529, 532, 536, 538, 548, 550, 555, 557, 558, 559, 560, 573, 583, 584, 585, 618, 636, 637, 639, 662, 664, 685, 687, 700, 702, 722, 761, 782, 783, 784, 785, 786, 787, 788, 792, 796, 797, 798, 809, 810, 821, 822, 823, 835, 836, 839, 841, 844, 846, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887], "deriv": [24, 25, 26, 27, 28, 123, 124, 130, 132, 167, 171, 175, 181, 185, 585, 587, 590, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615, 786, 788, 798, 922, 926, 930, 932], "tupl": [24, 25, 26, 27, 28, 45, 46, 57, 58, 69, 70, 113, 122, 123, 124, 126, 130, 131, 132, 145, 167, 169, 170, 174, 179, 180, 184, 186, 194, 208, 223, 242, 511, 538, 574, 623, 626, 629, 630, 633, 636, 666, 668, 675, 677, 685, 686, 687, 691, 693, 700, 702, 722, 728, 731, 732, 735, 740, 743, 744, 747, 752, 755, 756, 759, 762, 765, 766, 769, 778, 781, 782, 783, 784, 785, 786, 788, 789, 791, 793, 794, 795, 797, 798, 800, 801, 802, 803, 809, 814, 815, 817, 821, 824, 826, 827, 828, 830, 832, 833, 846, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887], "kei": [24, 25, 26, 69, 70, 71, 72, 73, 122, 131, 223, 235, 511, 517, 527, 623, 634, 635, 782, 783, 784, 786, 789, 795, 799, 899, 900, 910, 921, 926, 930], "word": [24, 25, 26, 167, 168, 809, 815, 817, 899, 900], "args_to_n": [24, 125, 130], "to_ivi": [24, 69, 70, 130, 786, 799], "input": [24, 27, 28, 39, 40, 69, 70, 71, 72, 73, 80, 81, 82, 83, 84, 85, 94, 95, 98, 99, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 146, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 195, 198, 200, 201, 202, 203, 204, 205, 211, 212, 213, 214, 218, 223, 232, 233, 242, 243, 244, 245, 247, 248, 251, 255, 261, 267, 268, 273, 274, 277, 278, 279, 282, 283, 286, 287, 290, 291, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 344, 347, 348, 351, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 442, 443, 446, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 496, 497, 498, 501, 502, 503, 506, 507, 510, 511, 512, 515, 516, 517, 519, 520, 521, 523, 524, 526, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 543, 544, 548, 550, 551, 553, 554, 555, 557, 558, 559, 560, 564, 567, 568, 573, 574, 577, 579, 580, 581, 583, 584, 585, 587, 588, 589, 590, 591, 596, 601, 603, 618, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 642, 643, 645, 646, 648, 649, 651, 652, 654, 655, 657, 658, 661, 662, 664, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 699, 700, 702, 703, 705, 706, 707, 710, 712, 715, 717, 720, 722, 723, 726, 727, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 748, 751, 752, 755, 756, 759, 760, 761, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781, 782, 783, 784, 785, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 839, 841, 844, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 924, 925], "leaf": [24, 27, 28, 69, 70, 118, 122, 131, 786, 787, 796, 797], "union": [24, 27, 28, 37, 38, 45, 46, 69, 70, 113, 115, 118, 121, 122, 123, 124, 125, 126, 128, 133, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 222, 223, 239, 240, 241, 242, 243, 245, 248, 249, 250, 251, 256, 262, 264, 266, 267, 268, 269, 272, 273, 274, 277, 279, 282, 283, 286, 287, 290, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 344, 347, 348, 351, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 429, 432, 433, 436, 437, 440, 441, 442, 443, 446, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 496, 497, 501, 502, 506, 507, 510, 511, 512, 515, 519, 520, 523, 524, 526, 529, 530, 533, 534, 535, 537, 538, 539, 540, 541, 543, 548, 550, 551, 553, 554, 555, 564, 567, 568, 573, 574, 579, 580, 581, 583, 584, 585, 587, 590, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615, 618, 620, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 635, 636, 637, 639, 640, 642, 643, 645, 646, 648, 649, 651, 652, 654, 655, 657, 658, 661, 662, 664, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 681, 682, 684, 685, 686, 687, 688, 690, 691, 693, 694, 696, 697, 699, 700, 702, 703, 705, 706, 707, 710, 712, 715, 717, 720, 722, 723, 726, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 748, 751, 752, 755, 756, 759, 761, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781, 782, 783, 784, 785, 786, 787, 788, 797, 798, 804, 805, 808, 809, 810, 811, 812, 814, 815, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 839, 841, 844, 846, 847, 850, 851, 854, 855, 858, 859, 862, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887], "nativearrai": [24, 27, 28, 37, 38, 113, 115, 118, 121, 122, 125, 126, 128, 130, 133, 146, 154, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 169, 171, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 192, 193, 194, 195, 198, 204, 206, 209, 211, 212, 214, 218, 223, 242, 243, 245, 261, 267, 268, 273, 274, 277, 279, 282, 283, 286, 287, 290, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 344, 347, 348, 351, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 429, 432, 433, 436, 437, 440, 441, 442, 443, 446, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 496, 497, 501, 502, 506, 507, 510, 511, 512, 513, 515, 519, 520, 523, 524, 526, 528, 529, 530, 533, 534, 535, 537, 538, 539, 540, 541, 543, 548, 550, 551, 553, 554, 555, 564, 567, 568, 573, 574, 579, 580, 581, 583, 584, 585, 587, 590, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615, 618, 620, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 635, 636, 637, 639, 640, 642, 643, 645, 646, 648, 649, 651, 652, 654, 655, 657, 658, 661, 662, 664, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 699, 700, 702, 703, 705, 706, 707, 710, 712, 715, 717, 720, 722, 723, 726, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 748, 751, 752, 755, 756, 759, 761, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781, 786, 788, 798, 804, 805, 808, 809, 810, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 839, 841, 844, 846, 847, 850, 851, 854, 855, 858, 859, 862, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887], "travers": [24, 27, 28, 69, 70, 122, 128, 130, 786, 798], "lowest": [24, 27, 28, 69, 70, 118, 145, 786, 798, 809, 811, 812], "leav": [24, 27, 28, 69, 70, 71, 72, 114, 115, 117, 118, 122, 123, 125, 126, 131, 132, 722, 766, 769, 786, 787, 788, 796, 797, 798], "to_n": [24, 69, 70], "item": [24, 28, 65, 66, 69, 70, 123, 128, 130, 131, 133, 186, 201, 223, 232, 233, 235, 242, 244, 246, 248, 250, 254, 511, 527, 549, 575, 576, 786, 791, 792, 793, 794, 798, 802, 803, 888, 922, 923], "arraywithcr": 29, "creation": [30, 69, 70, 71, 72, 73, 75, 113, 123, 124, 128, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185], "data_typ": [31, 32, 76, 77, 113, 123, 186, 190, 191, 192, 193, 194, 195, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222], "arraywithdatatyp": 31, "can_cast": [31, 32, 76, 77, 118, 123, 186, 199], "variant": [31, 32, 35, 36, 37, 38, 39, 40, 49, 50, 57, 58, 76, 77, 80, 81, 82, 83, 84, 85, 94, 95, 98, 99, 102, 103, 114, 115, 195, 196, 197, 199, 274, 275, 276, 278, 287, 288, 289, 291, 336, 337, 338, 369, 370, 371, 497, 498, 499, 500, 502, 503, 504, 505, 512, 513, 514, 516, 540, 541, 542, 544, 587, 588, 589, 591, 723, 724, 725, 727, 756, 757, 758, 760, 811, 813, 828, 829, 830, 831], "minim": [31, 32, 35, 36, 37, 38, 39, 40, 49, 50, 57, 58, 76, 77, 80, 81, 82, 83, 84, 85, 94, 95, 98, 99, 102, 103, 114, 125, 128, 195, 196, 197, 199, 274, 275, 276, 278, 287, 288, 289, 291, 336, 337, 338, 369, 370, 371, 497, 498, 499, 500, 502, 503, 504, 505, 512, 513, 514, 516, 540, 541, 542, 544, 587, 588, 589, 591, 723, 724, 725, 727, 756, 757, 758, 760, 811, 813, 828, 829, 830, 831], "dtype": [31, 32, 61, 62, 69, 70, 76, 77, 106, 107, 113, 115, 118, 123, 124, 130, 167, 168, 169, 170, 171, 172, 174, 175, 176, 179, 180, 181, 184, 185, 186, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 222, 223, 263, 273, 328, 331, 511, 519, 520, 564, 580, 623, 631, 722, 736, 739, 804, 805, 808, 809, 815, 817, 821, 822, 823, 835, 841, 844, 846, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 879, 880, 883, 888, 901, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 932, 933], "float32": [31, 32, 76, 77, 115, 123, 186, 190, 191, 195, 196, 197, 198, 199, 207, 804, 805, 808], "float64": [31, 32, 123, 186, 192, 195, 196, 198, 207], "true": [31, 32, 37, 38, 45, 46, 59, 60, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 117, 118, 122, 123, 125, 128, 130, 131, 132, 133, 156, 157, 164, 165, 167, 176, 186, 192, 195, 196, 197, 198, 199, 223, 242, 259, 263, 264, 273, 274, 276, 278, 279, 281, 283, 285, 287, 289, 291, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 315, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 335, 336, 338, 340, 342, 344, 346, 348, 350, 352, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 380, 381, 383, 384, 385, 387, 388, 389, 391, 392, 393, 395, 396, 397, 399, 400, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 432, 433, 435, 436, 437, 439, 443, 445, 447, 448, 450, 452, 454, 455, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 493, 495, 497, 498, 500, 502, 503, 505, 507, 509, 511, 512, 513, 514, 515, 516, 519, 520, 521, 522, 524, 525, 529, 536, 538, 540, 542, 544, 550, 551, 558, 573, 579, 581, 584, 585, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 623, 631, 636, 637, 639, 658, 660, 662, 664, 685, 686, 687, 700, 702, 706, 707, 709, 710, 711, 712, 714, 715, 716, 717, 719, 720, 721, 722, 723, 725, 727, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 761, 762, 764, 766, 768, 770, 772, 774, 776, 778, 780, 782, 783, 784, 785, 786, 787, 796, 797, 799, 805, 807, 809, 810, 815, 816, 818, 821, 822, 823, 825, 826, 827, 828, 829, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 851, 853, 854, 855, 857, 858, 859, 861, 862, 863, 865, 866, 867, 869, 870, 871, 873, 874, 875, 877, 878, 879, 880, 882, 883, 884, 886, 887, 910, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931], "arraywithdevic": [33, 130], "ab": [35, 36, 80, 81, 117, 120, 273, 278, 460, 463, 636, 700, 702, 888], "y": [35, 36, 37, 38, 49, 50, 57, 58, 71, 72, 80, 81, 82, 83, 94, 95, 98, 99, 102, 103, 113, 115, 119, 122, 128, 130, 156, 158, 159, 160, 161, 162, 163, 167, 174, 175, 178, 180, 181, 185, 186, 192, 223, 243, 257, 261, 266, 273, 274, 275, 276, 277, 278, 287, 288, 289, 290, 291, 292, 295, 304, 307, 312, 315, 316, 319, 328, 331, 332, 335, 336, 337, 338, 339, 340, 343, 344, 347, 361, 364, 369, 370, 371, 372, 381, 384, 441, 442, 448, 451, 452, 455, 468, 471, 484, 487, 488, 491, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 511, 512, 513, 514, 515, 516, 519, 520, 528, 529, 536, 537, 539, 540, 541, 542, 543, 544, 573, 579, 580, 581, 585, 596, 623, 629, 630, 632, 636, 637, 639, 640, 642, 643, 645, 655, 657, 672, 674, 691, 693, 694, 696, 706, 707, 710, 712, 715, 717, 720, 722, 723, 724, 725, 726, 727, 728, 731, 736, 739, 740, 743, 748, 751, 752, 755, 756, 757, 758, 759, 760, 761, 770, 773, 809, 810, 811, 812, 813, 814, 815, 817, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 835, 836, 839, 846, 847, 850, 851, 854, 867, 870, 871, 874, 879, 880, 883], "aco": [35, 36, 80, 81, 273, 888], "acosh": [35, 36, 80, 81, 186, 207, 208, 273, 888], "x2": [35, 36, 37, 38, 45, 46, 69, 70, 80, 81, 82, 83, 90, 91, 115, 126, 186, 218, 223, 261, 273, 287, 288, 289, 290, 291, 304, 305, 306, 307, 312, 313, 314, 315, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 348, 349, 350, 351, 352, 353, 354, 355, 356, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 397, 398, 399, 400, 401, 402, 403, 404, 421, 422, 423, 424, 425, 426, 427, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 452, 453, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 492, 493, 494, 495, 496, 511, 512, 513, 514, 515, 516, 623, 628, 636, 640, 641, 642, 658, 659, 660, 661, 672, 673, 674, 682, 683, 684, 691, 692, 693, 697, 698, 699, 821, 825], "z": [35, 36, 37, 38, 71, 72, 80, 81, 82, 83, 115, 119, 122, 128, 130, 223, 257, 273, 287, 288, 289, 290, 291, 312, 315, 332, 335, 381, 384, 441, 442, 511, 519, 520, 539, 540, 541, 542, 544, 573, 636, 640, 642, 706, 707, 710, 712, 715, 722, 723, 726, 821, 822, 846, 847, 850, 851, 854], "asin": [35, 36, 80, 81, 273, 888], "asinh": [35, 36, 80, 81, 273, 888], "atan": [35, 36, 80, 81, 273, 888], "atan2": [35, 36, 80, 81, 273, 888], "atanh": [35, 36, 80, 81, 273, 888], "bitwise_and": [35, 36, 80, 81, 273], "bitwise_invert": [35, 36, 80, 81, 273], "bitwise_left_shift": [35, 36, 80, 81, 273], "bitwise_or": [35, 36, 80, 81, 273], "bitwise_right_shift": [35, 36, 80, 81, 273], "bitwise_xor": [35, 36, 80, 81, 273], "ceil": [35, 36, 80, 81, 167, 168, 273, 888], "cosh": [35, 36, 80, 81, 273, 888], "divid": [35, 36, 69, 70, 80, 81, 115, 121, 273, 373, 376, 511, 575, 722, 761], "equal": [35, 36, 69, 70, 80, 81, 115, 122, 123, 167, 172, 174, 175, 186, 192, 273, 320, 323, 328, 331, 385, 388, 389, 392, 460, 463, 468, 471, 511, 512, 515, 519, 520, 636, 646, 648, 666, 668, 675, 677, 722, 723, 726, 732, 735, 761, 778, 781, 809, 815, 817, 826, 827, 828, 832, 834, 835, 836, 839, 841, 844, 846, 855, 858, 867, 870, 871, 874, 875, 878], "erf": [35, 36, 80, 81, 273], "exp": [35, 36, 80, 81, 273, 365, 368, 421, 424, 888], "expm1": [35, 36, 80, 81, 273], "floor": [35, 36, 80, 81, 273, 328, 331, 511, 537, 888], "floor_divid": [35, 36, 80, 81, 273], "greater": [35, 36, 69, 70, 80, 81, 273, 279, 282, 292, 295, 304, 307, 320, 323, 328, 331, 369, 372, 373, 376, 460, 463, 464, 467, 472, 475, 507, 510, 636, 640, 642, 722, 762, 765, 809, 815, 817], "greater_equ": [35, 36, 80, 81, 273], "isfinit": [35, 36, 80, 81, 273], "isinf": [35, 36, 80, 81, 273], "isnan": [35, 36, 80, 81, 273], "less_equ": [35, 36, 80, 81, 273], "log10": [35, 36, 80, 81, 273], "log1p": [35, 36, 80, 81, 273], "log2": [35, 36, 80, 81, 273], "logaddexp": [35, 36, 80, 81, 273], "logical_and": [35, 36, 80, 81, 273, 888], "logical_not": [35, 36, 80, 81, 273, 888], "logical_or": [35, 36, 80, 81, 273, 888], "logical_xor": [35, 36, 80, 81, 273], "multipli": [35, 36, 80, 81, 115, 119, 121, 273, 511, 529], "neg": [35, 36, 80, 81, 118, 122, 125, 156, 158, 167, 168, 172, 273, 385, 388, 389, 392, 443, 446, 460, 463, 464, 467, 636, 685, 687, 697, 699, 700, 702, 722, 740, 743, 756, 759, 879, 880, 883, 884, 887], "not_equ": [35, 36, 80, 81, 273], "pow": [35, 36, 80, 81, 273], "remaind": [35, 36, 69, 70, 80, 81, 273, 511, 537, 722, 761], "sin": [35, 36, 80, 81, 121, 128, 273, 511, 538, 888], "sinh": [35, 36, 80, 81, 273, 888], "sqrt": [35, 36, 80, 81, 273, 636, 700, 702], "squar": [35, 36, 80, 81, 273, 484, 487, 623, 626, 636, 637, 639, 643, 645, 649, 651, 652, 654, 655, 657, 665, 681, 682, 684, 685, 687], "subtract": [35, 36, 80, 81, 115, 121, 273], "tan": [35, 36, 80, 81, 114, 118, 122, 125, 126, 128, 273, 292, 295, 498, 826, 827, 835, 836, 839, 888], "56": [35, 36, 80, 81, 115, 273, 484, 487, 497, 498, 499, 500, 501, 585, 587, 590, 636, 672, 674, 846, 847, 850], "19": [35, 36, 80, 81, 115, 273, 332, 335, 497, 498, 499, 500, 501, 636, 646, 648], "tanh": [35, 36, 80, 81, 128, 156, 273, 503, 888], "762": [35, 36, 80, 81, 156, 163, 273, 502, 504, 505, 506], "964": [35, 36, 80, 81, 156, 163, 273, 502, 504, 505, 506], "trunc": [35, 36, 80, 81, 273], "elementwis": [36, 69, 70, 81, 113, 118, 128, 133, 274, 277, 279, 282, 283, 286, 287, 290, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 344, 347, 348, 351, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 442, 443, 446, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 496, 497, 501, 502, 506, 507, 510], "arraywithgener": [37, 130], "all_equ": [37, 38, 82, 83, 511, 516], "equality_matrix": [37, 38, 82, 83, 511, 512, 513, 514, 515, 516], "x1": [37, 38, 80, 81, 82, 83, 115, 126, 186, 218, 223, 261, 273, 287, 290, 291, 304, 307, 312, 315, 320, 323, 324, 327, 328, 331, 332, 335, 348, 351, 352, 353, 356, 373, 376, 377, 380, 381, 384, 397, 400, 401, 404, 421, 424, 425, 428, 433, 436, 437, 440, 441, 442, 443, 446, 447, 452, 455, 460, 463, 464, 467, 492, 493, 496, 511, 512, 513, 514, 515, 516, 519, 623, 628, 636, 640, 642, 658, 661, 672, 674, 682, 684, 691, 693, 697, 699, 821, 825], "mix": [37, 38, 71, 72, 112, 115, 117, 128, 186, 214, 223, 261, 273, 287, 290, 312, 315, 332, 335, 381, 384, 441, 442, 452, 455, 511, 512, 513, 528, 536, 539, 540, 543, 579, 580, 581, 623, 626, 629, 630, 635, 636, 691, 693, 706, 707, 710, 717, 720, 722, 723, 726, 804, 805, 808, 821, 825, 846, 847, 850, 855, 858], "gather_nd": [37, 38, 69, 70, 82, 83, 511, 544, 888], "arraywithgradi": [39, 130], "adam_step": [39, 40, 84, 85, 585, 591], "mw": [39, 40, 84, 85, 132, 585, 587, 588, 589, 590, 591, 592, 594], "vw": [39, 40, 84, 85, 132, 585, 587, 588, 589, 590, 591, 592, 594], "beta1": [39, 40, 84, 85, 132, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 605, 606, 607, 608, 926, 927, 928], "beta2": [39, 40, 84, 85, 132, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 605, 606, 607, 608, 926, 927, 928], "999": [39, 40, 80, 81, 84, 85, 132, 273, 502, 503, 505, 506, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 605, 606, 607, 608, 926, 927, 928], "epsilon": [39, 40, 47, 48, 51, 52, 84, 85, 92, 93, 96, 97, 118, 122, 125, 132, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 605, 606, 607, 608, 636, 666, 668, 675, 677, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 804, 805, 806, 807, 808, 924, 925, 926, 927, 928], "1e": [39, 40, 47, 48, 51, 52, 84, 85, 92, 93, 96, 97, 118, 122, 125, 132, 133, 511, 547, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 605, 606, 607, 608, 636, 685, 687, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 804, 805, 806, 807, 808, 888, 926, 927, 928, 929, 931], "07": [39, 40, 47, 48, 84, 85, 92, 93, 132, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 605, 606, 607, 608, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 926, 927, 928], "dcdw": [39, 40, 84, 85, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 605, 606, 607, 608, 609, 610, 611, 612], "adam_step_delta": [39, 40, 84, 85, 585, 587, 588, 589, 590, 591], "639": [39, 40, 585, 587, 588, 590], "11": [39, 40, 71, 72, 80, 81, 98, 99, 115, 122, 273, 287, 289, 290, 291, 312, 315, 468, 471, 511, 529, 539, 587, 588, 636, 646, 648, 672, 674, 706, 717, 720, 722, 740, 743, 748, 751, 809, 811, 812, 813, 821, 825, 826, 827, 846, 847, 850], "32": [39, 40, 131, 156, 158, 273, 332, 335, 587, 588, 623, 626, 629, 636, 672, 674, 821, 825, 846, 847, 850], "63": [39, 40, 273, 484, 487, 587, 588, 636, 637, 639, 672, 674, 846, 847, 850], "00121": [39, 40, 587, 588], "0102": [39, 40, 587, 588], "0397": [39, 40, 587, 588], "gradient": [40, 69, 70, 85, 113, 122, 131, 132, 144, 145, 223, 267, 587, 590, 592, 594, 596, 597, 599, 601, 603, 605, 607, 609, 611, 613, 615, 617, 618, 619, 620, 621, 622, 782, 783, 784, 785, 888, 926, 927, 928, 929, 930, 931], "arraywithimag": [41, 130], "arraywithlay": 43, "linear_algebra": [45, 46, 90, 91, 113, 130, 636, 637, 639, 640, 642, 643, 645, 646, 648, 649, 651, 652, 654, 655, 657, 658, 661, 662, 664, 665, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 699, 700, 702, 703, 705], "arraywithlinearalgebra": 45, "choleski": [45, 46, 71, 72, 636], "upper": [45, 46, 69, 70, 167, 172, 183, 636, 637, 638, 639, 678, 680, 809, 815, 817], "cross": [45, 46, 71, 72, 636, 706, 707, 710, 712, 715, 717, 720, 888], "axi": [45, 46, 47, 48, 49, 50, 59, 60, 61, 62, 63, 64, 69, 70, 92, 93, 94, 95, 104, 105, 106, 107, 108, 109, 115, 118, 122, 123, 125, 126, 128, 130, 133, 144, 156, 161, 167, 176, 177, 223, 225, 228, 235, 248, 249, 250, 251, 252, 253, 254, 255, 267, 511, 529, 530, 539, 583, 636, 640, 641, 642, 646, 648, 697, 698, 699, 700, 701, 702, 706, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 728, 729, 730, 731, 732, 735, 736, 737, 738, 739, 740, 741, 742, 743, 748, 749, 750, 751, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 773, 774, 777, 778, 781, 809, 820, 821, 822, 823, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887], "det": [45, 46, 71, 72, 636], "diagon": [45, 46, 71, 72, 167, 172, 182, 183, 636, 694, 696], "offset": [45, 46, 51, 52, 96, 97, 636, 646, 647, 648, 694, 695, 696, 804, 805, 806, 807, 808], "axis1": [45, 46, 49, 50, 94, 95, 636, 646, 647, 648, 722, 770, 771, 772, 773], "axis2": [45, 46, 636, 646, 647, 648], "eigh": [45, 46, 71, 72, 636], "namedtupl": [45, 46, 636, 649, 650, 651, 678, 679, 680, 685, 687, 826, 827, 828, 832], "eigvalsh": [45, 46, 71, 72, 636], "inv": [45, 46, 71, 72, 130, 636, 888], "matmul": [45, 46, 90, 91, 113, 119, 128, 636, 685, 687, 888], "matrix_norm": [45, 46, 69, 70, 636], "ord": [45, 46, 69, 70, 636, 662, 663, 664, 700, 701, 702], "fro": [45, 46, 636, 662, 663, 664], "keepdim": [45, 46, 61, 62, 63, 64, 69, 70, 106, 107, 108, 109, 511, 583, 636, 662, 663, 664, 700, 701, 702, 821, 822, 823, 846, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887], "matrix_rank": [45, 46, 71, 72, 636], "rtol": [45, 46, 636, 666, 667, 668, 675, 676, 677], "matrix_transpos": [45, 46, 71, 72, 130, 636], "outer": [45, 46, 71, 72, 636, 782, 783, 784, 785], "pinv": [45, 46, 71, 72, 636, 888], "qr": [45, 46, 71, 72, 636], "reduc": [45, 46, 69, 70, 130, 223, 267, 511, 534, 636, 678, 679, 680, 821, 822, 823, 846, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887], "solv": [45, 46, 71, 72, 129, 144, 636], "svd": [45, 46, 71, 72, 636, 888], "full_matric": [45, 46, 636, 685, 686, 687], "svdval": [45, 46, 71, 72, 636], "tensordot": [45, 46, 71, 72, 636], "ax": [45, 46, 49, 50, 69, 70, 94, 95, 113, 115, 123, 130, 223, 267, 511, 529, 636, 662, 664, 682, 684, 691, 692, 693, 700, 702, 722, 732, 735, 740, 743, 744, 745, 746, 747, 756, 759, 762, 765, 770, 773, 778, 781, 821, 822, 823, 846, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887], "trace": [45, 46, 69, 70, 71, 72, 128, 145, 511, 557, 558, 560, 636], "vecdot": [45, 46, 71, 72, 636], "vector_norm": [45, 46, 69, 70, 636], "vector_to_skew_symmetric_matrix": [45, 46, 71, 72, 636, 888], "arraywithloss": 47, "binary_cross_entropi": [47, 48, 92, 93, 706], "pred": [47, 48, 92, 93, 118, 122, 125, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721], "cross_entropi": [47, 48, 92, 93, 118, 122, 125, 706, 717, 720], "sparse_cross_entropi": [47, 48, 92, 93, 706], "loss": [48, 93, 113, 118, 131, 132, 133, 707, 710, 712, 715, 717, 720, 888], "arraywithmanipul": 49, "clip": [49, 50, 69, 70, 94, 95, 118, 122, 125, 128, 131, 133, 273, 441, 442, 511, 523, 524, 526, 722, 727, 888], "x_min": [49, 50, 69, 70, 94, 95, 128, 133, 722, 723, 724, 725, 726, 727], "x_max": [49, 50, 69, 70, 94, 95, 128, 133, 722, 723, 724, 725, 726, 727], "roll": [49, 50, 94, 95, 122, 126, 722, 723, 724, 760], "concat": [49, 50, 69, 70, 94, 95, 223, 252, 253, 254, 255, 267, 511, 538, 722, 888], "xs": [49, 50, 94, 95, 122, 223, 246, 250, 252, 253, 254, 511, 512, 515, 520, 585, 596, 722, 728, 729, 730, 731], "constant_pad": [49, 50, 94, 95, 722], "pad_width": [49, 50, 94, 95, 722, 732, 733, 734, 735, 778, 779, 780, 781], "expand_dim": [49, 50, 94, 95, 128, 131, 722, 888], "flip": [49, 50, 94, 95, 130, 131, 133, 273, 316, 319, 722, 748, 751, 888], "permute_dim": [49, 50, 94, 95, 722], "reshap": [49, 50, 69, 70, 94, 95, 125, 128, 130, 133, 722, 888], "shift": [49, 50, 94, 95, 115, 126, 273, 320, 323, 328, 331, 722, 756, 757, 758, 759, 760], "squeez": [49, 50, 94, 95, 722, 888], "stack": [49, 50, 69, 70, 94, 95, 128, 167, 182, 183, 636, 643, 645, 646, 648, 649, 651, 652, 654, 655, 657, 658, 661, 665, 666, 668, 669, 671, 675, 677, 678, 680, 685, 687, 688, 690, 694, 696, 722, 786, 787, 796, 797, 888, 910, 919], "swapax": [49, 50, 94, 95, 722], "axis0": [49, 50, 94, 95, 722, 770, 771, 772, 773], "tile": [49, 50, 94, 95, 722, 888], "rep": [49, 50, 94, 95, 722, 774, 775, 776, 777], "zero_pad": [49, 50, 94, 95, 722, 888], "arraywithnorm": 51, "layer_norm": [51, 52, 96, 97, 804], "normalized_idx": [51, 52, 96, 97, 804, 805, 806, 807, 808], "05": [51, 52, 96, 97, 223, 585, 587, 590, 804, 805, 806, 807, 808], "scale": [51, 52, 96, 97, 122, 223, 265, 266, 585, 609, 611, 623, 631, 634, 635, 804, 805, 806, 807, 808, 910, 918, 921, 926, 929], "new_std": [51, 52, 96, 97, 804, 805, 806, 807, 808, 924, 925], "norm": [52, 69, 70, 97, 113, 511, 523, 524, 526, 636, 662, 664, 700, 702, 805, 808, 888, 925, 926, 928], "arraywithrandom": [53, 130], "random": [54, 69, 70, 99, 113, 124, 133, 144, 810, 811, 812, 814, 815, 817, 819, 820, 888], "arraywithsearch": 55, "arraywithset": 57, "unique_count": [57, 58, 102, 103, 826, 829], "uc": [57, 58, 828, 830], "count": [57, 58, 115, 131, 223, 261, 636, 697, 699, 722, 740, 743, 826, 827, 828, 830, 832, 879, 880, 883, 884, 887], "arraywithsort": 59, "argsort": [59, 60, 104, 105, 835], "descend": [59, 60, 104, 105, 636, 685, 687, 688, 690, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845], "sort": [60, 69, 70, 71, 72, 73, 105, 113, 636, 649, 651, 685, 687, 688, 690, 836, 839], "arraywithstatist": 61, "einsum": [61, 62, 106, 107, 846], "equat": [61, 62, 106, 107, 636, 682, 684, 846, 847, 848, 849, 850], "max": [61, 62, 69, 70, 106, 107, 186, 206, 209, 273, 441, 511, 523, 524, 526, 534, 567, 568, 636, 666, 668, 675, 677, 846, 926, 928], "min": [61, 62, 69, 70, 106, 107, 186, 206, 209, 273, 442, 511, 534, 567, 568, 575, 636, 678, 680, 685, 687, 688, 690, 700, 702, 846], "prod": [61, 62, 69, 70, 106, 107, 115, 123, 511, 534, 846], "std": [61, 62, 106, 107, 115, 809, 814, 826, 827, 846], "sum": [61, 62, 69, 70, 106, 107, 118, 122, 123, 125, 128, 223, 252, 253, 254, 255, 267, 273, 287, 290, 421, 424, 511, 530, 534, 567, 568, 623, 635, 636, 685, 687, 694, 696, 700, 702, 846, 847, 850, 867, 870], "var": [61, 62, 106, 107, 110, 111, 115, 128, 782, 783, 784, 846], "statist": [62, 107, 110, 111, 113, 123, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878], "arraywithutil": 63, "util": [64, 109, 113, 124, 223, 256, 880, 883, 884, 887], "add_ivy_array_instance_method": 65, "cl": [65, 66, 110, 111], "to_ignor": [65, 66, 110, 111, 786, 797], "loop": [65, 66, 110, 111, 119, 145, 782, 783, 784, 785], "_wrap_funct": [65, 66, 110, 111, 118, 120], "toi": [65, 66, 110, 111], "arrayexampl": [65, 66], "hasattr": [65, 66, 110, 111, 130], "relu": [65, 66, 71, 72, 131, 132, 156, 157, 158, 888], "softmax": [65, 66, 71, 72, 156, 623, 634, 635, 888], "containerwithactiv": [67, 71, 72], "dict_in": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "queue": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 131, 223, 232, 233, 511, 566, 571], "queue_load_s": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "container_combine_method": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "list_join": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "queue_timeout": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 511], "print_limit": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "key_length_limit": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "print_ind": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "print_line_spac": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "ivyh": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "default_key_color": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "keyword_color_dict": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "rebuild_child_contain": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "types_to_iteratively_nest": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "alphabetical_kei": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "containerbas": [67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 122], "__getitem__": [69, 70, 122], "queri": [69, 70, 122, 123, 130, 223, 256, 266, 623, 634, 635, 910, 921], "slice": [69, 70, 511, 539, 540, 543, 786, 795], "chain": [69, 70, 121, 122, 132, 133, 145, 782, 783, 784, 786, 799, 932, 933], "element": [69, 70, 114, 128, 133, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 174, 175, 182, 183, 223, 246, 250, 254, 273, 274, 277, 279, 282, 283, 286, 287, 290, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 344, 347, 348, 351, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 442, 443, 446, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 496, 497, 501, 502, 506, 507, 510, 511, 519, 520, 523, 524, 526, 529, 530, 537, 551, 580, 581, 623, 631, 636, 640, 642, 649, 651, 658, 661, 678, 680, 685, 687, 722, 723, 726, 740, 743, 748, 751, 756, 759, 761, 762, 765, 809, 810, 821, 824, 825, 826, 827, 828, 832, 833, 834, 835, 841, 844, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887, 910, 918], "represent": [69, 70, 71, 72, 73, 144, 166, 186, 190, 191, 206, 209, 223, 239, 240, 273, 274, 277, 287, 290, 312, 315, 324, 327, 332, 335, 437, 440, 443, 446, 511, 517, 574, 579], "dictionari": [69, 70, 71, 72, 73, 131, 145, 223, 266], "sequenc": [69, 70, 71, 72, 73, 115, 123, 144, 164, 165, 223, 232, 233, 511, 520, 561, 722, 761, 766, 769, 809, 811, 812, 846, 851, 854, 910, 919, 924, 925, 932, 933], "multiprocess": [69, 70, 71, 72, 73, 131, 145, 223, 232, 511], "asynchron": [69, 70, 71, 72, 73], "size": [69, 70, 71, 72, 73, 130, 131, 167, 176, 177, 223, 265, 266, 267, 511, 567, 573, 623, 635, 636, 646, 648, 662, 664, 672, 674, 678, 680, 685, 687, 697, 699, 722, 736, 739, 756, 759, 761, 762, 765, 809, 810, 814, 815, 817, 821, 822, 824, 879, 880, 883, 884, 887, 910, 911, 912], "dimens": [69, 70, 71, 72, 73, 115, 128, 131, 156, 161, 167, 182, 183, 223, 254, 511, 533, 534, 535, 538, 548, 564, 583, 623, 624, 625, 626, 627, 628, 629, 630, 633, 636, 637, 639, 640, 642, 643, 645, 646, 648, 649, 651, 652, 654, 655, 657, 658, 661, 662, 664, 666, 668, 669, 671, 675, 677, 678, 680, 682, 684, 685, 687, 688, 690, 694, 696, 697, 699, 700, 702, 706, 712, 715, 717, 720, 722, 728, 731, 736, 739, 740, 743, 744, 747, 748, 751, 752, 755, 756, 759, 761, 762, 765, 766, 769, 782, 783, 784, 785, 809, 820, 821, 822, 823, 824, 826, 827, 828, 832, 834, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887, 910, 911, 912, 913, 914, 915, 916, 917, 920, 921], "arriv": [69, 70, 71, 72, 73], "timeout": [69, 70, 71, 72, 73, 223, 232, 233, 511, 566, 571], "maximum": [69, 70, 71, 72, 73, 115, 128, 131, 133, 223, 247, 251, 255, 267, 273, 511, 523, 524, 526, 538, 585, 605, 607, 722, 723, 726, 786, 798, 821, 822, 846, 851, 854, 859, 862, 888], "length": [69, 70, 71, 72, 73, 131, 167, 168, 178, 636, 685, 687, 688, 690, 722, 752, 755], "whitespac": [69, 70, 71, 72, 73], "indent": [69, 70, 71, 72, 73, 131], "extra": [69, 70, 71, 72, 73, 115, 120, 121, 128, 585, 596], "newlin": [69, 70, 71, 72, 73, 114], "handl": [69, 70, 71, 72, 73, 112, 117, 118, 120, 122, 123, 124, 125, 126, 132, 145, 164, 165, 223, 239, 240, 241, 242, 243, 257, 261, 262, 269, 272, 585, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615, 926, 927, 928, 929, 930, 931], "result": [69, 70, 71, 72, 73, 113, 114, 115, 117, 121, 122, 123, 125, 126, 131, 145, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 192, 194, 214, 223, 232, 268, 273, 274, 277, 279, 282, 283, 286, 287, 290, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 344, 347, 348, 351, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 442, 443, 446, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 496, 497, 501, 502, 506, 507, 510, 511, 523, 524, 526, 529, 530, 533, 534, 535, 537, 539, 540, 543, 551, 564, 567, 568, 585, 618, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 639, 640, 642, 643, 645, 646, 648, 652, 654, 655, 657, 658, 661, 662, 664, 666, 668, 669, 671, 672, 674, 675, 677, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 699, 700, 702, 703, 705, 706, 707, 710, 712, 715, 717, 720, 722, 723, 726, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 748, 751, 752, 755, 756, 759, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781, 786, 799, 804, 805, 808, 809, 810, 811, 812, 814, 815, 817, 820, 821, 822, 823, 825, 826, 827, 834, 835, 836, 839, 841, 844, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887, 888], "color": [69, 70, 71, 72, 73, 935, 936], "map": [69, 70, 71, 72, 73, 117, 118, 122, 126, 131, 144, 145, 223, 232, 786, 793, 794, 798, 799, 910, 921], "termcolor": [69, 70, 71, 72, 73], "rebuild": [69, 70, 71, 72, 73], "constructor": [69, 70, 71, 72, 73, 123, 124, 130, 511, 518, 932, 933], "param": [69, 70, 71, 72, 73, 82, 83, 128, 133, 511, 517, 539, 540, 543, 544], "alphabet": [69, 70, 71, 72, 73], "preserv": [69, 70, 71, 72, 73, 133, 145, 585, 618, 722, 740, 743], "__setitem__": [69, 70, 121, 122, 130], "val": [69, 70, 125, 130, 511, 553, 554, 555, 569, 570], "after": [69, 70, 115, 122, 123, 127, 186, 218, 273, 484, 487, 585, 592, 594, 596, 597, 599, 605, 607, 609, 611, 613, 615, 804, 805, 808, 926, 927, 928, 929, 930, 931], "all_fals": [69, 70], "assert_is_bool": [69, 70], "key_chain": [69, 70, 71, 72, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 195, 197, 199, 274, 276, 278, 279, 281, 283, 285, 287, 289, 291, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 443, 445, 447, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 493, 495, 497, 498, 500, 502, 503, 505, 507, 509, 512, 514, 516, 524, 525, 540, 542, 544, 592, 593, 595, 597, 598, 600, 601, 602, 604, 605, 606, 608, 609, 610, 612, 613, 614, 616, 658, 660, 707, 709, 711, 712, 714, 716, 717, 719, 721, 723, 725, 727, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 768, 770, 772, 774, 776, 778, 780, 786, 799, 805, 807, 811, 813, 815, 816, 818, 828, 829, 831, 836, 838, 840, 841, 843, 845, 847, 849, 851, 853, 855, 857, 859, 861, 863, 865, 867, 869, 871, 873, 875, 877, 880, 882, 884, 886], "to_appli": [69, 70, 71, 72, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 195, 197, 199, 274, 276, 278, 279, 281, 283, 285, 287, 289, 291, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 443, 445, 447, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 493, 495, 497, 498, 500, 502, 503, 505, 507, 509, 512, 514, 516, 524, 525, 540, 542, 544, 592, 593, 595, 597, 598, 600, 601, 602, 604, 605, 606, 608, 609, 610, 612, 613, 614, 616, 658, 660, 707, 709, 711, 712, 714, 716, 717, 719, 721, 723, 725, 727, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 768, 770, 772, 774, 776, 778, 780, 786, 799, 805, 807, 815, 816, 818, 828, 829, 831, 836, 838, 840, 841, 843, 845, 847, 849, 851, 853, 855, 857, 859, 861, 863, 865, 867, 869, 871, 873, 875, 877, 880, 882, 884, 886], "prune_unappli": [69, 70, 71, 72, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 195, 197, 199, 274, 276, 278, 279, 281, 283, 285, 287, 289, 291, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 443, 445, 447, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 493, 495, 497, 498, 500, 502, 503, 505, 507, 509, 512, 514, 516, 524, 525, 540, 542, 544, 592, 593, 595, 597, 598, 600, 601, 602, 604, 605, 606, 608, 609, 610, 612, 613, 614, 616, 658, 660, 707, 709, 711, 712, 714, 716, 717, 719, 721, 723, 725, 727, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 768, 770, 772, 774, 776, 778, 780, 786, 799, 805, 807, 815, 816, 818, 828, 829, 831, 836, 838, 840, 841, 843, 845, 847, 849, 851, 853, 855, 857, 859, 861, 863, 865, 867, 869, 871, 873, 875, 877, 880, 882, 884, 886], "map_sequ": [69, 70, 71, 72, 76, 77, 80, 81, 82, 83, 84, 85, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 195, 197, 199, 274, 276, 278, 279, 281, 283, 285, 287, 289, 291, 292, 294, 296, 298, 300, 302, 308, 310, 316, 318, 336, 338, 340, 342, 344, 346, 348, 350, 352, 357, 359, 361, 363, 365, 367, 369, 371, 385, 387, 389, 391, 393, 395, 405, 407, 409, 411, 413, 415, 417, 419, 429, 431, 443, 445, 447, 448, 450, 456, 458, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 493, 495, 497, 498, 500, 502, 503, 505, 507, 509, 512, 514, 516, 524, 525, 540, 542, 544, 592, 593, 595, 597, 598, 600, 601, 602, 604, 605, 606, 608, 609, 610, 612, 613, 614, 616, 707, 709, 711, 712, 714, 716, 717, 719, 721, 723, 725, 727, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 770, 772, 774, 776, 778, 780, 805, 807, 815, 816, 818, 828, 829, 831, 836, 838, 840, 841, 843, 845, 847, 849, 851, 853, 855, 857, 859, 861, 863, 865, 867, 869, 871, 873, 875, 877, 880, 882, 884, 886], "entri": [69, 70, 167, 176, 177, 722, 761, 786, 799], "boolean": [69, 70, 122, 167, 174, 186, 192, 210, 222, 223, 258, 270, 273, 312, 315, 316, 319, 324, 327, 332, 335, 425, 428, 429, 432, 433, 436, 437, 440, 511, 512, 515, 519, 520, 550, 551, 552, 556, 557, 558, 559, 560, 577, 584, 585, 601, 603, 782, 783, 784, 786, 796, 846, 859, 862], "evalu": [69, 70, 122, 273, 361, 364, 365, 368, 405, 408, 409, 412, 413, 416, 417, 420, 448, 451, 472, 475, 488, 491, 786, 787, 796, 797, 879, 880, 883, 884, 887], "assert": [69, 70, 130, 131, 511, 521], "prune": [69, 70, 786, 799, 800, 801], "all_key_chain": [69, 70], "include_empti": [69, 70], "all_tru": [69, 70, 122, 131], "arrays_as_list": [69, 70], "intermedi": [69, 70], "as_arrai": [69, 70, 511, 548, 573], "as_bool": [69, 70], "as_on": [69, 70], "ones": [69, 70, 71, 72, 117, 128, 130, 131, 167, 172, 181, 273, 336, 339, 511, 564, 888], "fill": [69, 70, 167, 170, 174, 175, 180, 181, 184, 185, 809, 811, 812], "as_random_uniform": [69, 70], "low": [69, 70, 98, 99, 128, 809, 811, 812, 813, 815, 816, 817, 818], "uniform": [69, 70, 132, 809, 810, 811, 812, 815, 817, 901, 903, 904, 907, 908], "boundari": [69, 70, 809, 815, 817], "interv": [69, 70, 128, 133, 167, 168, 176, 177, 636, 697, 699, 722, 723, 726, 766, 769, 809, 811, 812, 815, 817, 879, 880, 883, 884, 887], "as_vari": [69, 70], "as_zero": [69, 70], "assert_contains_sub_contain": [69, 70], "sub_cont": [69, 70], "except": [69, 70, 114, 121, 125, 130, 145, 186, 194, 511, 521, 532, 555, 582, 636, 675, 677, 722, 728, 731, 766, 769, 821, 824, 879, 880, 883, 884, 887], "diff": [69, 70, 122, 131], "screen": [69, 70, 131], "assert_contains_sub_structur": [69, 70], "check_shap": [69, 70], "assert_ident": [69, 70], "check_typ": [69, 70], "same_arrai": [69, 70, 131], "arrays_equ": [69, 70, 71, 72, 511], "datatyp": [69, 70, 167, 169, 179, 186, 200, 211, 212, 213], "assert_identical_structur": [69, 70], "at_key_chain": [69, 70], "ignore_key_error": [69, 70], "ignore_non": [69, 70], "at_kei": [69, 70], "ignor": [69, 70, 115, 145, 167, 178, 786, 797, 926, 930], "substr": [69, 70], "clip_min": [69, 70], "clip_max": [69, 70], "minimum": [69, 70, 128, 133, 223, 273, 274, 277, 511, 546, 547, 569, 570, 575, 576, 722, 723, 726, 821, 823, 846, 851, 854, 859, 862, 888], "config": [69, 70, 131, 786, 799], "duplic": [69, 70, 114, 119, 120, 130, 132], "compar": [69, 70, 117, 131, 511, 512, 515, 519, 520, 826, 827, 828, 832, 834, 835, 836, 839, 841, 844], "container_rightmost": [69, 70], "common_key_chain": [69, 70, 122], "properti": [69, 70, 115, 117, 118, 122, 130, 131, 132, 223, 235, 922, 923, 926, 927, 928, 929, 931], "contains_sub_contain": [69, 70], "match": [69, 70, 122, 186, 192, 273, 464, 467, 511, 561], "contains_sub_structur": [69, 70], "create_if_abs": [69, 70], "inplac": [69, 70, 84, 85, 112, 115, 120, 121, 126, 130, 132, 511, 521, 552, 555, 556, 577, 585, 592, 593, 594, 595, 597, 598, 599, 600, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 899, 900, 926, 927, 928, 929, 930, 931], "cutoff_at_depth": [69, 70], "depth_cutoff": [69, 70], "cutoff_at_height": [69, 70], "height_cutoff": [69, 70], "deep_copi": [69, 70, 131], "intern": [69, 70, 114, 121, 122, 124, 125, 223, 585, 621, 786, 787, 796, 797, 901, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 932, 933], "belong": [69, 70, 132], "dev_clon": [69, 70, 223], "dev_dist": [69, 70, 223], "along": [69, 70, 113, 125, 167, 176, 177, 223, 248, 249, 250, 251, 252, 253, 254, 255, 267, 511, 529, 530, 539, 583, 636, 662, 664, 694, 696, 697, 699, 700, 702, 706, 712, 715, 717, 720, 722, 728, 731, 740, 743, 748, 751, 756, 759, 761, 766, 769, 774, 777, 782, 783, 784, 785, 809, 820, 821, 822, 823, 835, 836, 839, 841, 844, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887], "dev_str": [69, 70], "diff_kei": [69, 70], "detect_key_diff": [69, 70], "detect_value_diff": [69, 70], "detect_shape_diff": [69, 70], "treat": [69, 70, 129, 133, 164, 165], "detect": [69, 70, 126, 131, 132, 786, 787, 797], "container0": [69, 70], "einops_rearrang": [69, 70, 511], "axes_length": [69, 70, 511, 533, 534, 535], "rearrang": [69, 70, 511, 533, 535], "einops_reduc": [69, 70, 511], "reduct": [69, 70, 123, 130, 511, 534, 567, 568, 879, 880, 883, 884, 887, 888], "One": [69, 70, 123, 128, 130, 131, 511, 534, 722, 752, 755, 809, 811, 812], "callabl": [69, 70, 122, 128, 146, 147, 148, 149, 150, 151, 152, 153, 154, 164, 165, 186, 207, 208, 223, 267, 511, 517, 522, 532, 534, 782, 783, 784, 785, 786, 792, 796, 797, 798], "einops_repeat": [69, 70, 511], "find_sub_contain": [69, 70], "sub_cont_to_find": [69, 70], "exsit": [69, 70], "find_sub_structur": [69, 70], "sub_struc_to_find": [69, 70], "flatten_key_chain": [69, 70, 131, 922, 923], "__": [69, 70, 115, 131], "above_height": [69, 70, 131], "below_depth": [69, 70, 131], "format_key_chain": [69, 70], "format_fn": [69, 70], "string": [69, 70, 119, 123, 124, 128, 131, 186, 190, 191, 204, 210, 222, 223, 239, 240, 241, 242, 256, 262, 268, 269, 272, 511, 531], "from_disk_as_hdf5": [69, 70, 131], "h5_obj_or_filepath": [69, 70], "slice_obj": [69, 70], "load": [69, 70, 145], "disk": [69, 70, 131], "h5py": [69, 70], "hdf5": [69, 70, 131, 922, 923], "h5": [69, 70], "from_disk_as_json": [69, 70, 131], "json_filepath": [69, 70], "json": [69, 70, 131], "dure": [69, 70, 118, 122, 123, 124, 125, 145, 164, 165, 223, 268, 511, 582, 585, 587, 590, 592, 594, 605, 607, 636, 658, 661, 782, 783, 784, 785, 846, 867, 870, 875, 878, 922, 923, 926, 927, 928, 930], "from_disk_as_pickl": [69, 70, 131], "pickle_filepath": [69, 70], "pickl": [69, 70, 122, 131], "from_flat_list": [69, 70], "flat_list": [69, 70], "hierarchi": [69, 70, 131], "flat": [69, 70, 511, 567, 722, 748, 751], "popul": [69, 70, 123, 124, 128, 809, 810, 846, 867, 870, 875, 878], "from_numpi": [69, 70, 131], "gather": [69, 70, 511, 540, 543], "h5_file_s": [69, 70], "batch": [69, 70, 118, 122, 131, 223, 265, 266, 511, 538, 623, 632, 636, 700, 702, 782, 783, 784, 785, 804, 805, 808, 924, 925], "handle_inplac": [69, 70], "prime": [69, 70], "overwritten": [69, 70, 119, 121], "has_kei": [69, 70], "query_kei": [69, 70], "somewher": [69, 70], "has_key_chain": [69, 70], "has_nan": [69, 70, 511], "include_inf": [69, 70, 511, 550, 584], "leafwis": [69, 70], "nan": [69, 70, 113, 114, 166, 186, 192, 273, 274, 277, 279, 282, 283, 286, 287, 290, 292, 295, 296, 299, 300, 303, 304, 307, 336, 339, 340, 343, 344, 347, 361, 364, 365, 368, 369, 372, 385, 388, 393, 396, 405, 408, 409, 412, 417, 420, 421, 424, 443, 446, 460, 463, 464, 467, 468, 471, 476, 479, 480, 483, 484, 487, 497, 501, 502, 506, 507, 510, 511, 550, 584, 623, 635, 826, 827, 828, 832, 834, 846, 851, 854, 855, 858, 859, 862, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887], "well": [69, 70, 117, 125, 132, 133, 144, 511, 550, 636, 682, 684], "inf": [69, 70, 166, 511, 550, 584, 636, 700, 702], "wise": [69, 70, 128, 133, 156, 157, 158, 159, 160, 161, 162, 163, 273, 274, 277, 279, 282, 287, 290, 292, 295, 300, 303, 304, 307, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 348, 351, 353, 356, 357, 360, 373, 376, 377, 380, 381, 384, 397, 400, 401, 404, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 442, 443, 446, 452, 455, 460, 463, 464, 467, 492, 496, 511, 537, 722, 723, 726], "identical_array_shap": [69, 70], "exclus": [69, 70, 84, 85, 118, 122, 133, 167, 168, 511, 529, 557, 558, 560, 585, 601, 602, 603, 604, 809, 811, 812], "identical_config": [69, 70], "identical_structur": [69, 70], "if_exist": [69, 70], "inplace_upd": [69, 70, 125, 511, 899, 900], "key_chains_contain": [69, 70], "sub_str": [69, 70], "join": [69, 70, 722, 728, 731, 766, 769, 888], "list_stack": [69, 70, 131], "dim": [69, 70, 123, 511, 564, 910, 921], "func": [69, 70, 122, 164, 165, 223, 267, 511, 522, 585, 596, 786, 799], "map_cont": [69, 70], "include_self": [69, 70], "possibi": [69, 70], "matrix": [69, 70, 167, 178, 182, 183, 511, 512, 515, 523, 623, 632, 636, 637, 639, 643, 645, 646, 648, 649, 651, 652, 654, 655, 657, 658, 661, 662, 664, 665, 666, 668, 669, 671, 675, 677, 678, 680, 682, 684, 685, 687, 688, 690, 694, 696, 703, 705, 910, 920], "integ": [69, 70, 122, 123, 130, 167, 168, 174, 186, 209, 212, 214, 273, 274, 277, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 369, 372, 373, 376, 437, 440, 460, 463, 464, 467, 468, 471, 507, 510, 636, 665, 697, 699, 700, 702, 722, 761, 809, 811, 812, 819, 846, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887], "flatten": [69, 70, 511, 538, 636, 672, 674, 700, 702, 722, 748, 751, 756, 759, 821, 822, 823, 826, 827, 828, 832, 834], "broadcast": [69, 70, 113, 114, 115, 122, 123, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 223, 268, 273, 274, 277, 279, 282, 283, 286, 287, 290, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 339, 340, 343, 344, 347, 348, 351, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 442, 443, 446, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 496, 497, 501, 502, 506, 507, 510, 511, 523, 524, 526, 529, 533, 534, 535, 537, 540, 543, 551, 564, 567, 568, 585, 618, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 639, 640, 642, 643, 645, 646, 648, 652, 654, 655, 657, 658, 661, 662, 664, 666, 668, 669, 671, 672, 674, 675, 677, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 699, 700, 702, 703, 705, 706, 707, 710, 712, 715, 717, 720, 722, 723, 726, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 748, 751, 752, 755, 756, 759, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781, 804, 805, 808, 809, 810, 811, 812, 814, 815, 817, 820, 821, 822, 823, 825, 826, 834, 835, 841, 844, 846, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887], "max_depth": [69, 70, 223, 227, 230, 237, 247, 251, 255, 511, 549, 786, 798], "multi_map": [69, 70, 122], "map_nest": [69, 70, 80, 81, 90, 91, 94, 95, 304, 306, 312, 314, 320, 322, 324, 326, 328, 330, 332, 334, 353, 355, 373, 375, 377, 379, 381, 383, 397, 399, 401, 403, 421, 423, 425, 427, 433, 435, 437, 439, 452, 454, 460, 462, 464, 466, 658, 660, 728, 730, 766, 768], "leftmost": [69, 70, 786, 799], "multi_map_in_static_method": [69, 70, 122], "fn_name": [69, 70], "num_arrai": [69, 70], "overwrite_at_key_chain": [69, 70], "overwrit": [69, 70, 125, 128, 223, 267], "target_dict": [69, 70], "return_dict": [69, 70], "prune_empti": [69, 70], "keep_non": [69, 70], "empti": [69, 70, 71, 72, 121, 123, 124, 167, 168, 846, 867, 870, 871, 874, 879, 880, 883, 884, 887], "prune_key_chain": [69, 70], "key1": [69, 70, 132], "key2": [69, 70], "key3": [69, 70], "prune_key_from_key_chain": [69, 70], "prune_kei": [69, 70], "prune_keys_from_key_chain": [69, 70], "remove_key_length_limit": [69, 70], "remove_print_limit": [69, 70], "reshape_lik": [69, 70], "leading_shap": [69, 70], "return_cont": [69, 70], "restructur": [69, 70], "keep_orig": [69, 70], "transpos": [69, 70, 130, 133, 223, 254, 623, 625, 627, 629, 636, 669, 671, 675, 677, 888, 910, 912, 914, 916], "restructure_key_chain": [69, 70], "keychain_map": [69, 70], "set_at_key_chain": [69, 70], "set_at_kei": [69, 70], "set_framework": [69, 70, 128, 130, 131, 133], "set_ivy_backend": [69, 70], "ivy_backend": [69, 70], "attribut": [69, 70, 114, 122, 123, 129, 130, 131, 132, 186, 206, 207, 208, 209, 223, 263], "show_sub_contain": [69, 70], "sub_cont_or_keychain": [69, 70], "shuffl": [69, 70, 809, 888], "seed_valu": [69, 70, 809, 819], "seed": [69, 70, 71, 72, 809, 888], "shuffle_h5_fil": [69, 70], "dataset": [69, 70, 131, 143, 888], "size_ordered_arrai": [69, 70], "keychain": [69, 70], "smallest": [69, 70, 186, 206, 209, 273, 336, 339], "largest": [69, 70, 144, 186, 206, 209, 636, 685, 687], "slice_kei": [69, 70], "key_slic": [69, 70], "all_depth": [69, 70], "slice_via_kei": [69, 70], "sort_by_kei": [69, 70], "num_or_size_split": [69, 70, 128, 722, 761], "with_remaind": [69, 70, 722, 761], "constitu": [69, 70, 133], "dimension": [69, 70, 167, 168, 172, 178, 636, 640, 642, 643, 645, 658, 661, 666, 668, 672, 674, 675, 677, 697, 699, 700, 702, 722, 761, 821, 822, 823, 824, 846, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887], "evenli": [69, 70, 167, 168, 176, 177, 722, 761], "store": [69, 70, 114, 119, 121, 122, 128, 130, 131, 132, 511, 538, 585, 621, 636, 694, 696, 722, 761, 922, 923], "stop_gradi": [69, 70, 71, 72, 84, 85, 132, 223, 267, 585, 592, 593, 594, 595, 597, 598, 599, 600, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 782, 783, 784, 785, 888, 926, 927, 928, 929, 930, 931], "preserve_typ": [69, 70, 585, 618], "stop": [69, 70, 128, 145, 167, 168, 176, 177, 223, 238, 267, 585, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615, 618, 782, 783, 784, 785, 926, 927, 928, 929, 930, 931], "structural_diff": [69, 70], "to_devic": [69, 70, 223, 242], "cuda": [69, 70, 128, 131, 145, 167, 176, 177, 223, 232, 239, 264, 511, 539, 540, 543, 564, 567, 568, 809, 810, 811, 812, 815, 817, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 932, 933], "target": [69, 70, 112, 127, 131, 132, 133, 223, 241, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 888], "to_dict": [69, 70], "to_disk_as_hdf5": [69, 70, 131], "starting_index": [69, 70], "max_batch_s": [69, 70], "w": [69, 70, 84, 85, 128, 131, 132, 511, 520, 585, 587, 590, 592, 594, 595, 597, 599, 600, 605, 607, 608, 609, 611, 612, 613, 615, 616, 623, 624, 625, 626, 627, 628, 629, 630], "later": [69, 70, 511, 522], "to_disk_as_json": [69, 70, 131], "to_disk_as_pickl": [69, 70, 131], "to_flat_list": [69, 70], "to_iter": [69, 70, 122], "leaf_keys_onli": [69, 70], "to_iterator_kei": [69, 70], "to_iterator_valu": [69, 70], "to_json": [69, 70], "to_list": [69, 70, 511, 888], "to_multi_dev": [69, 70], "multidevcontain": [69, 70, 71], "distributedarrai": [69, 70], "to_numpi": [69, 70, 131, 511, 888], "update_backend": [69, 70], "to_raw": [69, 70], "raw": [69, 70, 114], "trim_kei": [69, 70], "max_length": [69, 70], "try_kc": [69, 70], "tri": [69, 70], "self": [69, 70, 121, 122, 128, 130, 131, 132, 133, 195, 196, 197, 223, 274, 275, 276, 279, 280, 281, 283, 284, 285, 287, 288, 289, 292, 293, 294, 296, 297, 298, 300, 301, 302, 304, 305, 306, 308, 309, 310, 312, 313, 314, 316, 317, 318, 320, 321, 322, 324, 325, 326, 328, 329, 330, 332, 333, 334, 336, 337, 338, 340, 341, 342, 344, 345, 346, 348, 349, 350, 353, 354, 355, 357, 358, 359, 361, 362, 363, 365, 366, 367, 369, 370, 371, 373, 374, 375, 377, 378, 379, 381, 382, 383, 385, 386, 387, 389, 390, 391, 393, 394, 395, 397, 398, 399, 401, 402, 403, 405, 406, 407, 409, 410, 411, 413, 414, 415, 417, 418, 419, 421, 422, 423, 425, 426, 427, 429, 430, 431, 433, 434, 435, 437, 438, 439, 443, 444, 445, 448, 449, 450, 452, 453, 454, 456, 457, 458, 460, 461, 462, 464, 465, 466, 468, 469, 470, 472, 473, 474, 476, 477, 478, 480, 481, 482, 484, 485, 486, 488, 489, 490, 492, 494, 495, 497, 499, 500, 502, 504, 505, 507, 508, 509, 512, 513, 514, 524, 525, 540, 541, 542, 587, 588, 589, 592, 593, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 637, 638, 640, 641, 643, 644, 646, 647, 649, 650, 652, 653, 655, 656, 658, 659, 660, 662, 663, 666, 667, 669, 670, 672, 673, 675, 676, 678, 679, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 697, 698, 700, 701, 703, 704, 707, 708, 709, 712, 713, 714, 717, 718, 719, 723, 724, 725, 728, 729, 730, 732, 733, 734, 736, 737, 738, 740, 741, 742, 744, 745, 746, 748, 749, 750, 752, 753, 754, 756, 757, 758, 762, 763, 764, 766, 767, 768, 770, 771, 772, 774, 775, 776, 778, 779, 780, 805, 806, 807, 815, 816, 828, 830, 831, 836, 837, 838, 841, 842, 843, 847, 848, 849, 851, 852, 853, 855, 856, 857, 859, 860, 861, 863, 864, 865, 867, 868, 869, 871, 872, 873, 875, 876, 877, 880, 881, 882, 884, 885, 886, 888, 926, 930], "arbitrari": [69, 70, 117, 118, 122, 125, 126, 132, 145, 167, 178, 186, 193, 214, 223, 252, 253, 255], "concatten": [69, 70, 223, 252, 253, 254, 255, 267], "unstack": [69, 70, 128, 131, 511, 888], "dim_siz": [69, 70, 223], "update_config": [69, 70], "global_norm": [69, 70, 82, 83, 524, 525], "vector": [69, 70, 144, 167, 178, 511, 524, 526, 623, 632, 636, 640, 642, 649, 651, 658, 661, 672, 674, 685, 687, 688, 690, 697, 699, 700, 702, 703, 705, 910, 920], "with_default_key_color": [69, 70], "with_entries_as_list": [69, 70], "with_ivy_backend": [69, 70], "with_key_length_limit": [69, 70, 131], "with_print_ind": [69, 70, 131], "with_print_limit": [69, 70, 131], "with_print_line_spac": [69, 70], "containerwithcr": [71, 72, 74], "containerwithdatatyp": [71, 72, 76], "containerwithdevic": [71, 72, 78], "containerwithelementwis": [71, 72, 80, 122], "containerwithgener": [71, 72, 82], "containerwithgradi": [71, 72, 84], "containerwithimag": [71, 72, 86], "containerwithlay": [71, 72, 88], "containerwithlinearalgebra": [71, 72, 90], "containerwithloss": [71, 72, 92], "containerwithnorm": [71, 72, 96], "containerwithrandom": [71, 72, 98], "containerwithsearch": [71, 72, 100], "containerwithset": [71, 72, 102], "containerwithsort": [71, 72, 104], "containerwithstatist": [71, 72, 106], "containerwithutil": [71, 72, 108], "__add__": [71, 72, 114, 115, 121, 122, 126, 130], "__radd__": [71, 72, 114, 115], "arang": [71, 72, 123, 167, 176, 177, 846, 847, 850, 888], "arg_info": [71, 72, 511], "arg_nam": [71, 72, 511], "argmax": [71, 72, 821, 888], "argmin": [71, 72, 821, 888], "array_equ": [71, 72, 511], "as_ivy_dev": [71, 72, 130, 223], "as_ivy_dtyp": [71, 72, 186], "as_native_dev": [71, 72, 223], "as_native_dtyp": [71, 72, 186], "asarrai": [71, 72, 125, 167, 623, 624, 826, 828, 832], "assert_supports_inplac": [71, 72, 511], "astyp": [71, 72, 123, 125, 186], "broadcast_arrai": [71, 72, 186], "broadcast_to": [71, 72, 123, 186], "cache_fn": [71, 72, 118, 511], "clear_mem_on_dev": [71, 72, 223], "clip_matrix_norm": [71, 72, 511], "closest_valid_dtyp": [71, 72, 186], "container_typ": [71, 72, 511], "conv1d": [71, 72, 623, 910], "conv1d_transpos": [71, 72, 623], "conv2d": [71, 72, 623, 888, 910], "conv2d_transpos": [71, 72, 623], "conv3d": [71, 72, 623, 910], "conv3d_transpos": [71, 72, 623], "copy_arrai": [71, 72, 511], "cumprod": [71, 72, 133, 511], "cumsum": [71, 72, 511, 888], "current_backend_str": [71, 72, 511], "default_devic": [71, 72, 124, 128, 223, 261, 264, 271], "default_dtyp": [71, 72, 118, 123, 186], "default_float_dtyp": [71, 72, 123, 186], "default_int_dtyp": [71, 72, 123, 186], "depthwise_conv2d": [71, 72, 623, 888], "dev_clone_arrai": [71, 72, 223], "dev_clone_it": [71, 72, 223], "dev_clone_nest": [71, 72, 223], "dev_dist_arrai": [71, 72, 223], "dev_dist_it": [71, 72, 223], "dev_dist_nest": [71, 72, 223], "dev_unifi": [71, 72, 223], "dev_unify_arrai": [71, 72, 223], "dev_unify_it": [71, 72, 223], "dev_unify_nest": [71, 72, 223], "dev_util": [71, 72, 124, 223], "dropout": [71, 72, 131, 623, 910, 921], "dtype_bit": [71, 72, 186], "empty_lik": [71, 72, 167], "execute_with_gradi": [71, 72, 122, 131, 132, 133, 145, 585, 888], "ey": [71, 72, 133, 167, 623, 626, 630], "finfo": [71, 72, 186], "floormod": [71, 72, 511, 888], "fourier_encod": [71, 72, 511], "from_dlpack": [71, 72, 167], "full_lik": [71, 72, 167], "function_supported_dtyp": [71, 72, 186], "function_unsupported_dtyp": [71, 72, 186], "gelu": [71, 72, 156, 896], "get_all_arrays_in_memori": [71, 72, 511], "get_all_ivy_arrays_on_dev": [71, 72, 124, 223], "get_min_bas": [71, 72, 511], "get_min_denomin": [71, 72, 511], "get_num_dim": [71, 72, 511, 888], "get_referrers_recurs": [71, 72, 511], "gpu_is_avail": [71, 72, 223], "handle_nest": [71, 72, 118, 122, 146], "handle_out_argu": [71, 72, 120, 123, 124, 125, 126, 146], "iinfo": [71, 72, 186], "indices_wher": [71, 72, 511, 888], "infer_devic": [71, 72, 123, 124, 126, 146], "infer_dtyp": [71, 72, 123, 124, 126, 146], "inplace_arrays_support": [71, 72, 511], "inplace_decr": [71, 72, 511], "inplace_incr": [71, 72, 511], "inplace_variables_support": [71, 72, 511], "inputs_to_native_arrai": [71, 72, 121, 146], "invalid_dtyp": [71, 72, 186], "is_float_dtyp": [71, 72, 186], "is_int_dtyp": [71, 72, 186, 511, 581], "is_ivy_contain": [71, 72, 511], "leaky_relu": [71, 72, 156, 888], "linear": [71, 72, 114, 128, 131, 132, 133, 156, 157, 158, 159, 511, 538, 623, 631, 682, 684, 888, 910, 911, 912, 913, 914, 915, 916, 917], "linspac": [71, 72, 128, 167, 168, 888], "logspac": [71, 72, 128, 167], "lstm_updat": [71, 72, 128, 623], "match_kwarg": [71, 72, 511], "matrix_pow": [71, 72, 636], "meshgrid": [71, 72, 167], "multi_head_attent": [71, 72, 122, 125, 623], "multinomi": [71, 72, 809], "nonzero": [71, 72, 273, 287, 290, 443, 446, 821], "num_arrays_in_memori": [71, 72, 511], "num_cpu_cor": [71, 72, 124, 223], "num_gpu": [71, 72, 117, 124, 223], "num_ivy_arrays_on_dev": [71, 72, 223], "one_hot": [71, 72, 133, 511, 888], "ones_lik": [71, 72, 133, 167, 888], "outputs_to_ivy_arrai": [71, 72, 121, 123, 124, 126, 146], "percent_used_mem_on_dev": [71, 72, 223], "print_all_arrays_in_memori": [71, 72, 511], "print_all_ivy_arrays_on_dev": [71, 72, 223], "promote_typ": [71, 72, 186], "randint": [71, 72, 98, 99, 809, 813, 888], "random_norm": [71, 72, 623, 626, 629, 630, 636, 685, 687, 809, 826, 827], "result_typ": [71, 72, 123, 186], "scaled_dot_product_attent": [71, 72, 623], "scatter_flat": [71, 72, 511], "scatter_nd": [71, 72, 130, 511, 888], "set_default_devic": [71, 72, 124, 223, 271], "set_default_dtyp": [71, 72, 118, 123, 186], "set_default_float_dtyp": [71, 72, 123, 186], "set_default_int_dtyp": [71, 72, 123, 186], "set_min_bas": [71, 72, 511], "set_min_denomin": [71, 72, 511], "set_queue_timeout": [71, 72, 511], "set_split_factor": [71, 72, 223], "set_tmp_dir": [71, 72, 511], "set_with_grad": [71, 72, 585], "shape_to_tupl": [71, 72, 123, 511], "sigmoid": [71, 72, 128, 131, 132, 156, 888], "slogdet": [71, 72, 636], "softplu": [71, 72, 156, 888], "split_factor": [71, 72, 223, 232], "split_func_cal": [71, 72, 223], "stable_divid": [71, 72, 118, 511], "stable_pow": [71, 72, 511], "static_aco": [71, 72], "static_acosh": [71, 72], "static_al": [71, 72], "static_ani": [71, 72], "static_arang": [71, 72], "static_arg_info": [71, 72], "static_arg_nam": [71, 72], "static_argmax": [71, 72], "static_argmin": [71, 72], "static_arrai": [71, 72], "static_array_equ": [71, 72], "static_arrays_equ": [71, 72], "static_as_ivy_dev": [71, 72], "static_as_ivy_dtyp": [71, 72], "static_as_native_dev": [71, 72], "static_as_native_dtyp": [71, 72], "static_asarrai": [71, 72], "static_asin": [71, 72], "static_asinh": [71, 72], "static_assert_supports_inplac": [71, 72], "static_astyp": [71, 72], "static_atan": [71, 72], "static_atan2": [71, 72], "static_atanh": [71, 72], "static_bitwise_and": [71, 72], "static_bitwise_invert": [71, 72], "static_bitwise_left_shift": [71, 72], "static_bitwise_or": [71, 72], "static_bitwise_right_shift": [71, 72], "static_bitwise_xor": [71, 72], "static_broadcast_arrai": [71, 72], "static_broadcast_to": [71, 72], "static_cache_fn": [71, 72], "static_ceil": [71, 72], "static_choleski": [71, 72], "static_clear_mem_on_dev": [71, 72], "static_clip_matrix_norm": [71, 72], "static_clip_vector_norm": [71, 72], "static_closest_valid_dtyp": [71, 72], "static_concat": [71, 72], "static_constant_pad": [71, 72], "static_container_typ": [71, 72], "static_conv1d": [71, 72], "static_conv1d_transpos": [71, 72], "static_conv2d": [71, 72], "static_conv2d_transpos": [71, 72], "static_conv3d": [71, 72], "static_conv3d_transpos": [71, 72], "static_copy_arrai": [71, 72], "static_co": [71, 72], "static_cosh": [71, 72], "static_cross": [71, 72], "static_cumprod": [71, 72], "static_cumsum": [71, 72], "static_current_backend": [71, 72], "static_current_backend_str": [71, 72], "static_default": [71, 72], "static_default_devic": [71, 72], "static_default_dtyp": [71, 72], "static_default_float_dtyp": [71, 72], "static_default_int_dtyp": [71, 72], "static_depthwise_conv2d": [71, 72], "static_det": [71, 72], "static_dev": [71, 72], "static_dev_clon": [71, 72], "static_dev_clone_arrai": [71, 72], "static_dev_clone_it": [71, 72], "static_dev_clone_nest": [71, 72], "static_dev_dist": [71, 72], "static_dev_dist_arrai": [71, 72], "static_dev_dist_it": [71, 72], "static_dev_dist_nest": [71, 72], "static_dev_unifi": [71, 72], "static_dev_unify_arrai": [71, 72], "static_dev_unify_it": [71, 72], "static_dev_unify_nest": [71, 72], "static_dev_util": [71, 72], "static_diagon": [71, 72], "static_dropout": [71, 72], "static_dtyp": [71, 72], "static_dtype_bit": [71, 72], "static_eigh": [71, 72], "static_eigvalsh": [71, 72], "static_einops_rearrang": [71, 72], "static_einops_reduc": [71, 72], "static_einops_repeat": [71, 72], "static_einsum": [71, 72], "static_empti": [71, 72], "static_empty_lik": [71, 72], "static_equ": [71, 72], "static_erf": [71, 72], "static_execute_with_gradi": [71, 72], "static_exist": [71, 72], "static_exp": [71, 72], "static_expand_dim": [71, 72], "static_expm1": [71, 72], "static_ey": [71, 72], "static_finfo": [71, 72], "static_flip": [71, 72], "static_floor": [71, 72], "static_floor_divid": [71, 72], "static_floormod": [71, 72], "static_fourier_encod": [71, 72], "static_from_dlpack": [71, 72], "static_ful": [71, 72], "static_full_lik": [71, 72], "static_function_supported_dtyp": [71, 72], "static_function_unsupported_dtyp": [71, 72], "static_gath": [71, 72], "static_gelu": [71, 72], "static_get_all_arrays_in_memori": [71, 72], "static_get_all_ivy_arrays_on_dev": [71, 72], "static_get_min_bas": [71, 72], "static_get_min_denomin": [71, 72], "static_get_num_dim": [71, 72], "static_get_referrers_recurs": [71, 72], "static_gpu_is_avail": [71, 72], "static_great": [71, 72], "static_greater_equ": [71, 72], "static_handle_nest": [71, 72], "static_handle_out_argu": [71, 72], "static_has_nan": [71, 72], "static_iinfo": [71, 72], "static_indices_wher": [71, 72], "static_infer_devic": [71, 72], "static_infer_dtyp": [71, 72], "static_inplace_arrays_support": [71, 72], "static_inplace_decr": [71, 72], "static_inplace_incr": [71, 72], "static_inplace_upd": [71, 72], "static_inplace_variables_support": [71, 72], "static_inputs_to_native_arrai": [71, 72], "static_inv": [71, 72], "static_invalid_dtyp": [71, 72], "static_is_arrai": [71, 72], "static_is_float_dtyp": [71, 72], "static_is_int_dtyp": [71, 72], "static_is_ivy_arrai": [71, 72], "static_is_ivy_contain": [71, 72], "static_is_native_arrai": [71, 72], "static_isfinit": [71, 72], "static_isinf": [71, 72], "static_isnan": [71, 72], "static_layer_norm": [71, 72], "static_leaky_relu": [71, 72], "static_less": [71, 72], "static_less_equ": [71, 72], "static_linear": [71, 72], "static_linspac": [71, 72], "static_log": [71, 72], "static_log10": [71, 72], "static_log1p": [71, 72], "static_log2": [71, 72], "static_logaddexp": [71, 72], "static_logical_and": [71, 72], "static_logical_not": [71, 72], "static_logical_or": [71, 72], "static_logical_xor": [71, 72], "static_logspac": [71, 72], "static_lstm_upd": [71, 72], "static_match_kwarg": [71, 72], "static_matmul": [71, 72], "static_matrix_norm": [71, 72], "static_matrix_pow": [71, 72], "static_matrix_rank": [71, 72], "static_matrix_transpos": [71, 72], "static_max": [71, 72], "static_maximum": [71, 72], "static_mean": [71, 72], "static_meshgrid": [71, 72], "static_min": [71, 72], "static_minimum": [71, 72], "static_multi_head_attent": [71, 72], "static_multinomi": [71, 72], "static_multiprocess": [71, 72], "static_native_arrai": [71, 72], "static_neg": [71, 72], "static_nonzero": [71, 72], "static_not_equ": [71, 72], "static_num_arrays_in_memori": [71, 72], "static_num_cpu_cor": [71, 72], "static_num_gpu": [71, 72], "static_num_ivy_arrays_on_dev": [71, 72], "static_one_hot": [71, 72], "static_on": [71, 72], "static_ones_lik": [71, 72], "static_out": [71, 72], "static_outputs_to_ivy_arrai": [71, 72], "static_percent_used_mem_on_dev": [71, 72], "static_permute_dim": [71, 72], "static_pinv": [71, 72], "static_posit": [71, 72], "static_pow": [71, 72], "static_print_all_arrays_in_memori": [71, 72], "static_print_all_ivy_arrays_on_dev": [71, 72], "static_prod": [71, 72], "static_promote_typ": [71, 72], "static_qr": [71, 72], "static_queue_timeout": [71, 72], "static_random_norm": [71, 72], "static_relu": [71, 72], "static_remaind": [71, 72], "static_repeat": [71, 72], "static_reshap": [71, 72], "static_result_typ": [71, 72], "static_round": [71, 72], "static_scaled_dot_product_attent": [71, 72], "static_scatter_flat": [71, 72], "static_scatter_nd": [71, 72], "static_se": [71, 72], "static_set_default_devic": [71, 72], "static_set_default_dtyp": [71, 72], "static_set_default_float_dtyp": [71, 72], "static_set_default_int_dtyp": [71, 72], "static_set_min_bas": [71, 72], "static_set_min_denomin": [71, 72], "static_set_queue_timeout": [71, 72], "static_set_split_factor": [71, 72], "static_set_tmp_dir": [71, 72], "static_set_with_grad": [71, 72], "static_shap": [71, 72], "static_shape_to_tupl": [71, 72], "static_shuffl": [71, 72], "static_sigmoid": [71, 72], "static_sign": [71, 72], "static_sin": [71, 72], "static_sinh": [71, 72], "static_slogdet": [71, 72], "static_softmax": [71, 72], "static_softplu": [71, 72], "static_solv": [71, 72], "static_split": [71, 72], "static_split_factor": [71, 72], "static_split_func_cal": [71, 72], "static_sqrt": [71, 72], "static_squar": [71, 72], "static_squeez": [71, 72], "static_stable_divid": [71, 72], "static_stable_pow": [71, 72], "static_stack": [71, 72], "static_std": [71, 72], "static_stop_gradi": [71, 72], "static_sum": [71, 72], "static_supports_inplac": [71, 72], "static_svd": [71, 72], "static_svdv": [71, 72], "static_swapax": [71, 72], "static_tensordot": [71, 72], "static_til": [71, 72], "static_tmp_dir": [71, 72], "static_to_devic": [71, 72], "static_to_list": [71, 72], "static_to_native_arrays_and_back": [71, 72], "static_to_numpi": [71, 72], "static_to_scalar": [71, 72], "static_total_mem_on_dev": [71, 72], "static_tpu_is_avail": [71, 72], "static_trac": [71, 72], "static_tril": [71, 72], "static_triu": [71, 72], "static_trunc": [71, 72], "static_try_else_non": [71, 72], "static_type_promote_arrai": [71, 72], "static_unique_al": [71, 72], "static_unique_invers": [71, 72], "static_unique_valu": [71, 72], "static_unset_default_devic": [71, 72], "static_unset_default_dtyp": [71, 72], "static_unset_default_float_dtyp": [71, 72], "static_unset_default_int_dtyp": [71, 72], "static_unset_with_grad": [71, 72], "static_unstack": [71, 72], "static_used_mem_on_dev": [71, 72], "static_valid_dtyp": [71, 72], "static_value_is_nan": [71, 72], "static_var": [71, 72], "static_vari": [71, 72], "static_variable_data": [71, 72], "static_vecdot": [71, 72], "static_vector_norm": [71, 72], "static_vector_to_skew_symmetric_matrix": [71, 72], "static_wher": [71, 72], "static_with_grad": [71, 72], "static_zero_pad": [71, 72], "static_zero": [71, 72], "static_zeros_lik": [71, 72], "supports_inplac": [71, 72, 511], "tmp_dir": [71, 72, 511], "to_native_arrays_and_back": [71, 72, 120, 126, 146], "to_scalar": [71, 72, 511], "total_mem_on_dev": [71, 72, 124, 223], "tpu_is_avail": [71, 72, 223], "tril": [71, 72, 167], "triu": [71, 72, 167], "try_else_non": [71, 72, 511], "type_promote_arrai": [71, 72, 186], "unique_al": [71, 72, 826], "unique_invers": [71, 72, 826], "unique_valu": [71, 72, 826], "unset_default_devic": [71, 72, 223], "unset_default_dtyp": [71, 72, 186], "unset_default_float_dtyp": [71, 72, 186], "unset_default_int_dtyp": [71, 72, 186], "unset_with_grad": [71, 72, 585], "used_mem_on_dev": [71, 72, 223], "valid_dtyp": [71, 72, 186], "value_is_nan": [71, 72, 511], "variable_data": [71, 72, 585], "with_grad": [71, 72, 585, 617], "zeros_lik": [71, 72, 167, 722, 723, 726, 888], "at_dev": [71, 73, 223, 236, 237], "int32": [76, 77, 123, 186, 195, 197, 198, 199, 207, 511, 580, 722, 736, 739, 846, 863, 866, 871, 874], "int64": [76, 77, 123, 186, 195, 197, 198, 199, 207, 273, 328, 331, 821, 822, 823, 846, 863, 866, 871, 874], "static_can_cast": [76, 77, 195], "from_": [76, 77, 186, 195, 198, 199], "static_ab": [80, 81, 274], "static_add": [80, 81, 114, 115, 122, 287], "static_divid": [80, 81, 122, 348], "static_multipli": [80, 81, 122, 443], "static_subtract": [80, 81, 122, 492], "static_tan": [80, 81, 115, 122, 497], "143": [80, 81, 115, 273, 497, 498, 500, 501], "38": [80, 81, 115, 273, 497, 498, 500, 501], "static_tanh": [80, 81, 502], "76": [80, 81, 273, 344, 347, 502, 503, 585, 587, 590, 636, 691, 693, 846, 847, 850], "96": [80, 81, 273, 497, 501, 502, 503, 585, 587, 590, 636, 672, 674, 846, 847, 850], "995": [80, 81, 273, 502, 503, 505, 506], "9999": [80, 81, 502, 503], "static_all_equ": [82, 83, 512, 514], "clip_vector_norm": [82, 83, 511], "max_norm": [82, 83, 511, 523, 524, 525, 526], "static_gather_nd": [82, 83, 540], "adam_upd": [84, 85, 132, 585], "lr": [84, 85, 131, 132, 585, 592, 593, 594, 595, 597, 598, 599, 600, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 926, 927, 928, 929, 930, 931], "mw_tm1": [84, 85, 585, 592, 593, 594, 595, 605, 606, 607, 608], "vw_tm1": [84, 85, 585, 592, 593, 594, 595, 605, 606, 607, 608], "gradient_descent_upd": [84, 85, 585, 782, 783, 784, 785, 888], "is_vari": [84, 85, 125, 585], "lamb_upd": [84, 85, 585], "max_trust_ratio": [84, 85, 585, 605, 606, 607, 608, 926, 928], "decay_lambda": [84, 85, 585, 605, 606, 607, 608, 609, 610, 611, 612, 926, 928, 929], "lars_upd": [84, 85, 585], "optimizer_upd": [84, 85, 585], "effective_grad": [84, 85, 585, 613, 614, 615, 616], "static_adam_step": [84, 85, 587], "87": [84, 85, 98, 99, 585, 587, 590, 591, 811, 813], "976": [84, 85, 273, 502, 506, 585, 587, 590, 591], "static_adam_upd": [84, 85, 592], "static_gradient_descent_upd": [84, 85, 597], "static_is_vari": [84, 85, 601], "static_lamb_upd": [84, 85, 605], "static_lars_upd": [84, 85, 609], "static_optimizer_upd": [84, 85, 613], "static_binary_cross_entropi": [92, 93, 707], "static_cross_entropi": [92, 93, 712], "static_sparse_cross_entropi": [92, 93, 717], "static_clip": [94, 95, 723], "static_rol": [94, 95, 115, 122, 723, 727, 756], "random_uniform": [98, 99, 124, 132, 809, 888], "static_randint": [98, 99, 811], "20": [98, 99, 130, 273, 332, 335, 361, 364, 468, 471, 484, 487, 636, 646, 648, 672, 674, 691, 693, 809, 811, 812, 813, 821, 824, 825, 846, 847, 850], "40": [98, 99, 273, 344, 347, 484, 487, 636, 672, 674, 811, 813, 846, 847, 850], "62": [98, 99, 811, 813], "52": [98, 99, 585, 587, 590, 636, 672, 674, 811, 813, 826, 827, 846, 847, 850], "95": [98, 99, 585, 587, 590, 811, 813], "37": [98, 99, 273, 497, 501, 804, 805, 808, 811, 813], "42": [98, 99, 133, 156, 162, 585, 587, 590, 636, 672, 674, 809, 811, 813, 819, 846, 847, 850], "13": [98, 99, 115, 122, 273, 312, 315, 332, 335, 344, 347, 484, 487, 511, 529, 585, 587, 590, 623, 635, 636, 646, 648, 672, 674, 804, 805, 808, 811, 813, 821, 825, 826, 827, 846, 847, 850], "static_random_uniform": [98, 99, 815], "static_unique_count": [102, 103, 828], "classivi": [102, 103, 722, 761, 826, 828, 829, 831, 832], "static_argsort": [104, 105, 836], "static_sort": [104, 105, 841], "add_ivy_container_instance_method": 110, "containerexampl": [110, 111], "who": [112, 127, 145], "mainli": [112, 129, 131], "under": [112, 114, 115, 116, 117, 118, 122, 127, 128, 131, 133], "hood": [112, 115, 117, 118, 122, 127, 128, 131, 133], "weed": [112, 127], "behind": [112, 127, 129, 585, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615], "tour": 112, "primari": [112, 117, 119, 125, 145], "composit": [112, 117, 119, 121, 122, 125, 128, 132, 133, 145], "nestabl": [112, 114, 115, 117, 125, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 195, 198, 273, 274, 277, 287, 290, 292, 295, 336, 339, 369, 372, 452, 455, 484, 487, 488, 491, 497, 501, 511, 539, 623, 626, 635, 722, 756, 759, 804, 805, 808, 826, 828, 832, 846, 851, 854, 879, 880, 883], "dynam": [112, 123, 124, 125, 128, 164, 165], "runtim": [112, 117, 223], "h": [112, 122, 623, 626, 627, 628, 629, 630], "j": [112, 511, 519, 520, 636, 694, 696, 846, 847, 850], "k": [112, 128, 167, 172, 182, 183, 511, 519, 623, 635, 636, 658, 661, 678, 680, 682, 684, 685, 687, 688, 690, 694, 696, 809, 814, 815, 817, 821, 824], "borrow": 112, "n": [112, 167, 178, 182, 183, 511, 520, 623, 631, 636, 646, 648, 658, 661, 665, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 685, 687, 688, 690, 694, 696, 697, 699, 700, 702, 703, 705, 722, 732, 735, 736, 739, 744, 747, 766, 769, 778, 781, 809, 814, 815, 817, 821, 824, 846, 855, 858, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887], "taken": [113, 133, 636, 646, 648], "constant": [113, 118, 132, 133, 145, 223, 232, 233, 722, 732, 735, 786, 792, 804, 805, 808, 901, 902, 906, 909, 922, 923, 924, 925], "compil": [113, 122, 127, 129, 145, 888, 922, 923, 926, 927, 928, 929, 930, 931], "meta": [113, 121, 783, 784, 785], "overlap": 113, "sever": [113, 145, 636, 655, 657], "judgement": 113, "locat": [113, 117, 119, 124, 809, 810], "some_namespac": 113, "some_backend": 113, "another_backend": 113, "break": [113, 126, 130, 145, 888], "anyth": [113, 888], "refactor": 113, "ongo": 113, "subfold": [113, 117], "via": [113, 122, 123, 124, 125, 128, 130, 131, 144, 786, 787, 796, 797], "file_nam": 113, "my_func": [113, 115], "int": [113, 115, 118, 122, 123, 124, 125, 126, 133, 156, 161, 164, 165, 167, 170, 172, 174, 175, 176, 177, 180, 182, 183, 184, 186, 194, 203, 205, 206, 209, 212, 223, 245, 248, 249, 250, 251, 259, 260, 261, 267, 268, 273, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 511, 517, 529, 530, 533, 534, 535, 538, 539, 548, 564, 567, 568, 573, 574, 583, 585, 587, 590, 592, 594, 605, 607, 623, 624, 626, 628, 629, 630, 636, 640, 642, 646, 648, 691, 693, 694, 696, 697, 699, 700, 702, 706, 712, 715, 717, 720, 722, 728, 731, 732, 735, 736, 739, 740, 743, 744, 747, 748, 751, 752, 755, 756, 759, 761, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781, 782, 783, 784, 785, 786, 798, 804, 805, 808, 809, 810, 811, 812, 814, 815, 817, 819, 821, 822, 823, 835, 836, 839, 841, 844, 846, 851, 854, 855, 858, 859, 862, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887], "nativedtyp": [113, 123, 124, 126, 167, 168, 169, 170, 171, 172, 174, 175, 179, 180, 181, 184, 185, 186, 191, 192, 202, 203, 204, 213, 846, 871, 874], "nativedevic": [113, 123, 124, 126, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 184, 185, 223, 240, 241, 242, 256, 262, 264, 266, 268, 269, 272, 511, 564, 809, 810, 811, 812, 814, 815, 817], "my": 113, "numer": [113, 132, 167, 178, 186, 192, 273, 274, 277, 287, 290, 336, 339, 348, 351, 365, 368, 369, 372, 373, 376, 385, 388, 389, 392, 393, 396, 397, 400, 429, 432, 433, 436, 443, 446, 448, 451, 452, 455, 460, 463, 464, 467, 472, 475, 488, 491, 492, 496, 507, 510, 511, 546, 547, 569, 570, 575, 576, 636, 640, 642, 658, 661, 672, 674, 685, 687, 691, 693, 694, 696, 697, 699, 809, 820, 821, 822, 823, 846, 851, 854, 863, 866, 871, 874, 901], "cooler": 113, "produc": [113, 223, 232, 233, 623, 635], "something_cool": 113, "category_nam": [114, 118, 123, 124, 126], "contrast": [114, 126], "backend_nam": [114, 118, 119, 120, 123, 124, 126], "account": 114, "instanti": 114, "firstli": [114, 115, 118, 121, 123, 125, 131], "templat": [114, 888], "spec": [114, 115], "api_specif": [114, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 184, 185, 186, 195, 198, 273, 274, 277, 292, 295, 332, 335, 336, 339, 344, 347, 369, 372, 452, 455, 484, 487, 488, 491, 722, 736, 739, 756, 759, 826, 827, 828, 832, 835, 836, 839, 846, 851, 854], "array_api": 114, "preview": 114, "render": 114, "incorrectli": 114, "onlin": [114, 888], "approxim": [114, 156, 157, 273, 279, 282, 283, 286, 292, 295, 296, 299, 300, 303, 304, 307, 340, 343, 344, 347, 361, 364, 365, 368, 405, 408, 409, 412, 413, 416, 417, 420, 460, 463, 476, 479, 480, 483, 497, 501, 502, 506, 636, 666, 668, 675, 677], "tangent": [114, 156, 163, 273, 300, 303, 304, 307, 308, 311, 497, 501, 502, 506], "domain": [114, 273, 279, 282, 283, 286, 292, 295, 296, 299, 300, 303, 304, 307, 340, 343, 344, 347, 361, 364, 365, 368, 405, 408, 409, 412, 417, 420, 476, 479, 480, 483, 484, 487, 497, 501, 502, 506], "infin": [114, 166, 186, 192, 273, 274, 277, 283, 286, 287, 290, 296, 299, 300, 303, 304, 307, 336, 339, 340, 343, 344, 347, 361, 364, 365, 368, 369, 372, 373, 376, 385, 388, 389, 392, 405, 408, 409, 412, 417, 420, 421, 424, 443, 446, 460, 463, 464, 467, 468, 471, 476, 479, 480, 483, 484, 487, 497, 501, 502, 506, 507, 510, 636, 700, 702, 846, 851, 854, 859, 862, 879, 880, 883, 884, 887], "codomain": [114, 273, 279, 282, 283, 286, 292, 295, 296, 299, 300, 303, 304, 307, 340, 343, 344, 347, 361, 364, 365, 368, 405, 408, 409, 412, 417, 420, 476, 479, 480, 483, 484, 487, 497, 501, 502, 506], "x_i": [114, 273, 274, 277, 279, 282, 283, 286, 292, 295, 296, 299, 300, 303, 316, 319, 336, 339, 340, 343, 344, 347, 361, 364, 365, 368, 369, 372, 385, 388, 389, 392, 393, 396, 405, 408, 409, 412, 417, 420, 429, 432, 448, 451, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 497, 501, 502, 506, 507, 510, 826, 827, 828, 832, 834, 846, 851, 854, 855, 858, 859, 862, 867, 870, 871, 874, 875, 878], "assum": [114, 119, 123, 130, 131, 145, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 195, 198, 273, 274, 277, 287, 290, 292, 295, 312, 315, 332, 335, 336, 339, 340, 343, 344, 347, 369, 372, 452, 455, 468, 471, 476, 479, 484, 487, 488, 491, 497, 501, 502, 506, 511, 539, 623, 626, 635, 636, 643, 645, 722, 736, 739, 740, 743, 756, 759, 804, 805, 808, 826, 827, 828, 832, 835, 836, 839, 846, 851, 854, 879, 880, 883], "express": [114, 128, 133, 273, 279, 282, 292, 295, 300, 303, 304, 307, 340, 343, 476, 479, 497, 501], "radian": [114, 273, 279, 282, 292, 295, 300, 303, 304, 307, 340, 343, 476, 479, 497, 501], "float": [114, 118, 122, 123, 125, 126, 130, 132, 156, 158, 166, 167, 168, 170, 172, 174, 175, 176, 177, 180, 184, 186, 192, 202, 206, 211, 214, 223, 256, 262, 266, 269, 272, 273, 274, 277, 279, 282, 283, 286, 287, 290, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 332, 335, 336, 339, 340, 343, 344, 347, 348, 351, 353, 356, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 397, 400, 401, 404, 405, 408, 409, 412, 417, 420, 421, 424, 443, 446, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 476, 479, 480, 483, 484, 487, 492, 496, 497, 501, 502, 506, 507, 510, 511, 523, 524, 526, 538, 546, 547, 569, 570, 575, 576, 585, 587, 590, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615, 623, 626, 630, 635, 636, 637, 639, 643, 645, 649, 651, 652, 654, 655, 657, 666, 668, 675, 677, 678, 680, 682, 684, 685, 687, 700, 702, 706, 707, 710, 712, 715, 717, 720, 782, 783, 784, 785, 804, 805, 808, 809, 814, 815, 817, 826, 827, 828, 832, 834, 846, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878], "operand": [114, 273, 279, 282, 283, 286, 287, 290, 292, 295, 296, 299, 300, 303, 304, 307, 332, 335, 336, 339, 340, 343, 344, 347, 361, 364, 365, 368, 369, 372, 405, 408, 409, 412, 417, 420, 421, 424, 443, 446, 460, 463, 464, 467, 468, 471, 476, 479, 480, 483, 484, 487, 497, 501, 502, 506, 507, 510, 846, 847, 850, 851, 854, 859, 862, 871, 874], "whose": [114, 167, 182, 183, 273, 283, 286, 296, 299, 308, 311, 340, 343, 344, 347, 460, 463, 476, 479, 480, 483, 497, 501, 502, 506, 511, 522, 636, 637, 639, 643, 645, 646, 648, 649, 651, 652, 654, 655, 657, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 682, 684, 685, 687, 688, 690, 694, 696, 722, 740, 743, 756, 759, 826, 827, 828, 832, 846, 847, 850], "ref": [114, 273, 328, 331, 397, 400, 443, 446, 452, 455, 464, 467, 492, 496, 722, 766, 769], "promot": [114, 118, 123, 186, 192, 195, 198, 213, 214, 218, 273, 279, 282, 283, 286, 287, 290, 292, 295, 296, 299, 300, 303, 308, 311, 312, 315, 320, 323, 324, 327, 328, 331, 332, 335, 340, 343, 344, 347, 348, 351, 361, 364, 365, 368, 405, 408, 409, 412, 417, 420, 421, 424, 437, 440, 443, 446, 460, 463, 464, 467, 476, 479, 480, 483, 484, 487, 497, 501, 502, 506, 636, 637, 639, 640, 642, 655, 657, 658, 661, 666, 668, 672, 674, 675, 677, 682, 684, 697, 699, 700, 702, 722, 766, 769, 846, 855, 858], "But": [114, 122, 133], "needless": 114, "info": [114, 888], "subset": [114, 117, 126, 128], "extend": [114, 117, 119, 126], "renam": 114, "conform": [114, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 180, 181, 182, 183, 184, 185, 186, 195, 198, 273, 274, 277, 287, 290, 292, 295, 312, 315, 332, 335, 336, 339, 344, 347, 365, 368, 369, 372, 452, 455, 468, 471, 484, 487, 488, 491, 497, 501, 502, 506, 636, 643, 645, 722, 736, 739, 740, 743, 756, 759, 826, 827, 828, 832, 835, 836, 839, 846, 851, 854, 879, 880, 883], "org": [114, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 184, 185, 186, 195, 198, 273, 274, 277, 292, 295, 332, 335, 336, 339, 344, 347, 369, 372, 452, 455, 484, 487, 488, 491, 585, 587, 590, 592, 594, 722, 736, 739, 756, 759, 826, 827, 828, 832, 835, 836, 839, 846, 851, 854], "elementwise_funct": [114, 273, 274, 277, 292, 295, 332, 335, 336, 339, 344, 347, 369, 372, 452, 455, 484, 487, 488, 491, 722, 756, 759, 826, 827, 835, 836, 839, 846, 851, 854], "descript": [114, 122, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 195, 198, 273, 274, 277, 287, 290, 292, 295, 312, 315, 332, 335, 336, 339, 344, 347, 369, 372, 452, 455, 468, 471, 484, 487, 488, 491, 497, 501, 502, 506, 511, 539, 623, 626, 635, 636, 643, 645, 700, 702, 722, 736, 739, 740, 743, 756, 759, 804, 805, 808, 826, 827, 828, 832, 835, 836, 839, 846, 851, 854, 879, 880, 883], "simplic": [114, 132, 144, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 195, 198, 273, 274, 277, 287, 290, 292, 295, 312, 315, 332, 335, 336, 339, 344, 347, 369, 372, 452, 455, 468, 471, 484, 487, 488, 491, 497, 501, 502, 506, 511, 539, 623, 626, 635, 636, 643, 645, 722, 736, 739, 740, 743, 756, 759, 804, 805, 808, 826, 827, 828, 832, 835, 836, 839, 846, 851, 854], "judgment": 114, "beyond": [114, 722, 756, 759], "text": 114, "func_nam": [114, 115, 118], "pure": [114, 130, 133, 145], "themselv": [114, 118, 122, 123, 124, 132, 786, 787], "operator_nam": 114, "succinct": 114, "contstructor": 114, "though": [114, 118, 123, 131, 145], "forward": [114, 133, 144, 145, 922, 923, 926, 930], "_forward": [114, 128, 131, 132, 888], "former": 114, "trainabl": [114, 129, 131, 132, 585, 601, 603, 899, 900, 922, 923, 932], "explicitli": [114, 118, 119, 121, 122, 125, 128, 145, 636, 649, 651, 910, 919, 921, 922, 923], "latter": [114, 119], "implicit": [114, 122, 128], "docst": 114, "eight": 115, "static_": 115, "op_nam": 115, "__r": 115, "four": [115, 118, 123, 126, 131], "__sub__": [115, 121, 122, 126, 130], "__mul__": [115, 121, 122, 126, 130], "__truediv__": [115, 121, 122], "respect": [115, 121, 122, 123, 126, 167, 178, 273, 274, 277, 287, 290, 304, 307, 312, 315, 320, 323, 324, 327, 328, 331, 332, 335, 348, 351, 353, 356, 373, 376, 377, 380, 381, 384, 397, 400, 401, 404, 421, 424, 425, 428, 433, 436, 437, 440, 443, 446, 452, 455, 464, 467, 492, 496, 585, 587, 590, 592, 594, 596, 597, 599, 605, 607, 609, 611, 613, 615, 636, 678, 680, 782, 783, 784, 785], "recap": [115, 122, 132], "independ": [115, 116, 120, 122, 128, 133, 636, 640, 642, 682, 684, 809, 810], "combinatorili": 115, "variat": [115, 117], "grid": [115, 117, 144, 167, 178], "vari": [115, 117, 122, 130, 826, 827, 828, 832, 834], "simplest": 115, "small": [115, 118, 128, 132, 145, 273, 443, 446, 636, 666, 668, 675, 677, 804, 805, 808, 924, 925], "unus": [115, 125, 164, 165], "18": [115, 122, 273, 332, 335, 636, 646, 648, 672, 674, 846, 847, 850], "excess": [115, 119, 130], "showcas": [115, 144], "demonstr": [115, 130], "replic": [115, 123], "meant": 115, "imaginari": 115, "some_flag": 115, "another_flag": 115, "54": [115, 273, 340, 343, 344, 347, 484, 487, 623, 635, 636, 672, 674, 809, 814, 846, 847, 850], "jointli": 115, "three": [115, 122, 127, 167, 178, 888], "x0": [115, 511, 519], "procedur": 115, "sens": [115, 122, 130], "5574077": 115, "1850398": 115, "5463025": 115, "8422884": 115, "91601413": 115, "9647598": 115, "3738229": 115, "1597457": 115, "0963247": 115, "9955841": 115, "3278579": 115, "multi": [115, 122, 127, 145, 623, 634, 636, 640, 642, 888, 894, 910, 921], "seper": [115, 511, 538], "pars": [115, 145], "satisfi": [115, 636, 703, 705], "far": [115, 124, 129, 130, 786, 787, 797], "asid": [115, 144], "irrelev": [115, 123], "increasingli": 115, "complex": [115, 131, 132, 133, 145, 636, 649, 651, 685, 687], "rule": [115, 117, 118, 121, 122, 123, 186, 192, 195, 198, 214, 273, 308, 311, 328, 331, 348, 351, 443, 446, 464, 467, 636, 637, 639, 640, 642, 672, 674, 682, 684], "14254655": 115, "1578213": 115, "380515": 115, "17": [115, 122, 156, 158, 636, 646, 648, 809, 814], "trivial": 115, "By": [115, 118, 122, 125, 132, 133, 511, 529, 530, 636, 697, 699, 722, 748, 751, 846, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887], "non": [115, 122, 123, 128, 164, 165, 186, 192, 210, 273, 429, 432, 433, 436, 623, 626, 636, 643, 645, 666, 668, 685, 687, 691, 693, 697, 699, 700, 702, 821, 822, 823, 824, 846, 851, 854, 855, 858, 859, 862, 863, 866, 875, 878, 879, 880, 883, 884, 887, 922, 923, 926, 930], "dictat": [115, 121, 125, 126], "exlud": 115, "unit": [116, 117, 145, 156, 157, 158, 159, 223], "thoroughli": [116, 117], "ci": [116, 117, 145], "failur": 116, "On": [117, 129, 133], "fixtur": 117, "consum": [117, 122, 126, 223], "300": [117, 273, 468, 471], "hit": [117, 128], "permit": [117, 121, 126], "action": 117, "eleg": 117, "intellig": 117, "sampl": [117, 623, 631, 809, 810, 814, 815, 817, 846, 867, 870, 875, 878, 910, 918], "rang": [117, 131, 132, 133, 167, 168, 176, 177, 826, 827, 846, 863, 866, 871, 874, 888], "cach": [117, 118, 223, 241, 511, 522], "unexplor": 117, "known": 117, "repeatedli": [117, 122, 786, 795], "upload": 117, "artifact": 117, "parametr": 117, "strategi": 117, "statement": [117, 145], "plai": [117, 133], "helper": [117, 131], "verifi": [117, 123, 124, 130, 888, 894], "truth": [117, 273, 353, 356, 377, 380, 381, 384, 397, 400, 401, 404, 452, 455], "opt": [117, 119, 125, 130], "defer": [117, 118, 121, 122, 123, 124, 125], "suffic": [117, 120], "catch": [117, 511, 532], "systemat": 117, "safeguard": 117, "inabl": 117, "fact": [117, 131], "categor": [118, 124], "mutual": [118, 122], "constitut": [118, 128, 846, 867, 870, 875, 878], "venn": 118, "diagram": 118, "light": [118, 145], "wherea": [118, 121, 123, 124, 126, 133], "hand": [118, 145], "log_pr": [118, 122, 125], "array_arg": 118, "typic": 118, "whatsoev": [118, 122], "commonli": [118, 846, 867, 870, 875, 878], "outsid": [118, 124, 128, 130, 133, 722, 723, 726, 766, 769], "denomin": [118, 145, 511, 537, 547, 570, 575, 576, 804, 805, 808, 924, 925], "divis": [118, 273, 328, 331, 348, 351, 373, 376, 464, 467, 511, 537, 547, 570, 575, 576, 585, 587, 590, 592, 594, 605, 607, 926, 927, 928], "deal": [118, 145], "concurr": [118, 122], "weight": [118, 122, 132, 133, 585, 587, 590, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615, 623, 632, 633, 635, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 922, 923, 926, 928, 929], "modif": 118, "decor": [118, 120, 122, 123, 124, 125], "group": [118, 122], "briefli": [118, 131], "cast": [118, 123, 186, 192, 195, 198, 722, 728, 731, 846, 863, 866, 871, 874, 888], "get_all_arrays_on_dev": 118, "nested_map": [118, 786], "index_nest": [118, 786], "implicit_backend": 119, "unless": [119, 124, 125, 145, 273, 443, 446, 511, 564], "__dict__": [119, 128, 130], "ivy_original_dict": [119, 128], "unmodifi": [119, 123], "moment": [119, 145, 585, 587, 590, 592, 594, 605, 607, 926, 927, 928], "fallback": 119, "freedom": [119, 846, 867, 870, 875, 878], "recommend": [119, 273, 429, 432, 433, 436, 464, 467, 846, 855, 858], "achiev": [120, 131, 133], "wrapper": [120, 121, 122, 123, 125, 126, 130], "logic": [120, 121, 123, 124, 130, 223, 259, 273, 425, 428, 429, 432, 433, 436, 879, 880, 883, 884, 887, 888], "topic": [120, 130], "tf": [121, 123, 124, 125, 126, 128, 133, 145, 888], "_data": [121, 130], "organiz": [121, 122], "inherit": [121, 122, 130], "bear": [121, 122, 123], "mind": [121, 122], "necessarili": [121, 122], "although": [121, 122], "underpin": [121, 122, 128], "programmat": [121, 122], "backup": [121, 122], "accident": [121, 122], "readabl": [121, 122, 126, 130, 131], "absent": [121, 122], "perk": [121, 122], "auto": [121, 122, 131], "throw": [121, 130], "imposs": 121, "coupl": [121, 122, 130, 132], "anywai": 121, "secondli": [121, 123], "easier": 121, "five": [122, 131], "decis": [122, 128, 130], "displai": [122, 131], "arbitrarili": [122, 131], "__repr__": 122, "control": [122, 123, 125, 130, 131, 144], "__getattr__": 122, "underli": [122, 273, 312, 315, 324, 327, 332, 335, 437, 440], "__setattr__": 122, "__contains__": 122, "__getstate__": 122, "__setstate__": 122, "unpickl": 122, "expand": [122, 511, 538, 722, 736, 739], "children": 122, "shallowest": 122, "deepest": 122, "67": [122, 273, 332, 335, 344, 347], "22": [122, 273, 332, 335, 636, 646, 648, 672, 674, 821, 825, 846, 847, 850], "25": [122, 273, 484, 487, 488, 491, 636, 646, 648, 655, 657, 706, 712, 715, 804, 805, 808, 846, 847, 850], "retain_grad": [122, 585, 596], "dy": [122, 585, 596], "dx": [122, 585, 596], "technic": [122, 125, 126, 145], "autograd": [122, 145], "grad": [122, 131, 132, 133, 888, 926, 930], "redund": 122, "num_head": [122, 623, 634, 910, 921], "mask": [122, 623, 634, 635], "to_q_fn": [122, 623, 634], "to_kv_fn": [122, 623, 634], "to_out_fn": [122, 125, 623, 634], "to_q_v": [122, 623, 634], "to_kv_v": [122, 623, 634], "to_out_v": [122, 623, 634], "measur": [122, 623, 634, 910, 921], "dot": [122, 623, 634, 635, 636, 691, 693, 697, 699, 910, 921], "product": [122, 273, 443, 446, 511, 529, 623, 634, 635, 636, 640, 642, 658, 661, 672, 674, 691, 693, 697, 699, 846, 847, 850, 863, 866, 910, 921], "implicitli": 122, "intuit": [122, 131, 132], "debug": [122, 131], "chronolog": 122, "had": [122, 125], "sequenti": [122, 132], "flow": [122, 144], "implic": 122, "slightli": [122, 128, 132], "eager": [122, 145], "int8": [123, 186, 207], "int16": [123, 186, 195, 198, 207, 846, 863, 866, 871, 874], "uint8": [123, 186, 195, 198, 207], "uint16": [123, 186, 208, 846, 863, 866, 871, 874], "uint32": [123, 186, 208, 846, 863, 866, 871, 874], "uint64": [123, 186, 208, 846, 863, 866, 871, 874], "bfloat16": [123, 186, 207], "float16": [123, 186, 208], "all_dtyp": 123, "all_numeric_dtyp": 123, "all_int_dtyp": 123, "all_float_dtyp": 123, "fall": [123, 127, 888, 922, 923, 926, 930], "valid": [123, 128, 186, 200, 623, 624, 625, 626, 627, 628, 629, 630, 722, 766, 769, 879, 880, 883, 884, 887, 910, 911, 912, 913, 914, 915, 916, 917], "invalid": [123, 636, 697, 699, 879, 880, 883, 884, 887], "thirdli": 123, "native_float32": 123, "importantli": [123, 130, 133, 144], "varieti": [123, 124], "conveni": [123, 124, 126, 129, 131, 132], "arguabl": [123, 124], "compound": 123, "overflow": [123, 273, 287, 290, 846, 871, 874], "arr": [123, 124, 804, 805, 808], "scalar": [123, 128, 133, 145, 167, 175, 511, 564, 581, 584, 636, 700, 702], "settabl": [123, 124], "jnp": [123, 124, 125, 126, 133, 888], "jaxarrai": [123, 124, 125, 126], "mx": [123, 124, 125, 888], "nd": [123, 124, 125, 128, 133, 888], "deleg": 123, "fill_valu": [123, 167, 174, 175, 273, 381, 384], "as_n": [123, 186, 201, 202, 203, 204, 223, 242, 243, 264], "idx": [124, 130, 511, 517], "tpu": [124, 223, 245, 270], "aliv": [124, 223, 257, 261, 263, 511, 545, 563, 565], "amount": [124, 223, 269, 706, 707, 710, 712, 715, 717, 720], "memori": [124, 125, 143, 145, 223, 241, 262, 267, 269, 272, 623, 633, 888], "dual": 124, "thrown": [124, 145, 511, 555], "rare": [124, 145], "program": 125, "strictli": 125, "ration": 125, "speak": 125, "subtli": 125, "ensure_in_backend": [125, 511, 555], "x_nativ": 125, "val_n": 125, "is_ivy_arrai": [125, 130, 511], "assign": [125, 130], "elif": 125, "irrespect": [125, 130, 186, 192], "inclus": [125, 167, 168, 809, 811, 812], "omit": [125, 126, 826, 827, 828, 832, 834], "unspecifi": [125, 273, 460, 463, 464, 467, 636, 649, 651, 722, 766, 769], "predominantli": [125, 144], "math": [125, 133, 888], "presenc": 125, "altern": [125, 131], "_wrap_fn": 125, "maxim": [125, 128], "inner": [125, 130, 636, 649, 651, 658, 661, 782, 783, 784, 785], "third": [125, 145, 636, 685, 687, 826, 827], "addition": [125, 126], "leverag": 125, "equival": [125, 131, 133, 167, 168, 273, 328, 331, 429, 432, 433, 436, 464, 467, 636, 666, 668, 675, 677, 682, 684, 700, 702], "input_arrai": 125, "adress": 126, "revisit": [126, 133], "dedic": [126, 130, 132, 585, 621, 899, 900], "__div__": 126, "dicat": 126, "futher": 126, "absenc": 126, "pep": 126, "484": 126, "annot": 126, "brittl": 126, "intend": [126, 846, 871, 874], "freeli": 126, "inde": [126, 145], "flexibl": 126, "original_typ": 126, "cumbersom": 126, "sound": 127, "higher": [127, 128, 133, 145, 585, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615], "overview": [127, 144], "handler": [127, 129, 133, 888], "fledg": [128, 129], "syntact": [128, 133], "clip_by_valu": [128, 133], "clamp": [128, 133], "behavior": [128, 145, 273, 460, 463, 464, 467, 826, 827, 828, 832, 834], "fit": [128, 722, 748, 751], "construct": [128, 129, 132, 133, 722, 774, 777, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933], "num": [128, 167, 176, 177], "power_seq": 128, "okai": 128, "bound": 128, "resid": [128, 132], "edg": [128, 133, 722, 723, 726, 732, 735, 778, 781, 888], "larger": [128, 133, 186, 206, 722, 723, 726, 756, 759, 846, 867, 870, 875, 878], "ml_framework": [128, 133, 167, 168], "current_framework": [128, 133], "furthermor": 128, "concaten": [128, 131, 223, 252, 511, 538, 722, 728, 731, 888], "framework_handl": 128, "face": 128, "verbos": [128, 888, 936], "cprint": [128, 935], "framework_stack": 128, "_determine_framework_from_arg": 128, "valueerror": [128, 722, 762, 765], "get_framework": 128, "neither": [128, 273, 287, 290, 443, 446], "illustr": [128, 144], "un": [128, 186, 210], "nn": [128, 133, 167, 178, 888], "init_h": [128, 623, 633], "init_c": [128, 623, 633], "kernel": [128, 145, 623, 633], "recurrent_kernel": [128, 623, 633], "bia": [128, 132, 623, 632, 633, 910, 911, 912, 913, 914, 915, 916, 917, 920], "recurrent_bia": [128, 623, 633], "x_shape": 128, "batch_shap": [128, 130, 133, 511, 564, 623, 633, 634, 635, 636, 703, 705, 809, 810, 910, 919], "timestep": [128, 623, 633, 910, 919], "input_channel": [128, 132, 910, 911, 912, 913, 914, 915, 916, 919, 920], "x_flat": 128, "wi": 128, "wi_x": 128, "wii_x": 128, "wif_x": 128, "wig_x": 128, "wio_x": 128, "recurr": [128, 623, 633], "wh": 128, "lstm": [128, 623, 633, 910], "ht": 128, "ct": 128, "hts_list": 128, "unrol": [128, 131, 623, 633], "wii_xt": 128, "wif_xt": 128, "wig_xt": 128, "wio_xt": 128, "zip": 128, "htm1": 128, "ctm1": 128, "wh_htm1": 128, "whi_htm1": 128, "whf_htm1": 128, "whg_htm1": 128, "who_htm1": 128, "ft": 128, "gt": 128, "ot": 128, "offici": 128, "reliabl": 128, "sacrific": 128, "hear": 128, "virtu": 128, "pure_ivi": 128, "reduce_mean": [128, 131, 132, 133, 888], "reduce_sum": [128, 888], "reduce_var": 128, "compile_graph": [128, 133], "pure_torch": 128, "cat": [128, 133], "backbon": [128, 131], "_layer": 128, "super": [128, 131, 132, 133], "clean": [128, 129, 131], "random_unifrom": 128, "unclean": 128, "wx": 128, "temp": 128, "torchscript": 128, "fn": [128, 130, 146, 147, 148, 149, 150, 151, 152, 153, 154, 186, 207, 208, 223, 232, 233, 511, 517, 582, 786, 787, 792, 793, 794, 796, 797, 798, 891, 893], "example_input": [128, 164, 165], "static_argnum": [128, 164, 165], "static_argnam": [128, 164, 165], "jit": [128, 145], "frontend": 129, "primit": [129, 145], "hierarch": [129, 131, 132], "straight": [130, 888], "arraywithlinalg": 130, "arraywithlog": 130, "arraywithmath": 130, "arraywithmeta": 130, "arraywithreduct": 130, "is_native_arrai": [130, 511], "_shape": 130, "_size": 130, "functool": 130, "mul": 130, "len": [130, 133, 167, 178], "_dtype": 130, "_devic": 130, "_dev_str": 130, "_pre_repr": 130, "_post_repr": 130, "ndim": [130, 636, 678, 680, 685, 687], "mt": 130, "answer": [130, 145], "consol": 130, "typeerror": 130, "immut": 130, "behav": 130, "claim": 130, "truli": 130, "_native_wrapp": 130, "attributeerror": 130, "genuin": 130, "some_method": 130, "similarli": [130, 167, 178], "rewritten": 130, "__pow__": 130, "strang": 130, "power": [130, 131, 132, 273, 328, 331, 361, 364, 460, 463, 511, 546, 569, 576, 636, 665, 901], "enforc": 130, "notic": 130, "appear": [130, 722, 736, 739], "invers": [130, 144, 273, 279, 282, 283, 286, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 636, 655, 657, 675, 677], "_wrap_method": 130, "func_wrapp": [130, 146, 147, 148, 149, 150, 151, 152, 153, 154], "__name__": 130, "non_wrapped_method": 130, "_method_wrap": 130, "native_arg": 130, "native_kwarg": 130, "inner_fn": 130, "whist": 130, "unwrap": 130, "transit": 130, "needlessli": 130, "randn": 130, "_unwrap_method": 130, "method_wrap": 130, "compartment": 130, "public": [130, 511, 527], "newshap": 130, "new_shap": 130, "tidi": 130, "shorter": 130, "crystal": 130, "41": [130, 273, 332, 335, 484, 487, 636, 637, 639, 846, 871, 874], "enough": [130, 131, 132], "ton": 131, "ado": [131, 132], "incred": [131, 145], "hash": 131, "soup": 131, "walk": [131, 132], "dct": 131, "cnt": 131, "combo": [131, 888, 894], "hold": [131, 511, 567, 568], "1000": [131, 273, 484, 487], "uda": 131, "3333": 131, "6667": 131, "178": 131, "new_weight": 131, "0600": 131, "3100": 131, "2400": 131, "6900": 131, "delimit": 131, "autocomplet": 131, "midwai": 131, "agent": 131, "total_spe": 131, "total_height": 131, "total_width": 131, "ag": 131, "tot": 131, "total_": 131, "total_h": 131, "batch_siz": [131, 623, 624, 625, 626, 627, 628, 629, 630, 809, 810], "dir": 131, "adam": [131, 132, 133, 585, 587, 590, 592, 594, 605, 607, 888, 926, 928], "cnt0": 131, "cnt1": 131, "diff_0": 131, "diff_1": 131, "config0": 131, "config1": 131, "Not": [131, 132, 145, 166], "decod": 131, "l0": 131, "l1": [131, 636, 700, 702], "depth": [131, 132, 133, 144, 223, 247, 251, 255, 511, 549, 564, 786, 798, 922, 923], "clearer": 131, "truncat": 131, "decoder__l0": 131, "decoder__l1": 131, "encoder__l0": 131, "encoder__l1": 131, "height": 131, "l0__b": 131, "l0__w": 131, "l1__b": 131, "l1__w": 131, "printabl": 131, "obviou": 131, "foresight": 131, "untidili": 131, "update_ag": 131, "normalize_img": 131, "img": 131, "img_max": 131, "reduce_max": [131, 888], "img_min": 131, "reduce_min": [131, 888], "img_rang": 131, "agent_posit": 131, "agent_veloc": 131, "agent_cam_front_rgb": 131, "agent_cam_front_depth": 131, "agent_cam_rear_rgb": 131, "agent_cam_rear_depth": 131, "agent_cam_lidar": 131, "normal": [131, 722, 766, 769, 804, 805, 808, 809, 814, 924, 925], "cleaner": 131, "camera": 131, "front_rgb": 131, "front_depth": 131, "rear_rgb": 131, "rear_depth": 131, "lidar": 131, "rgb": 131, "rear": 131, "veloc": 131, "cam": 131, "cam_max": 131, "cam_min": 131, "cam_rang": 131, "Of": 131, "ideal": 131, "perman": 131, "afterward": 131, "thread": 131, "incorpor": 131, "pretti": 131, "straightforward": 131, "dataload": [131, 143, 888], "_cnt": 131, "img_": 131, "_dataset_s": 131, "_batch_siz": 131, "_count": [131, 132], "__next__": 131, "filenam": 131, "img_fnam": 131, "fname": 131, "loaded_img": 131, "cv2": 131, "imread": 131, "loader": [131, 145], "batch_slic": 131, "model": [131, 132, 888], "mymodel": [131, 888], "linear0": [131, 132, 888], "linear1": [131, 132, 888], "x_in": [131, 132, 133, 888], "001": [131, 132, 585, 587, 590, 804, 805, 808], "loss_fn": [131, 132, 133, 888], "0145": 131, "grad_fn": 131, "addbackward0": 131, "_create_vari": 132, "output_channel": [132, 910, 911, 912, 913, 914, 915, 916, 919, 920], "with_bia": [132, 910, 920], "_input_channel": 132, "_output_channel": 132, "_w_shape": 132, "_b_shape": 132, "_with_bia": 132, "8979": 132, "3198": 132, "0196": 132, "3126": 132, "3717": 132, "9687": 132, "6958": 132, "5122": 132, "3902": 132, "8800": 132, "5613": 132, "1982": 132, "nightmar": 132, "overcom": 132, "fc": 132, "9563": 132, "impact": 132, "v0": 132, "v1": 132, "6440": 132, "key0": 132, "1823": 132, "8075": 132, "linear3": 132, "v2": 132, "2346": 132, "counter": 132, "hidden": [132, 623, 633, 910, 919], "fed": [132, 223, 267], "1300": 132, "decoupl": 132, "scheme": 132, "weight_initi": [132, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920], "glorotuniform": [132, 901, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920], "bias_initi": [132, 910, 911, 912, 913, 914, 915, 916, 917, 920], "_w_init": 132, "_b_init": 132, "create_vari": [132, 901], "var_shap": [132, 901], "fan_out": [132, 901], "fan_in": [132, 901], "fan_mod": [132, 901], "fan_sum": 132, "slight": 132, "misnom": 132, "saw": 132, "vanilla": [132, 782, 784], "descent": [132, 585, 597, 599, 926, 931], "lar": [132, 585, 605, 607, 609, 611, 926], "lamb": [132, 585, 605, 607, 926], "compile_on_next_step": [132, 922, 923, 926, 927, 928, 929, 930, 931], "_beta1": 132, "_beta2": 132, "_epsilon": 132, "_mw": 132, "_vw": 132, "_first_pass": 132, "_should_compil": 132, "_step": [132, 926, 930], "new_v": 132, "_lr": 132, "isinst": [132, 133, 511, 579], "_inplac": 132, "_stop_gradi": 132, "set_stat": [132, 926, 927, 928, 929, 930, 931], "pre": [133, 145, 223], "captur": 133, "sparse_funct": 133, "num_class": [133, 809, 810], "num_dim": 133, "new_axi": 133, "_linear": 133, "to_backend": 133, "jax_graph": 133, "learnabl": [133, 804, 805, 808, 924, 925], "to_ivy_modul": [133, 899], "thinli": 133, "whilst": 133, "to_haiku_modul": 133, "hk": 133, "loss_fn_t": 133, "transform": [133, 144, 623, 631, 632], "without_apply_rng": 133, "rng": 133, "prngkei": 133, "init": 133, "update_rul": 133, "01": [133, 273, 468, 471], "tree_multimap": 133, "mechan": [143, 145, 888], "vision": [143, 888], "robot": [143, 888], "focus": 144, "field": [144, 636, 649, 651, 678, 680, 685, 687, 826, 827, 828, 832], "perfect": 144, "3d": [144, 910, 915, 916], "differenti": 144, "demo": [144, 888], "orient": 144, "pose": 144, "euler": [144, 166], "quaternion": 144, "rotat": 144, "matric": [144, 167, 178, 182, 183, 623, 632, 636, 637, 639, 643, 645, 646, 648, 649, 651, 652, 654, 655, 657, 665, 666, 668, 669, 671, 675, 677, 678, 680, 682, 684, 685, 687, 688, 690, 694, 696], "angl": [144, 273, 304, 307, 344, 347, 480, 483, 502, 506], "ivy_mech": 144, "target_facing_rotation_matrix": 144, "polar_to_cartesian_coord": 144, "ordin": [144, 636, 682, 684], "warp": 144, "optic": 144, "voxel": 144, "ivy_vis": 144, "coords_to_voxel_grid": 144, "render_pixel_coord": 144, "neural": [144, 623, 888, 896, 910], "radianc": 144, "nerf": 144, "trajectori": 144, "motion": 144, "plan": [144, 888], "mobil": 144, "ivy_robot": 144, "sample_spline_path": 144, "rigidmobil": 144, "sample_bodi": 144, "drone": 144, "sample_link": 144, "openai": 144, "swimmer": 144, "cumul": [144, 511, 529, 530], "reward": 144, "supervis": 144, "reinforc": 144, "door": [144, 145], "intersect": 144, "cartpol": 144, "mountain_car": 144, "pendulum": 144, "reacher": 144, "polici": 144, "condit": [144, 164, 165, 786, 796, 797, 821, 825], "learnt": 144, "ture": 144, "ntm": 144, "egospher": 144, "spatial": 144, "esm": 144, "ivy_memori": 144, "egocentr": 144, "room": 144, "inspir": 144, "doubt": 145, "grate": 145, "put": 145, "probe": 145, "undergo": 145, "remark": 145, "surpris": 145, "backward": [145, 273, 464, 467, 636, 697, 699, 879, 880, 883, 884, 887], "lock": 145, "contunu": 145, "minor": 145, "xla": 145, "buffer": 145, "kind": [145, 186, 206, 209, 273, 460, 463, 846, 863, 866, 871, 874], "gold": 145, "dex": 145, "phase": 145, "lax": 145, "scan": 145, "tricki": 145, "predictor": 145, "tight": 145, "driver": 145, "schedul": 145, "algorithm": [145, 623, 624, 625, 626, 627, 628, 629, 630, 910, 911, 912, 913, 914, 915, 916, 917], "dispatch": 145, "Will": 145, "ast": 145, "dynamic": 145, "cond": 145, "jacobian": 145, "checkpoint": 145, "autodiff": 145, "shine": 145, "merci": 145, "superset": 145, "cluster": 145, "compet": 145, "paradigm": 145, "parallelis": [145, 223, 232, 233], "spmd": 145, "mixtur": [145, 585, 587, 590], "expert": 145, "sophist": 145, "depart": 145, "routin": 145, "hundr": 145, "thousand": 145, "deepli": [145, 786, 788], "broadli": 145, "heavili": 145, "supplementari": 145, "Is": 145, "reusabl": 145, "fanci": 145, "fusion": 145, "lose": 145, "vmap": 145, "pmap": 145, "overhead": 145, "ineffici": 145, "eventu": 145, "supplement": 145, "backdoor": 145, "callback": 145, "record": 145, "metric": 145, "somewhat": 145, "outsourc": 145, "inputs_to_ivy_arrai": 146, "gaussian": [156, 157], "leaki": [156, 157, 158], "alpha": [156, 158], "rectifi": [156, 158, 159], "slope": [156, 158], "39": [156, 158, 273, 361, 364, 585, 587, 590, 636, 672, 674, 846, 847, 850], "85": [156, 158, 273, 332, 335], "48": [156, 158, 273, 484, 487, 585, 587, 590, 636, 672, 674, 846, 847, 850], "88": [156, 158, 273, 332, 335, 636, 672, 674, 846, 847, 850], "269": [156, 160], "731": [156, 160], "881": [156, 160], "214": [156, 160], "978": [156, 160], "891": [156, 160], "422": [156, 161], "155": [156, 161], "0768": [156, 161], "231": [156, 161], "693": [156, 161, 706, 717, 720], "49": [156, 161, 273, 484, 487, 846, 847, 850], "147": [156, 161], "363": [156, 161], "3461": [156, 162], "6491": [156, 162], "535": [156, 162], "hyperbol": [156, 163, 273, 283, 286, 296, 299, 308, 311, 344, 347, 480, 483, 502, 506], "55": [156, 163, 623, 629, 636, 672, 674, 846, 847, 850], "501": [156, 163], "faster": [164, 165], "invoc": [164, 165], "718281828459045": 166, "newaxi": 166, "alia": 166, "pi": 166, "141592653589793": 166, "mathemat": [166, 273, 287, 290, 304, 307, 365, 368, 443, 446, 636, 700, 702], "half": [167, 168, 809, 811, 812, 815, 817], "chosen": [167, 168, 273, 304, 307, 821, 825], "distanc": [167, 168], "adjac": [167, 168], "creation_funct": [167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 184, 185], "interpret": [167, 169, 179], "uniniti": [167, 170, 171], "n_row": [167, 172], "n_col": [167, 172], "elsewher": [167, 172, 821, 825], "row": [167, 172, 636, 682, 684, 685, 687, 809, 810, 821, 824], "column": [167, 172, 636, 649, 651, 678, 680, 682, 684, 685, 687], "__dlpack__": [167, 173, 223, 268], "interchang": [167, 173, 722, 770, 773], "endpoint": [167, 176], "xy": [167, 178], "coordin": [167, 178, 273, 304, 307], "cartesian": [167, 178], "ij": [167, 178, 846, 847, 850], "rank": [167, 178, 511, 583, 636, 640, 642, 666, 668, 678, 680, 682, 684, 694, 696, 697, 699, 700, 702, 722, 732, 735, 736, 739, 766, 769, 778, 781, 821, 824, 879, 880, 883, 884, 887], "ni": [167, 178], "xi": [167, 178], "n1": [167, 178], "n2": [167, 178], "n3": [167, 178], "accordingli": [167, 178, 273, 365, 368, 636, 700, 702, 821, 823, 826, 827, 828, 832, 834, 846, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887], "xv": [167, 178], "yv": [167, 178], "triangular": [167, 182, 183, 636, 637, 639, 678, 680], "innermost": [167, 182, 183, 636, 637, 639, 643, 645, 646, 648, 649, 651, 652, 654, 655, 657, 666, 668, 669, 671, 675, 677, 678, 680, 682, 684, 685, 687, 688, 690, 694, 696], "mxn": [167, 182, 183, 636, 646, 648, 666, 668, 669, 671, 675, 677, 678, 680, 688, 690, 694, 696], "defaultdtyp": [186, 187], "defaultfloatdtyp": [186, 188], "float_dtyp": [186, 202, 216], "defaultintdtyp": [186, 189], "dtype_in": [186, 190, 191, 205, 210, 211, 212, 222], "incompat": [186, 194], "occur": [186, 195, 198, 821, 822, 823, 826, 827, 828, 832, 834], "data_type_funct": [186, 195, 198], "closest": [186, 200, 273, 336, 339, 369, 372, 373, 376, 468, 471, 507, 510], "floatdtyp": [186, 202], "int_dtyp": [186, 203, 217], "intdtyp": [186, 203], "followng": [186, 206], "occupi": [186, 206, 209, 511, 567, 568], "ep": [186, 206, 636, 666, 668, 675, 677], "smallest_norm": [186, 206], "precis": [186, 206, 273, 443, 446, 484, 487], "encapsul": [186, 209], "type1": [186, 213], "type2": [186, 213], "arrays_and_dtyp": [186, 214], "ret1": [186, 218], "ret2": [186, 218], "noinspect": [187, 188, 189, 224, 586], "pyshadowingnam": [187, 188, 189, 224, 586], "array_method": [195, 196, 274, 275, 279, 280, 283, 284, 287, 288, 292, 293, 296, 297, 300, 301, 304, 305, 308, 309, 312, 313, 316, 317, 320, 321, 324, 325, 328, 329, 332, 333, 336, 337, 340, 341, 344, 345, 348, 349, 353, 354, 357, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 443, 444, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 494, 497, 499, 502, 504, 507, 508, 512, 513, 540, 541, 587, 588, 637, 638, 640, 641, 643, 644, 646, 647, 649, 650, 652, 653, 655, 656, 658, 659, 662, 663, 666, 667, 669, 670, 672, 673, 675, 676, 678, 679, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 697, 698, 700, 701, 703, 704, 707, 708, 712, 713, 717, 718, 723, 724, 728, 729, 732, 733, 736, 737, 740, 741, 744, 745, 748, 749, 752, 753, 756, 757, 762, 763, 766, 767, 770, 771, 774, 775, 778, 779, 805, 806, 828, 830, 836, 837, 841, 842, 847, 848, 851, 852, 855, 856, 859, 860, 863, 864, 867, 868, 871, 872, 875, 876, 880, 881, 884, 885], "container_method": [195, 197, 199, 274, 276, 278, 279, 281, 283, 285, 287, 289, 291, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 443, 445, 447, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 493, 495, 497, 498, 500, 502, 503, 505, 507, 509, 512, 514, 516, 524, 525, 540, 542, 544, 587, 589, 591, 592, 593, 595, 597, 598, 600, 601, 602, 604, 605, 606, 608, 609, 610, 612, 613, 614, 616, 658, 660, 707, 709, 711, 712, 714, 716, 717, 719, 721, 723, 725, 727, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 768, 770, 772, 774, 776, 778, 780, 805, 807, 811, 813, 815, 816, 818, 828, 829, 831, 836, 838, 840, 841, 843, 845, 847, 849, 851, 853, 855, 857, 859, 861, 863, 865, 867, 869, 871, 873, 875, 877, 880, 882, 884, 886], "defaultdevic": [223, 224], "__enter__": 223, "_dev": 223, "initialis": 223, "devcloneditem": [223, 245], "multidevitem": [223, 225, 228], "devclonedit": 223, "multidevit": [223, 226, 229, 232, 233, 237], "devclonednest": 223, "multidevnest": [223, 227, 230], "devdistitem": 223, "devdistit": 223, "devdistnest": 223, "devmanag": [223, 231], "dev_mapp": 223, "da_dim_s": 223, "safety_factor": 223, "min_dev_dim_s": 223, "max_dev_dim_step_ratio": 223, "min_unit_dev_tune_step": 223, "min_sf_tune_step": 223, "starting_split_factor": 223, "max_split_factor_step_s": 223, "tune_dev_alloc": 223, "tune_dev_split": 223, "mapper": [223, 232, 233], "receivess": 223, "ratio": [223, 585, 605, 607, 926, 928], "safe": [223, 232], "oom": 223, "tune": 223, "da_tune_step": 223, "ds_tune_step": 223, "to_clon": 223, "to_distribut": 223, "multidevic": [223, 232], "parallel": [223, 232, 233], "mutlidevic": [223, 232], "repeated_config_check": 223, "tune_step": 223, "devmapp": [223, 233], "ret_fn": [223, 232, 233], "queue_class": [223, 232, 233], "worker_class": [223, 232, 233], "worker": [223, 232, 233], "used_dev": [223, 232], "sf": [223, 232], "devmappermultiproc": 223, "multidev": [223, 234, 235, 236, 255], "profil": 223, "save_dir": [223, 238], "deviceic": [223, 244], "spread": [223, 255], "139740789224448": [223, 257], "physic": [223, 259], "x3": [223, 261], "x4": [223, 261], "process_specif": [223, 262, 272], "percentag": [223, 262], "ram": [223, 262, 269, 272], "alon": [223, 262, 272], "attr_onli": [223, 263], "chunk": [223, 265, 266, 267], "max_chunk_s": [223, 267], "chunk_siz": [223, 267], "input_ax": [223, 267], "output_ax": [223, 267], "feed": [223, 267], "fist": [223, 267], "stream": [223, 268], "caveat": [223, 268], "portabl": [223, 268, 888], "gb": [223, 269, 272], "reset": [223, 271], "magnitud": [273, 274, 277, 287, 290, 443, 446, 636, 685, 687, 688, 690], "princip": [273, 279, 282, 292, 295, 300, 303], "cosin": [273, 279, 282, 283, 286, 340, 343, 344, 347], "x1_i": [273, 287, 290, 304, 307, 312, 315, 320, 323, 324, 327, 328, 331, 332, 335, 348, 351, 353, 356, 373, 376, 377, 380, 381, 384, 397, 400, 401, 404, 421, 424, 425, 428, 433, 436, 437, 440, 443, 446, 452, 455, 460, 463, 464, 467, 492, 496], "x2_i": [273, 287, 290, 304, 307, 312, 315, 320, 323, 324, 327, 328, 331, 332, 335, 348, 351, 353, 356, 373, 376, 377, 380, 381, 384, 397, 400, 401, 404, 421, 424, 425, 428, 433, 436, 437, 440, 443, 446, 452, 455, 460, 463, 464, 467, 492, 496], "finit": [273, 287, 290, 304, 307, 385, 388, 443, 446, 460, 463, 464, 467], "nor": [273, 287, 290, 443, 446], "nearest": [273, 287, 290, 443, 446, 468, 471], "2019": [273, 287, 290, 365, 368, 443, 446], "commut": [273, 287, 290], "sine": [273, 292, 295, 296, 299, 476, 479, 480, 483], "57": [273, 292, 295, 332, 335, 344, 347], "524": [273, 292, 295], "644": [273, 292, 295], "201": [273, 292, 295, 468, 471], "305": [273, 292, 295], "412": [273, 292, 295], "quotient": [273, 304, 307], "notat": [273, 304, 307, 846, 847, 850], "denot": [273, 304, 307], "pair": [273, 304, 307, 623, 635, 636, 640, 642], "quadrant": [273, 304, 307], "3\u03c0": [273, 304, 307], "549": [273, 308, 311], "bitwis": [273, 312, 315, 324, 327, 332, 335, 437, 440], "AND": [273, 312, 315, 425, 428, 879, 880, 883], "binari": [273, 312, 315, 324, 327, 332, 335, 437, 440, 706, 707, 710], "invert": [273, 316, 319], "arithmet": [273, 328, 331, 846, 855, 858], "propag": [273, 328, 331, 846, 851, 854, 855, 858, 859, 862, 867, 870, 871, 874, 875, 878], "thu": [273, 328, 331, 460, 463, 464, 467, 636, 649, 651], "lh": [273, 328, 331], "rh": [273, 328, 331], "xor": [273, 332, 335, 437, 440], "78": [273, 332, 335, 636, 672, 674, 846, 847, 850], "91": [273, 332, 335, 636, 672, 674, 846, 847, 850], "23": [273, 332, 335, 623, 629, 636, 646, 648, 821, 825], "66": [273, 332, 335, 636, 672, 674, 846, 847, 850], "77": [273, 332, 335, 636, 672, 674, 846, 847, 850], "79": [273, 332, 335], "89": [273, 332, 335, 636, 691, 693, 846, 871, 874], "98": [273, 332, 335, 636, 672, 674, 821, 825, 846, 847, 850], "26": [273, 332, 335, 585, 587, 590, 623, 630, 636, 646, 648, 672, 674, 691, 693, 846, 847, 850], "21": [273, 332, 335, 511, 529, 636, 646, 648, 672, 674, 706, 717, 720, 846, 847, 850], "34": [273, 332, 335, 484, 487], "24": [273, 332, 335, 484, 487, 511, 529, 585, 587, 590, 636, 646, 648, 672, 674, 846, 847, 850], "51": [273, 332, 335], "27": [273, 332, 335, 344, 347, 484, 487, 623, 635, 636, 672, 674, 846, 847, 850], "74": [273, 332, 335], "59": [273, 332, 335], "416": [273, 340, 343], "122": [273, 344, 347], "368": [273, 344, 347], "670": [273, 344, 347], "202": [273, 344, 347, 468, 471], "548": [273, 344, 347], "1490": [273, 344, 347], "dividend": [273, 348, 351, 464, 467], "divisor": [273, 348, 351, 464, 467, 585, 587, 590, 592, 594, 605, 607, 846, 867, 870, 875, 878, 926, 927, 928], "gauss": [273, 357, 360], "exponenti": [273, 357, 360, 361, 364, 421, 424, 460, 463], "logarithm": [273, 361, 364, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 636, 681], "72": [273, 361, 364, 585, 587, 590, 636, 672, 674, 846, 847, 850], "accur": [273, 365, 368], "fdlibm": [273, 365, 368], "compliant": [273, 365, 368, 429, 432, 433, 436, 846, 851, 854, 855, 858, 859, 862], "greatest": [273, 369, 372, 373, 376], "out_i": [273, 385, 388, 389, 392, 393, 396], "threshold": [273, 441, 442], "exce": [273, 442], "y_i": [273, 448, 451], "expon": [273, 460, 463, 511, 576], "versu": [273, 460, 463], "odd": [273, 460, 463], "modulu": [273, 464, 467], "primarili": [273, 464, 467], "5654": [273, 468, 471], "034": [273, 468, 471], "433": [273, 468, 471], "343": [273, 468, 471], "44": [273, 468, 471, 484, 487, 488, 491, 636, 672, 674, 821, 825, 846, 847, 850], "30": [273, 468, 471, 636, 672, 674, 846, 847, 850, 901, 907], "81": [273, 468, 471, 488, 491, 846, 847, 850], "527": [273, 468, 471], "301": [273, 468, 471], "indistinguish": [273, 484, 487], "infinit": [273, 484, 487], "83": [273, 484, 487], "32455532": [273, 484, 487], "89897949": [273, 484, 487], "50": [273, 484, 487, 636, 672, 674, 821, 824, 846, 847, 850], "31": [273, 484, 487], "169": [273, 484, 487], "47": [273, 484, 487], "73": [273, 484, 487, 636, 637, 639, 804, 805, 808], "93": [273, 484, 487], "35": [273, 484, 487, 623, 635, 636, 640, 642, 821, 825, 846, 847, 850], "09": [273, 488, 491, 623, 635], "61": [273, 488, 491, 706, 707, 710], "546": [273, 497, 501], "842": [273, 497, 501], "916": [273, 497, 501, 706, 707, 710], "996": [273, 497, 501], "328": [273, 497, 501], "real": [273, 502, 506], "462": [273, 502, 506], "604": [273, 502, 506], "984": [273, 502, 506], "997": [273, 502, 506, 804, 805, 808], "decim": [273, 507, 510], "inspect": [511, 517, 892, 893], "downscal": [511, 523, 524, 526], "60": [511, 529, 636, 672, 674, 846, 847, 850], "default_v": [511, 532], "catch_except": [511, 532], "rev": [511, 532], "with_cal": [511, 532], "arrang": [511, 533], "123": [511, 536], "mod": [511, 537], "max_freq": [511, 538], "num_band": [511, 538], "pad": [511, 538, 623, 624, 625, 626, 627, 628, 629, 630, 722, 732, 735, 778, 781, 910, 911, 912, 913, 914, 915, 916, 917], "fourier": [511, 538], "band": [511, 538], "linearli": [511, 538, 636, 682, 684], "oppos": [511, 538], "geometr": [511, 538], "seen_set": [511, 549], "local_set": [511, 549], "decrement": [511, 553], "is_arrai": 511, "allow_dupl": [511, 561], "forkserv": [511, 562], "spawn": [511, 562], "hot": [511, 564], "scatter": [511, 564, 567, 568], "overrid": [511, 564], "tmp_dr": [511, 572], "temporari": [511, 572], "min_denomin": [511, 575], "stabil": [511, 575, 576, 835, 836, 839, 841, 844], "_min_denomin": [511, 575], "min_bas": [511, 576], "_min_bas": [511, 576, 804, 805, 808, 924, 925], "100000023841858": [511, 579], "200000047683716": [511, 579], "299999952316284": [511, 579], "400000095367432": [511, 579], "599999904632568": [511, 579], "101": [511, 580], "unpack": [511, 583], "gradienttrack": [585, 586], "delta": [585, 587, 590], "cost": [585, 587, 590, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615, 782, 783, 784, 785], "ws": [585, 587, 590, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615], "en": [585, 587, 590, 592, 594], "wikipedia": [585, 587, 590, 592, 594], "wiki": [585, 587, 590, 592, 594], "stochastic_gradient_desc": [585, 587, 590, 592, 594], "dc": [585, 587, 590, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615], "dw": [585, 587, 590, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615], "averag": [585, 587, 590, 592, 594, 605, 607, 782, 783, 784], "forget": [585, 587, 590, 592, 594, 605, 607, 926, 927, 928], "004": [585, 587, 590], "009": [585, 587, 590], "86": [585, 587, 590], "28": [585, 587, 590, 623, 626, 629, 630, 636, 672, 674, 846, 847, 850], "45": [585, 587, 590, 636, 672, 674, 722, 761, 804, 805, 808, 846, 847, 850], "0125": [585, 587, 590], "601": [585, 587, 590], "581": [585, 587, 590], "025": [585, 587, 590], "992": [585, 587, 590], "209": [585, 587, 590, 826, 827], "271": [585, 587, 590], "0717": [585, 587, 590], "142": [585, 587, 590], "182": [585, 587, 590], "624": [585, 587, 590, 809, 815, 817], "06": [585, 587, 590], "02": [585, 587, 590], "744": [585, 587, 590], "626": [585, 587, 590], "65": [585, 587, 590, 636, 672, 674, 846, 847, 850], "024": [585, 587, 590], "096": [585, 587, 590], "216": [585, 587, 590], "384": [585, 587, 590], "rate": [585, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615, 782, 783, 784, 785, 910, 921, 926, 927, 928, 929, 930, 931], "ws_new": [585, 592, 594, 597, 599, 605, 607, 609, 611, 613, 615], "retain": [585, 596], "trust": [585, 605, 607, 926, 928], "decai": [585, 605, 607, 609, 611, 926, 928, 929], "layerwis": [585, 609, 611, 926, 929], "stride": [623, 624, 625, 626, 627, 628, 629, 630, 910, 911, 912, 913, 914, 915, 916, 917], "data_format": [623, 624, 625, 626, 627, 628, 629, 630, 910, 911, 912, 913, 914, 915, 916, 917], "nwc": [623, 624, 625, 910, 911, 912], "dilat": [623, 624, 625, 626, 627, 628, 629, 630, 910, 911, 912, 913, 914, 915, 916, 917], "convolut": [623, 624, 625, 626, 627, 628, 629, 630, 910, 911, 912, 913, 914, 915, 916, 917], "d_in": [623, 624, 625, 626, 627, 628, 629], "fw": [623, 624, 625, 626, 627, 628, 629, 630], "d_out": [623, 624, 625, 626, 627, 628, 629], "slide": [623, 624, 625, 626, 627, 628, 629, 630, 910, 911, 912, 913, 914, 915, 916, 917], "ncw": [623, 624, 625, 910, 911, 912], "wio": [623, 624], "output_shap": [623, 625, 627, 629, 910, 912, 914, 916], "nhwc": [623, 626, 627, 630, 910, 913, 914, 917], "fh": [623, 626, 627, 628, 629, 630], "nchw": [623, 626, 627, 630, 910, 913, 914, 917], "hwio": [623, 626], "unequ": [623, 626], "unsqueez": [623, 626, 630], "ndhwc": [623, 628, 629, 910, 915, 916], "volum": [623, 628], "fd": [623, 628, 629], "ncdhw": [623, 628, 629, 910, 915, 916], "dhwio": [623, 628], "256": [623, 629], "258": [623, 629], "128": [623, 629, 636, 672, 674], "depthwis": [623, 630, 910, 917], "333": [623, 630], "inp": [623, 630], "prob": [623, 631, 809, 810, 910, 918], "randomli": [623, 631, 910, 918], "bernoulli": [623, 631], "out_featur": [623, 631, 632], "incom": [623, 632], "outer_batch_shap": [623, 632], "inner_batch_shap": [623, 632], "in_featur": [623, 632], "cell": [623, 633, 910, 919], "num_queri": [623, 634, 635], "x_feat_dim": [623, 634], "num_kei": [623, 634, 635], "cont_feat_dim": [623, 634], "numhead": [623, 634], "feat_dim": [623, 634, 635], "out_feat_dim": [623, 634], "score": [623, 635], "04": [623, 635], "03": [623, 635, 804, 805, 808], "08": [623, 635], "decomposit": [636, 637, 639, 678, 680, 685, 687], "symmetr": [636, 637, 639, 649, 651, 652, 654, 703, 705], "u": [636, 637, 639, 685, 687], "577": [636, 637, 639], "707": [636, 637, 639], "vif": [636, 640, 642], "92": [636, 643, 645], "293": [636, 643, 645], "46997": [636, 643, 645], "eigendecomposit": [636, 649, 651], "qlq\u1d40": [636, 649, 651], "orthogon": [636, 649, 651], "eig": [636, 649, 651], "eigenvalu": [636, 649, 651, 652, 654], "eigenvector": [636, 649, 651], "75": [636, 655, 657, 672, 674], "prepend": [636, 658, 661], "singular": [636, 666, 668, 675, 677, 685, 687, 688, 690], "toler": [636, 666, 668, 675, 677], "largest_singular_valu": [636, 666, 668, 675, 677], "array_lik": [636, 672, 674], "33": [636, 672, 674, 804, 805, 808, 846, 847, 850], "36": [636, 672, 674, 846, 847, 850], "84": [636, 672, 674, 846, 847, 850], "105": [636, 672, 674, 706, 707, 710], "112": [636, 672, 674, 846, 847, 850], "104": [636, 672, 674, 846, 847, 850], "120": [636, 672, 674], "moor": [636, 675, 677], "penros": [636, 675, 677], "pseudo": [636, 675, 677], "orthonorm": [636, 678, 680, 685, 687], "2d": [636, 681, 910, 913, 914, 917], "logdet": [636, 681], "coeffici": [636, 682, 684], "usvh": [636, 685, 687], "vh": [636, 685, 687], "hermitian": [636, 685, 687], "et": [636, 685, 687], "cetera": [636, 685, 687], "adjoint": [636, 685, 687], "reconstruct": [636, 685, 687, 826, 827, 833], "reconstructed_x": [636, 685, 687], "contract": [636, 691, 693, 846, 847, 850], "doubl": [636, 691, 693], "singleton": [636, 700, 702, 722, 762, 765, 821, 823, 846, 851, 854, 855, 858, 859, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 880, 883, 884, 887], "liter": [636, 700, 702], "manhattan": [636, 700, 702], "l2": [636, 700, 702], "euclidean": [636, 700, 702], "mathbf": [636, 703, 705], "mathbb": [636, 703, 705], "skew": [636, 703, 705], "entropi": [706, 707, 710, 712, 715, 717, 720], "predict": [706, 707, 710, 712, 715, 717, 720], "smooth": [706, 707, 710, 712, 715, 717, 720], "223": [706, 707, 710], "357": [706, 707, 710, 717, 720], "511": [706, 707, 710], "discret": [706, 712, 715], "3862944": [706, 712, 715], "35667497": [706, 712, 715], "spars": [706, 717, 720], "logit": [706, 717, 720], "793291": [706, 717, 720], "512926": [706, 717, 720], "before_1": [722, 732, 735, 778, 781], "after_1": [722, 732, 735, 778, 781], "before_n": [722, 732, 735, 778, 781], "after_n": [722, 732, 735, 778, 781], "insert": [722, 736, 739, 786, 791, 821, 822], "manipulation_funct": [722, 736, 739], "reorder": [722, 740, 743], "permut": [722, 744, 747, 770, 773], "repetit": [722, 748, 751, 774, 777], "restor": [722, 756, 759], "famili": [722, 766, 769], "intxx": [722, 766, 769], "floatxx": [722, 766, 769], "fomaml_step": 782, "inner_cost_fn": [782, 783, 784], "outer_cost_fn": [782, 783, 784], "inner_grad_step": [782, 783, 784, 785], "inner_learning_r": [782, 783, 784, 785], "inner_optimization_step": [782, 783, 784, 785], "inner_batch_fn": [782, 783, 784], "outer_batch_fn": [782, 783, 784], "average_across_step": [782, 783, 784], "inner_v": [782, 783, 784], "keep_inner_v": [782, 783, 784], "outer_v": [782, 783, 784], "keep_outer_v": [782, 783, 784], "return_inner_v": [782, 783, 784, 785], "num_task": [782, 783, 784, 785], "maml": [782, 783, 784], "recev": [782, 783, 784], "0x7fbc735c2a60": [782, 783, 784, 785], "maml_step": 782, "rece": [782, 784], "reptile_step": 782, "cost_fn": [782, 785], "reptil": [782, 785], "receivng": [782, 785], "all_nested_indic": 786, "include_nest": [786, 787], "_index": [786, 787, 797], "_base": [786, 787, 796, 797], "copy_nest": 786, "to_mut": [786, 788, 798], "mutabl": [786, 788, 798], "insert_into_nest_at_index": 786, "insert_into_nest_at_indic": 786, "map_nest_at_index": 786, "map_nest_at_indic": 786, "multi_index_nest": 786, "nested_ani": 786, "check_nest": [786, 796, 797], "conditon": [786, 796, 797], "nested_indices_wher": 786, "stop_after_n_found": [786, 797], "_depth": [786, 798], "_tuple_check_fn": [786, 798], "_list_check_fn": [786, 798], "_dict_check_fn": [786, 798], "nested_multi_map": 786, "nest0": [786, 799], "ivy_arrai": [786, 799], "funciton": [786, 799], "prune_nest_at_index": 786, "prune_nest_at_indic": 786, "set_nest_at_index": 786, "set_nest_at_indic": 786, "mini": [804, 805, 808, 924, 925], "gamma": [804, 805, 808], "beta": [804, 805, 808], "0976": [804, 805, 808], "3452": [804, 805, 808], "2740": [804, 805, 808], "1047": [804, 805, 808], "5886": [804, 805, 808], "2732": [804, 805, 808], "7696": [804, 805, 808], "7024": [804, 805, 808], "2518": [804, 805, 808], "58": [804, 805, 808, 826, 827], "283": [804, 805, 808], "585": [804, 805, 808], "909": [804, 805, 808], "628": [804, 805, 808], "225": [804, 805, 808], "425": [804, 805, 808], "norm_idx": [804, 805, 808], "228": [804, 805, 808], "0285": [804, 805, 808], "199": [804, 805, 808], "204": [804, 805, 808], "population_s": [809, 810], "num_sampl": [809, 810], "draw": [809, 810, 814, 815, 817], "unnorm": [809, 810], "drawn": [809, 810, 811, 812, 814, 815, 817], "home": [809, 810, 814], "uniformli": [809, 811, 812, 815, 817], "highest": [809, 811, 812], "parameter": [809, 814, 815, 817], "6444774682897879": [809, 814], "811": [809, 814], "508": [809, 814], "564": [809, 814], "7268672": [809, 814], "968": [809, 814], "175": [809, 814, 826, 827], "064": [809, 814], "40935726": [809, 814], "556": [809, 814], "26431865": [809, 815, 817], "475": [809, 815, 817], "878": [809, 815, 817], "861": [809, 815, 817], "89150229": [809, 815, 817], "89629126": [809, 815, 817], "94198485": [809, 815, 817], "91405606": [809, 815, 817], "72848724": [809, 815, 817], "7550739": [809, 815, 817], "00109": [809, 815, 817], "occurr": [821, 822, 823, 826, 827], "yield": [821, 825], "43": [821, 825], "x_j": [826, 827, 828, 832, 834], "impli": [826, 827, 828, 832, 834], "inverse_indic": [826, 827, 833], "aggreg": [826, 827], "fourth": [826, 827], "607": [826, 827], "735": [826, 827], "667": [826, 827], "381": [826, 827], "857": [826, 827], "0396": [826, 827], "166": [826, 827], "828": [826, 827], "144": [826, 827], "40501155": [826, 827], "77361575": [826, 827], "97776199": [826, 827], "36831157": [826, 827], "89148434": [826, 827], "9512272": [826, 827], "67542176": [826, 827], "41985657": [826, 827], "23478023": [826, 827], "1141": [826, 827], "8101": [826, 827], "9298": [826, 827], "8460": [826, 827], "2119": [826, 827], "3519": [826, 827], "6252": [826, 827], "4033": [826, 827], "7443": [826, 827], "2577": [826, 827], "3707": [826, 827], "0545": [826, 827], "3238": [826, 827], "5944": [826, 827], "0775": [826, 827], "4327": [826, 827], "176": [826, 827], "889": [826, 827], "763": [826, 827], "071": [826, 827], "262": [826, 827], "456": [826, 827], "114": [826, 827], "349": [826, 827], "615": [826, 827], "594": [826, 827], "335": [826, 827], "212": [826, 827], "457": [826, 827], "827": [826, 827], "set_funct": [826, 828, 832], "ascend": [835, 836, 839], "einstein": [846, 847, 850], "summat": [846, 847, 850], "seq": [846, 847, 850], "jk": [846, 847, 850], "ik": [846, 847, 850], "126": [846, 847, 850], "510": [846, 847, 850], "99": [846, 847, 850], "108": [846, 847, 850], "117": [846, 847, 850], "sentinel": [846, 851, 854, 859, 862], "unsign": [846, 863, 866, 871, 874], "degre": [846, 867, 870, 875, 878], "bessel": [846, 867, 870, 875, 878], "8164966": [846, 867, 870], "varianc": [846, 875, 878], "unbias": [846, 875, 878], "simplicit": [879, 880, 883], "autom": 888, "grow": 888, "ai": 888, "got": 888, "colab": 888, "sharp": 888, "weekli": 888, "event": 888, "immedi": 888, "favorit": 888, "jax_concat": 888, "tf_concat": 888, "np_concat": 888, "mx_concat": 888, "torch_concat": 888, "prompt": 888, "get_devic": 888, "reduce_prod": 888, "gradient_imag": 888, "linalg": 888, "bilinear_resampl": 888, "stack_imag": 888, "neural_net": 888, "ecosystem": [888, 894], "popular": [888, 894], "acceler": 888, "articl": 888, "lenton2021ivi": 888, "inter": 888, "lenton": 888, "daniel": 888, "pardo": 888, "fabio": 888, "falck": 888, "fabian": 888, "jame": 888, "stephen": 888, "clark": 888, "ronald": 888, "journal": 888, "arxiv": 888, "preprint": 888, "2102": 888, "02886": 888, "2021": 888, "add_array_spec": 891, "fn_array_spec": 891, "geglu": 896, "native_modul": [899, 900], "native_module_class": [899, 900], "firstlayersiren": 901, "kaimingnorm": [901, 905], "negative_slop": 901, "Ones": 901, "siren": 901, "w0": [901, 907], "filter_s": [910, 911, 912], "1d": [910, 911, 912], "conv1dtranspos": 910, "filter_shap": [910, 913, 914, 915, 916, 917], "conv2dtranspos": 910, "conv3dtranspos": 910, "depthwiseconv2d": 910, "num_channel": [910, 917], "bernoul": [910, 918], "num_lay": [910, 919], "return_sequ": [910, 919], "return_st": [910, 919], "get_initial_st": [910, 919], "dens": [910, 920], "multiheadattent": 910, "query_dim": [910, 921], "head_dim": [910, 921], "dropout_r": [910, 921], "context_dim": [910, 921], "with_to_q_fn": [910, 921], "with_to_kv_fn": [910, 921], "with_to_out_fn": [910, 921], "build_mod": [910, 921, 922, 923], "on_init": [910, 921, 922, 923], "__call__": [910, 921, 922, 923], "store_var": [922, 923], "arg_stateful_idx": [922, 923], "kwarg_stateful_idx": [922, 923], "fallback_to_non_compil": [922, 923, 926, 930], "with_partial_v": [922, 923], "initialz": [922, 923], "from_cal": [922, 923], "check_submod_ret": [922, 923], "get_mod_kei": [922, 923], "top_mod": [922, 923], "mod_depth": [922, 923], "mod_height": [922, 923], "mod_with_top_mod_key_chain": [922, 923], "save_weight": [922, 923], "weights_path": [922, 923], "show_mod_in_top_mod": [922, 923], "upper_depth": [922, 923], "lower_depth": [922, 923], "show_structur": [922, 923], "show_v_in_top_v": [922, 923], "sub_mod": [922, 923], "show_v": [922, 923], "track_submod_call_ord": [922, 923], "track_submod_ret": [922, 923], "v_with_top_v_key_chain": [922, 923], "layernorm": 924, "normalized_shap": [924, 925], "elementwise_affin": [924, 925], "trail": [924, 925], "affin": [924, 925], "0001": [926, 927, 928], "init_on_first_step": [926, 930], "ignore_miss": [926, 930], "overriden": [926, 930], "sgd": 926, "stochast": [926, 931], "sub_modul": [932, 933]}, "objects": {"ivy.array": [[22, 0, 0, "-", "activations"], [24, 0, 0, "-", "conversions"], [29, 0, 0, "-", "creation"], [31, 0, 0, "-", "data_type"], [33, 0, 0, "-", "device"], [35, 0, 0, "-", "elementwise"], [37, 0, 0, "-", "general"], [39, 0, 0, "-", "gradients"], [41, 0, 0, "-", "image"], [43, 0, 0, "-", "layers"], [45, 0, 0, "-", "linear_algebra"], [47, 0, 0, "-", "losses"], [49, 0, 0, "-", "manipulation"], [51, 0, 0, "-", "norms"], [53, 0, 0, "-", "random"], [55, 0, 0, "-", "searching"], [57, 0, 0, "-", "set"], [59, 0, 0, "-", "sorting"], [61, 0, 0, "-", "statistical"], [63, 0, 0, "-", "utility"], [65, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[23, 1, 1, "", "ArrayWithActivations"]], "ivy.array.array_methods": [[275, 2, 1, "", "abs"], [280, 2, 1, "", "acos"], [284, 2, 1, "", "acosh"], [588, 2, 1, "", "adam_step"], [288, 2, 1, "", "add"], [881, 2, 1, "", "all"], [513, 2, 1, "", "all_equal"], [885, 2, 1, "", "any"], [837, 2, 1, "", "argsort"], [293, 2, 1, "", "asin"], [297, 2, 1, "", "asinh"], [301, 2, 1, "", "atan"], [305, 2, 1, "", "atan2"], [309, 2, 1, "", "atanh"], [708, 2, 1, "", "binary_cross_entropy"], [313, 2, 1, "", "bitwise_and"], [317, 2, 1, "", "bitwise_invert"], [321, 2, 1, "", "bitwise_left_shift"], [325, 2, 1, "", "bitwise_or"], [329, 2, 1, "", "bitwise_right_shift"], [333, 2, 1, "", "bitwise_xor"], [196, 2, 1, "", "can_cast"], [337, 2, 1, "", "ceil"], [638, 2, 1, "", "cholesky"], [724, 2, 1, "", "clip"], [729, 2, 1, "", "concat"], [733, 2, 1, "", "constant_pad"], [341, 2, 1, "", "cos"], [345, 2, 1, "", "cosh"], [641, 2, 1, "", "cross"], [713, 2, 1, "", "cross_entropy"], [644, 2, 1, "", "det"], [647, 2, 1, "", "diagonal"], [349, 2, 1, "", "divide"], [650, 2, 1, "", "eigh"], [653, 2, 1, "", "eigvalsh"], [848, 2, 1, "", "einsum"], [354, 2, 1, "", "equal"], [358, 2, 1, "", "erf"], [362, 2, 1, "", "exp"], [737, 2, 1, "", "expand_dims"], [366, 2, 1, "", "expm1"], [741, 2, 1, "", "flip"], [370, 2, 1, "", "floor"], [374, 2, 1, "", "floor_divide"], [541, 2, 1, "", "gather_nd"], [378, 2, 1, "", "greater"], [382, 2, 1, "", "greater_equal"], [656, 2, 1, "", "inv"], [386, 2, 1, "", "isfinite"], [390, 2, 1, "", "isinf"], [394, 2, 1, "", "isnan"], [806, 2, 1, "", "layer_norm"], [398, 2, 1, "", "less"], [402, 2, 1, "", "less_equal"], [406, 2, 1, "", "log"], [410, 2, 1, "", "log10"], [414, 2, 1, "", "log1p"], [418, 2, 1, "", "log2"], [422, 2, 1, "", "logaddexp"], [426, 2, 1, "", "logical_and"], [430, 2, 1, "", "logical_not"], [434, 2, 1, "", "logical_or"], [438, 2, 1, "", "logical_xor"], [659, 2, 1, "", "matmul"], [663, 2, 1, "", "matrix_norm"], [667, 2, 1, "", "matrix_rank"], [670, 2, 1, "", "matrix_transpose"], [852, 2, 1, "", "max"], [856, 2, 1, "", "mean"], [860, 2, 1, "", "min"], [444, 2, 1, "", "multiply"], [449, 2, 1, "", "negative"], [453, 2, 1, "", "not_equal"], [673, 2, 1, "", "outer"], [745, 2, 1, "", "permute_dims"], [676, 2, 1, "", "pinv"], [457, 2, 1, "", "positive"], [461, 2, 1, "", "pow"], [864, 2, 1, "", "prod"], [679, 2, 1, "", "qr"], [465, 2, 1, "", "remainder"], [749, 2, 1, "", "repeat"], [753, 2, 1, "", "reshape"], [757, 2, 1, "", "roll"], [469, 2, 1, "", "round"], [473, 2, 1, "", "sign"], [477, 2, 1, "", "sin"], [481, 2, 1, "", "sinh"], [683, 2, 1, "", "solve"], [842, 2, 1, "", "sort"], [718, 2, 1, "", "sparse_cross_entropy"], [485, 2, 1, "", "sqrt"], [489, 2, 1, "", "square"], [763, 2, 1, "", "squeeze"], [767, 2, 1, "", "stack"], [868, 2, 1, "", "std"], [494, 2, 1, "", "subtract"], [872, 2, 1, "", "sum"], [686, 2, 1, "", "svd"], [689, 2, 1, "", "svdvals"], [771, 2, 1, "", "swapaxes"], [499, 2, 1, "", "tan"], [504, 2, 1, "", "tanh"], [692, 2, 1, "", "tensordot"], [775, 2, 1, "", "tile"], [695, 2, 1, "", "trace"], [508, 2, 1, "", "trunc"], [830, 2, 1, "", "unique_counts"], [876, 2, 1, "", "var"], [698, 2, 1, "", "vecdot"], [701, 2, 1, "", "vector_norm"], [704, 2, 1, "", "vector_to_skew_symmetric_matrix"], [779, 2, 1, "", "zero_pad"]], "ivy.array.conversions": [[25, 2, 1, "", "args_to_ivy"], [26, 2, 1, "", "args_to_native"], [27, 2, 1, "", "to_ivy"], [28, 2, 1, "", "to_native"]], "ivy.array.creation": [[30, 1, 1, "", "ArrayWithCreation"]], "ivy.array.data_type": [[32, 1, 1, "", "ArrayWithDataTypes"]], "ivy.array.data_type.ArrayWithDataTypes": [[32, 3, 1, "", "can_cast"]], "ivy.array.device": [[34, 1, 1, "", "ArrayWithDevice"]], "ivy.array.elementwise": [[36, 1, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[36, 3, 1, "", "abs"], [36, 3, 1, "", "acos"], [36, 3, 1, "", "acosh"], [36, 3, 1, "", "add"], [36, 3, 1, "", "asin"], [36, 3, 1, "", "asinh"], [36, 3, 1, "", "atan"], [36, 3, 1, "", "atan2"], [36, 3, 1, "", "atanh"], [36, 3, 1, "", "bitwise_and"], [36, 3, 1, "", "bitwise_invert"], [36, 3, 1, "", "bitwise_left_shift"], [36, 3, 1, "", "bitwise_or"], [36, 3, 1, "", "bitwise_right_shift"], [36, 3, 1, "", "bitwise_xor"], [36, 3, 1, "", "ceil"], [36, 3, 1, "", "cos"], [36, 3, 1, "", "cosh"], [36, 3, 1, "", "divide"], [36, 3, 1, "", "equal"], [36, 3, 1, "", "erf"], [36, 3, 1, "", "exp"], [36, 3, 1, "", "expm1"], [36, 3, 1, "", "floor"], [36, 3, 1, "", "floor_divide"], [36, 3, 1, "", "greater"], [36, 3, 1, "", "greater_equal"], [36, 3, 1, "", "isfinite"], [36, 3, 1, "", "isinf"], [36, 3, 1, "", "isnan"], [36, 3, 1, "", "less"], [36, 3, 1, "", "less_equal"], [36, 3, 1, "", "log"], [36, 3, 1, "", "log10"], [36, 3, 1, "", "log1p"], [36, 3, 1, "", "log2"], [36, 3, 1, "", "logaddexp"], [36, 3, 1, "", "logical_and"], [36, 3, 1, "", "logical_not"], [36, 3, 1, "", "logical_or"], [36, 3, 1, "", "logical_xor"], [36, 3, 1, "", "multiply"], [36, 3, 1, "", "negative"], [36, 3, 1, "", "not_equal"], [36, 3, 1, "", "positive"], [36, 3, 1, "", "pow"], [36, 3, 1, "", "remainder"], [36, 3, 1, "", "round"], [36, 3, 1, "", "sign"], [36, 3, 1, "", "sin"], [36, 3, 1, "", "sinh"], [36, 3, 1, "", "sqrt"], [36, 3, 1, "", "square"], [36, 3, 1, "", "subtract"], [36, 3, 1, "", "tan"], [36, 3, 1, "", "tanh"], [36, 3, 1, "", "trunc"]], "ivy.array.general": [[38, 1, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[38, 3, 1, "", "all_equal"], [38, 3, 1, "", "gather_nd"]], "ivy.array.gradients": [[40, 1, 1, "", "ArrayWithGradients"]], "ivy.array.gradients.ArrayWithGradients": [[40, 3, 1, "", "adam_step"]], "ivy.array.image": [[42, 1, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[44, 1, 1, "", "ArrayWithLayers"]], "ivy.array.linear_algebra": [[46, 1, 1, "", "ArrayWithLinearAlgebra"]], "ivy.array.linear_algebra.ArrayWithLinearAlgebra": [[46, 3, 1, "", "cholesky"], [46, 3, 1, "", "cross"], [46, 3, 1, "", "det"], [46, 3, 1, "", "diagonal"], [46, 3, 1, "", "eigh"], [46, 3, 1, "", "eigvalsh"], [46, 3, 1, "", "inv"], [46, 3, 1, "", "matmul"], [46, 3, 1, "", "matrix_norm"], [46, 3, 1, "", "matrix_rank"], [46, 3, 1, "", "matrix_transpose"], [46, 3, 1, "", "outer"], [46, 3, 1, "", "pinv"], [46, 3, 1, "", "qr"], [46, 3, 1, "", "solve"], [46, 3, 1, "", "svd"], [46, 3, 1, "", "svdvals"], [46, 3, 1, "", "tensordot"], [46, 3, 1, "", "trace"], [46, 3, 1, "", "vecdot"], [46, 3, 1, "", "vector_norm"], [46, 3, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.array.losses": [[48, 1, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[48, 3, 1, "", "binary_cross_entropy"], [48, 3, 1, "", "cross_entropy"], [48, 3, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[50, 1, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[50, 3, 1, "", "clip"], [50, 3, 1, "", "concat"], [50, 3, 1, "", "constant_pad"], [50, 3, 1, "", "expand_dims"], [50, 3, 1, "", "flip"], [50, 3, 1, "", "permute_dims"], [50, 3, 1, "", "repeat"], [50, 3, 1, "", "reshape"], [50, 3, 1, "", "roll"], [50, 3, 1, "", "squeeze"], [50, 3, 1, "", "stack"], [50, 3, 1, "", "swapaxes"], [50, 3, 1, "", "tile"], [50, 3, 1, "", "zero_pad"]], "ivy.array.norms": [[52, 1, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[52, 3, 1, "", "layer_norm"]], "ivy.array.random": [[54, 1, 1, "", "ArrayWithRandom"]], "ivy.array.searching": [[56, 1, 1, "", "ArrayWithSearching"]], "ivy.array.set": [[58, 1, 1, "", "ArrayWithSet"]], "ivy.array.set.ArrayWithSet": [[58, 3, 1, "", "unique_counts"]], "ivy.array.sorting": [[60, 1, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[60, 3, 1, "", "argsort"], [60, 3, 1, "", "sort"]], "ivy.array.statistical": [[62, 1, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[62, 3, 1, "", "einsum"], [62, 3, 1, "", "max"], [62, 3, 1, "", "mean"], [62, 3, 1, "", "min"], [62, 3, 1, "", "prod"], [62, 3, 1, "", "std"], [62, 3, 1, "", "sum"], [62, 3, 1, "", "var"]], "ivy.array.utility": [[64, 1, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[64, 3, 1, "", "all"], [64, 3, 1, "", "any"]], "ivy.array.wrapping": [[66, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy": [[0, 0, 0, "-", "backend_handler"], [146, 0, 0, "-", "func_wrapper"], [891, 0, 0, "-", "inspection"], [895, 0, 0, "-", "stateful"], [935, 0, 0, "-", "verbosity"]], "ivy.backend_handler": [[0, 1, 1, "", "ContextManager"], [2, 2, 1, "", "choose_random_backend"], [3, 2, 1, "", "clear_backend_stack"], [4, 2, 1, "", "current_backend"], [5, 2, 1, "", "get_backend"], [6, 2, 1, "", "set_backend"], [7, 2, 1, "", "try_import_ivy_jax"], [8, 2, 1, "", "try_import_ivy_mxnet"], [9, 2, 1, "", "try_import_ivy_numpy"], [10, 2, 1, "", "try_import_ivy_tf"], [11, 2, 1, "", "try_import_ivy_torch"], [12, 2, 1, "", "unset_backend"]], "ivy.backend_handler.ContextManager": [[0, 3, 1, "", "__init__"]], "ivy.container": [[67, 0, 0, "-", "activations"], [69, 0, 0, "-", "base"], [71, 0, 0, "-", "container"], [74, 0, 0, "-", "creation"], [76, 0, 0, "-", "data_type"], [78, 0, 0, "-", "device"], [80, 0, 0, "-", "elementwise"], [82, 0, 0, "-", "general"], [84, 0, 0, "-", "gradients"], [86, 0, 0, "-", "image"], [88, 0, 0, "-", "layers"], [90, 0, 0, "-", "linear_algebra"], [92, 0, 0, "-", "losses"], [94, 0, 0, "-", "manipulation"], [96, 0, 0, "-", "norms"], [98, 0, 0, "-", "random"], [100, 0, 0, "-", "searching"], [102, 0, 0, "-", "set"], [104, 0, 0, "-", "sorting"], [106, 0, 0, "-", "statistical"], [108, 0, 0, "-", "utility"], [110, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[68, 1, 1, "", "ContainerWithActivations"]], "ivy.container.base": [[70, 1, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[70, 3, 1, "", "__getitem__"], [70, 3, 1, "", "__init__"], [70, 3, 1, "", "__setitem__"], [70, 3, 1, "", "all_false"], [70, 3, 1, "", "all_key_chains"], [70, 3, 1, "", "all_true"], [70, 3, 1, "", "arrays_as_lists"], [70, 3, 1, "", "as_arrays"], [70, 3, 1, "", "as_bools"], [70, 3, 1, "", "as_ones"], [70, 3, 1, "", "as_random_uniform"], [70, 3, 1, "", "as_variables"], [70, 3, 1, "", "as_zeros"], [70, 3, 1, "", "assert_contains_sub_container"], [70, 3, 1, "", "assert_contains_sub_structure"], [70, 3, 1, "", "assert_identical"], [70, 3, 1, "", "assert_identical_structure"], [70, 3, 1, "", "at_key_chain"], [70, 3, 1, "", "at_key_chains"], [70, 3, 1, "", "at_keys"], [70, 3, 1, "", "clip"], [70, 3, 1, "", "combine"], [70, 3, 1, "", "common_key_chains"], [70, 4, 1, "", "config"], [70, 3, 1, "", "contains_sub_container"], [70, 3, 1, "", "contains_sub_structure"], [70, 3, 1, "", "copy"], [70, 3, 1, "", "create_if_absent"], [70, 3, 1, "", "cutoff_at_depth"], [70, 3, 1, "", "cutoff_at_height"], [70, 3, 1, "", "deep_copy"], [70, 4, 1, "", "dev"], [70, 3, 1, "", "dev_clone"], [70, 3, 1, "", "dev_dist"], [70, 4, 1, "", "dev_str"], [70, 3, 1, "", "diff"], [70, 3, 1, "", "dtype"], [70, 3, 1, "", "einops_rearrange"], [70, 3, 1, "", "einops_reduce"], [70, 3, 1, "", "einops_repeat"], [70, 3, 1, "", "find_sub_container"], [70, 3, 1, "", "find_sub_structure"], [70, 3, 1, "", "flatten_key_chain"], [70, 3, 1, "", "flatten_key_chains"], [70, 3, 1, "", "format_key_chains"], [70, 3, 1, "", "from_disk_as_hdf5"], [70, 3, 1, "", "from_disk_as_json"], [70, 3, 1, "", "from_disk_as_pickled"], [70, 3, 1, "", "from_flat_list"], [70, 3, 1, "", "from_numpy"], [70, 3, 1, "", "gather"], [70, 3, 1, "", "gather_nd"], [70, 3, 1, "", "h5_file_size"], [70, 3, 1, "", "handle_inplace"], [70, 3, 1, "", "has_key"], [70, 3, 1, "", "has_key_chain"], [70, 3, 1, "", "has_nans"], [70, 3, 1, "", "identical"], [70, 3, 1, "", "identical_array_shapes"], [70, 3, 1, "", "identical_configs"], [70, 3, 1, "", "identical_structure"], [70, 3, 1, "", "if_exists"], [70, 3, 1, "", "inplace_update"], [70, 4, 1, "", "ivy"], [70, 3, 1, "", "key_chains_containing"], [70, 3, 1, "", "list_join"], [70, 3, 1, "", "list_stack"], [70, 3, 1, "", "map"], [70, 3, 1, "", "map_conts"], [70, 3, 1, "", "matrix_norm"], [70, 4, 1, "", "max_depth"], [70, 3, 1, "", "maximum"], [70, 3, 1, "", "minimum"], [70, 3, 1, "", "multi_map"], [70, 3, 1, "", "multi_map_in_static_method"], [70, 3, 1, "", "num_arrays"], [70, 3, 1, "", "overwrite_at_key_chain"], [70, 3, 1, "", "overwrite_at_key_chains"], [70, 3, 1, "", "prune_empty"], [70, 3, 1, "", "prune_key_chain"], [70, 3, 1, "", "prune_key_chains"], [70, 3, 1, "", "prune_key_from_key_chains"], [70, 3, 1, "", "prune_keys"], [70, 3, 1, "", "prune_keys_from_key_chains"], [70, 3, 1, "", "reduce"], [70, 3, 1, "", "remove_key_length_limit"], [70, 3, 1, "", "remove_print_limit"], [70, 3, 1, "", "reshape_like"], [70, 3, 1, "", "restructure"], [70, 3, 1, "", "restructure_key_chains"], [70, 3, 1, "", "set_at_key_chain"], [70, 3, 1, "", "set_at_key_chains"], [70, 3, 1, "", "set_at_keys"], [70, 3, 1, "", "set_framework"], [70, 3, 1, "", "set_ivy_backend"], [70, 4, 1, "", "shape"], [70, 4, 1, "", "shapes"], [70, 3, 1, "", "show"], [70, 3, 1, "", "show_sub_container"], [70, 3, 1, "", "shuffle"], [70, 3, 1, "", "shuffle_h5_file"], [70, 3, 1, "", "size_ordered_arrays"], [70, 3, 1, "", "slice_keys"], [70, 3, 1, "", "slice_via_key"], [70, 3, 1, "", "sort_by_key"], [70, 3, 1, "", "split"], [70, 3, 1, "", "stop_gradients"], [70, 3, 1, "", "structural_diff"], [70, 3, 1, "", "to_device"], [70, 3, 1, "", "to_dict"], [70, 3, 1, "", "to_disk_as_hdf5"], [70, 3, 1, "", "to_disk_as_json"], [70, 3, 1, "", "to_disk_as_pickled"], [70, 3, 1, "", "to_flat_list"], [70, 3, 1, "", "to_iterator"], [70, 3, 1, "", "to_iterator_keys"], [70, 3, 1, "", "to_iterator_values"], [70, 3, 1, "", "to_ivy"], [70, 3, 1, "", "to_jsonable"], [70, 3, 1, "", "to_list"], [70, 3, 1, "", "to_multi_dev"], [70, 3, 1, "", "to_native"], [70, 3, 1, "", "to_numpy"], [70, 3, 1, "", "to_raw"], [70, 3, 1, "", "trim_key"], [70, 3, 1, "", "try_kc"], [70, 3, 1, "", "unify"], [70, 3, 1, "", "unstack"], [70, 3, 1, "", "update_config"], [70, 3, 1, "", "vector_norm"], [70, 3, 1, "", "with_default_key_color"], [70, 3, 1, "", "with_entries_as_lists"], [70, 3, 1, "", "with_ivy_backend"], [70, 3, 1, "", "with_key_length_limit"], [70, 3, 1, "", "with_print_indent"], [70, 3, 1, "", "with_print_limit"], [70, 3, 1, "", "with_print_line_spacing"]], "ivy.container.container": [[72, 1, 1, "", "Container"], [73, 1, 1, "", "MultiDevContainer"]], "ivy.container.container.Container": [[72, 3, 1, "", "__add__"], [72, 3, 1, "", "__init__"], [72, 3, 1, "", "__radd__"], [72, 3, 1, "", "arange"], [72, 3, 1, "", "arg_info"], [72, 3, 1, "", "arg_names"], [72, 3, 1, "", "argmax"], [72, 3, 1, "", "argmin"], [72, 3, 1, "", "array"], [72, 3, 1, "", "array_equal"], [72, 3, 1, "", "arrays_equal"], [72, 3, 1, "", "as_ivy_dev"], [72, 3, 1, "", "as_ivy_dtype"], [72, 3, 1, "", "as_native_dev"], [72, 3, 1, "", "as_native_dtype"], [72, 3, 1, "", "asarray"], [72, 3, 1, "", "assert_supports_inplace"], [72, 3, 1, "", "astype"], [72, 3, 1, "", "broadcast_arrays"], [72, 3, 1, "", "broadcast_to"], [72, 3, 1, "", "cache_fn"], [72, 3, 1, "", "cholesky"], [72, 3, 1, "", "clear_mem_on_dev"], [72, 3, 1, "", "clip_matrix_norm"], [72, 3, 1, "", "closest_valid_dtype"], [72, 3, 1, "", "container_types"], [72, 3, 1, "", "conv1d"], [72, 3, 1, "", "conv1d_transpose"], [72, 3, 1, "", "conv2d"], [72, 3, 1, "", "conv2d_transpose"], [72, 3, 1, "", "conv3d"], [72, 3, 1, "", "conv3d_transpose"], [72, 3, 1, "", "copy_array"], [72, 3, 1, "", "cross"], [72, 3, 1, "", "cumprod"], [72, 3, 1, "", "cumsum"], [72, 3, 1, "", "current_backend"], [72, 3, 1, "", "current_backend_str"], [72, 3, 1, "", "default"], [72, 3, 1, "", "default_device"], [72, 3, 1, "", "default_dtype"], [72, 3, 1, "", "default_float_dtype"], [72, 3, 1, "", "default_int_dtype"], [72, 3, 1, "", "depthwise_conv2d"], [72, 3, 1, "", "det"], [72, 3, 1, "", "dev_clone_array"], [72, 3, 1, "", "dev_clone_iter"], [72, 3, 1, "", "dev_clone_nest"], [72, 3, 1, "", "dev_dist_array"], [72, 3, 1, "", "dev_dist_iter"], [72, 3, 1, "", "dev_dist_nest"], [72, 3, 1, "", "dev_unify"], [72, 3, 1, "", "dev_unify_array"], [72, 3, 1, "", "dev_unify_iter"], [72, 3, 1, "", "dev_unify_nest"], [72, 3, 1, "", "dev_util"], [72, 3, 1, "", "diagonal"], [72, 3, 1, "", "dropout"], [72, 3, 1, "", "dtype_bits"], [72, 3, 1, "", "eigh"], [72, 3, 1, "", "eigvalsh"], [72, 3, 1, "", "empty"], [72, 3, 1, "", "empty_like"], [72, 3, 1, "", "execute_with_gradients"], [72, 3, 1, "", "exists"], [72, 3, 1, "", "eye"], [72, 3, 1, "", "finfo"], [72, 3, 1, "", "floormod"], [72, 3, 1, "", "fourier_encode"], [72, 3, 1, "", "from_dlpack"], [72, 3, 1, "", "full"], [72, 3, 1, "", "full_like"], [72, 3, 1, "", "function_supported_dtypes"], [72, 3, 1, "", "function_unsupported_dtypes"], [72, 3, 1, "", "gelu"], [72, 3, 1, "", "get_all_arrays_in_memory"], [72, 3, 1, "", "get_all_ivy_arrays_on_dev"], [72, 3, 1, "", "get_min_base"], [72, 3, 1, "", "get_min_denominator"], [72, 3, 1, "", "get_num_dims"], [72, 3, 1, "", "get_referrers_recursive"], [72, 3, 1, "", "gpu_is_available"], [72, 3, 1, "", "handle_nestable"], [72, 3, 1, "", "handle_out_argument"], [72, 3, 1, "", "iinfo"], [72, 3, 1, "", "indices_where"], [72, 3, 1, "", "infer_device"], [72, 3, 1, "", "infer_dtype"], [72, 3, 1, "", "inplace_arrays_supported"], [72, 3, 1, "", "inplace_decrement"], [72, 3, 1, "", "inplace_increment"], [72, 3, 1, "", "inplace_variables_supported"], [72, 3, 1, "", "inputs_to_native_arrays"], [72, 3, 1, "", "inv"], [72, 3, 1, "", "invalid_dtype"], [72, 3, 1, "", "is_float_dtype"], [72, 3, 1, "", "is_int_dtype"], [72, 3, 1, "", "is_ivy_container"], [72, 3, 1, "", "leaky_relu"], [72, 3, 1, "", "linear"], [72, 3, 1, "", "linspace"], [72, 3, 1, "", "logspace"], [72, 3, 1, "", "lstm_update"], [72, 3, 1, "", "match_kwargs"], [72, 3, 1, "", "matrix_power"], [72, 3, 1, "", "matrix_rank"], [72, 3, 1, "", "matrix_transpose"], [72, 3, 1, "", "meshgrid"], [72, 3, 1, "", "multi_head_attention"], [72, 3, 1, "", "multinomial"], [72, 3, 1, "", "multiprocessing"], [72, 3, 1, "", "native_array"], [72, 3, 1, "", "nonzero"], [72, 3, 1, "", "num_arrays_in_memory"], [72, 3, 1, "", "num_cpu_cores"], [72, 3, 1, "", "num_gpus"], [72, 3, 1, "", "num_ivy_arrays_on_dev"], [72, 3, 1, "", "one_hot"], [72, 3, 1, "", "ones"], [72, 3, 1, "", "ones_like"], [72, 3, 1, "", "outer"], [72, 3, 1, "", "outputs_to_ivy_arrays"], [72, 3, 1, "", "percent_used_mem_on_dev"], [72, 3, 1, "", "pinv"], [72, 3, 1, "", "print_all_arrays_in_memory"], [72, 3, 1, "", "print_all_ivy_arrays_on_dev"], [72, 3, 1, "", "promote_types"], [72, 3, 1, "", "qr"], [72, 3, 1, "", "queue_timeout"], [72, 3, 1, "", "randint"], [72, 3, 1, "", "random_normal"], [72, 3, 1, "", "relu"], [72, 3, 1, "", "result_type"], [72, 3, 1, "", "scaled_dot_product_attention"], [72, 3, 1, "", "scatter_flat"], [72, 3, 1, "", "scatter_nd"], [72, 3, 1, "", "seed"], [72, 3, 1, "", "set_default_device"], [72, 3, 1, "", "set_default_dtype"], [72, 3, 1, "", "set_default_float_dtype"], [72, 3, 1, "", "set_default_int_dtype"], [72, 3, 1, "", "set_min_base"], [72, 3, 1, "", "set_min_denominator"], [72, 3, 1, "", "set_queue_timeout"], [72, 3, 1, "", "set_split_factor"], [72, 3, 1, "", "set_tmp_dir"], [72, 3, 1, "", "set_with_grads"], [72, 3, 1, "", "shape_to_tuple"], [72, 3, 1, "", "sigmoid"], [72, 3, 1, "", "slogdet"], [72, 3, 1, "", "softmax"], [72, 3, 1, "", "softplus"], [72, 3, 1, "", "solve"], [72, 3, 1, "", "split_factor"], [72, 3, 1, "", "split_func_call"], [72, 3, 1, "", "stable_divide"], [72, 3, 1, "", "stable_pow"], [72, 3, 1, "", "static_acos"], [72, 3, 1, "", "static_acosh"], [72, 3, 1, "", "static_all"], [72, 3, 1, "", "static_any"], [72, 3, 1, "", "static_arange"], [72, 3, 1, "", "static_arg_info"], [72, 3, 1, "", "static_arg_names"], [72, 3, 1, "", "static_argmax"], [72, 3, 1, "", "static_argmin"], [72, 3, 1, "", "static_array"], [72, 3, 1, "", "static_array_equal"], [72, 3, 1, "", "static_arrays_equal"], [72, 3, 1, "", "static_as_ivy_dev"], [72, 3, 1, "", "static_as_ivy_dtype"], [72, 3, 1, "", "static_as_native_dev"], [72, 3, 1, "", "static_as_native_dtype"], [72, 3, 1, "", "static_asarray"], [72, 3, 1, "", "static_asin"], [72, 3, 1, "", "static_asinh"], [72, 3, 1, "", "static_assert_supports_inplace"], [72, 3, 1, "", "static_astype"], [72, 3, 1, "", "static_atan"], [72, 3, 1, "", "static_atan2"], [72, 3, 1, "", "static_atanh"], [72, 3, 1, "", "static_bitwise_and"], [72, 3, 1, "", "static_bitwise_invert"], [72, 3, 1, "", "static_bitwise_left_shift"], [72, 3, 1, "", "static_bitwise_or"], [72, 3, 1, "", "static_bitwise_right_shift"], [72, 3, 1, "", "static_bitwise_xor"], [72, 3, 1, "", "static_broadcast_arrays"], [72, 3, 1, "", "static_broadcast_to"], [72, 3, 1, "", "static_cache_fn"], [72, 3, 1, "", "static_ceil"], [72, 3, 1, "", "static_cholesky"], [72, 3, 1, "", "static_clear_mem_on_dev"], [72, 3, 1, "", "static_clip_matrix_norm"], [72, 3, 1, "", "static_clip_vector_norm"], [72, 3, 1, "", "static_closest_valid_dtype"], [72, 3, 1, "", "static_concat"], [72, 3, 1, "", "static_constant_pad"], [72, 3, 1, "", "static_container_types"], [72, 3, 1, "", "static_conv1d"], [72, 3, 1, "", "static_conv1d_transpose"], [72, 3, 1, "", "static_conv2d"], [72, 3, 1, "", "static_conv2d_transpose"], [72, 3, 1, "", "static_conv3d"], [72, 3, 1, "", "static_conv3d_transpose"], [72, 3, 1, "", "static_copy_array"], [72, 3, 1, "", "static_cos"], [72, 3, 1, "", "static_cosh"], [72, 3, 1, "", "static_cross"], [72, 3, 1, "", "static_cumprod"], [72, 3, 1, "", "static_cumsum"], [72, 3, 1, "", "static_current_backend"], [72, 3, 1, "", "static_current_backend_str"], [72, 3, 1, "", "static_default"], [72, 3, 1, "", "static_default_device"], [72, 3, 1, "", "static_default_dtype"], [72, 3, 1, "", "static_default_float_dtype"], [72, 3, 1, "", "static_default_int_dtype"], [72, 3, 1, "", "static_depthwise_conv2d"], [72, 3, 1, "", "static_det"], [72, 3, 1, "", "static_dev"], [72, 3, 1, "", "static_dev_clone"], [72, 3, 1, "", "static_dev_clone_array"], [72, 3, 1, "", "static_dev_clone_iter"], [72, 3, 1, "", "static_dev_clone_nest"], [72, 3, 1, "", "static_dev_dist"], [72, 3, 1, "", "static_dev_dist_array"], [72, 3, 1, "", "static_dev_dist_iter"], [72, 3, 1, "", "static_dev_dist_nest"], [72, 3, 1, "", "static_dev_unify"], [72, 3, 1, "", "static_dev_unify_array"], [72, 3, 1, "", "static_dev_unify_iter"], [72, 3, 1, "", "static_dev_unify_nest"], [72, 3, 1, "", "static_dev_util"], [72, 3, 1, "", "static_diagonal"], [72, 3, 1, "", "static_dropout"], [72, 3, 1, "", "static_dtype"], [72, 3, 1, "", "static_dtype_bits"], [72, 3, 1, "", "static_eigh"], [72, 3, 1, "", "static_eigvalsh"], [72, 3, 1, "", "static_einops_rearrange"], [72, 3, 1, "", "static_einops_reduce"], [72, 3, 1, "", "static_einops_repeat"], [72, 3, 1, "", "static_einsum"], [72, 3, 1, "", "static_empty"], [72, 3, 1, "", "static_empty_like"], [72, 3, 1, "", "static_equal"], [72, 3, 1, "", "static_erf"], [72, 3, 1, "", "static_execute_with_gradients"], [72, 3, 1, "", "static_exists"], [72, 3, 1, "", "static_exp"], [72, 3, 1, "", "static_expand_dims"], [72, 3, 1, "", "static_expm1"], [72, 3, 1, "", "static_eye"], [72, 3, 1, "", "static_finfo"], [72, 3, 1, "", "static_flip"], [72, 3, 1, "", "static_floor"], [72, 3, 1, "", "static_floor_divide"], [72, 3, 1, "", "static_floormod"], [72, 3, 1, "", "static_fourier_encode"], [72, 3, 1, "", "static_from_dlpack"], [72, 3, 1, "", "static_full"], [72, 3, 1, "", "static_full_like"], [72, 3, 1, "", "static_function_supported_dtypes"], [72, 3, 1, "", "static_function_unsupported_dtypes"], [72, 3, 1, "", "static_gather"], [72, 3, 1, "", "static_gelu"], [72, 3, 1, "", "static_get_all_arrays_in_memory"], [72, 3, 1, "", "static_get_all_ivy_arrays_on_dev"], [72, 3, 1, "", "static_get_min_base"], [72, 3, 1, "", "static_get_min_denominator"], [72, 3, 1, "", "static_get_num_dims"], [72, 3, 1, "", "static_get_referrers_recursive"], [72, 3, 1, "", "static_gpu_is_available"], [72, 3, 1, "", "static_greater"], [72, 3, 1, "", "static_greater_equal"], [72, 3, 1, "", "static_handle_nestable"], [72, 3, 1, "", "static_handle_out_argument"], [72, 3, 1, "", "static_has_nans"], [72, 3, 1, "", "static_iinfo"], [72, 3, 1, "", "static_indices_where"], [72, 3, 1, "", "static_infer_device"], [72, 3, 1, "", "static_infer_dtype"], [72, 3, 1, "", "static_inplace_arrays_supported"], [72, 3, 1, "", "static_inplace_decrement"], [72, 3, 1, "", "static_inplace_increment"], [72, 3, 1, "", "static_inplace_update"], [72, 3, 1, "", "static_inplace_variables_supported"], [72, 3, 1, "", "static_inputs_to_native_arrays"], [72, 3, 1, "", "static_inv"], [72, 3, 1, "", "static_invalid_dtype"], [72, 3, 1, "", "static_is_array"], [72, 3, 1, "", "static_is_float_dtype"], [72, 3, 1, "", "static_is_int_dtype"], [72, 3, 1, "", "static_is_ivy_array"], [72, 3, 1, "", "static_is_ivy_container"], [72, 3, 1, "", "static_is_native_array"], [72, 3, 1, "", "static_isfinite"], [72, 3, 1, "", "static_isinf"], [72, 3, 1, "", "static_isnan"], [72, 3, 1, "", "static_layer_norm"], [72, 3, 1, "", "static_leaky_relu"], [72, 3, 1, "", "static_less"], [72, 3, 1, "", "static_less_equal"], [72, 3, 1, "", "static_linear"], [72, 3, 1, "", "static_linspace"], [72, 3, 1, "", "static_log"], [72, 3, 1, "", "static_log10"], [72, 3, 1, "", "static_log1p"], [72, 3, 1, "", "static_log2"], [72, 3, 1, "", "static_logaddexp"], [72, 3, 1, "", "static_logical_and"], [72, 3, 1, "", "static_logical_not"], [72, 3, 1, "", "static_logical_or"], [72, 3, 1, "", "static_logical_xor"], [72, 3, 1, "", "static_logspace"], [72, 3, 1, "", "static_lstm_update"], [72, 3, 1, "", "static_match_kwargs"], [72, 3, 1, "", "static_matmul"], [72, 3, 1, "", "static_matrix_norm"], [72, 3, 1, "", "static_matrix_power"], [72, 3, 1, "", "static_matrix_rank"], [72, 3, 1, "", "static_matrix_transpose"], [72, 3, 1, "", "static_max"], [72, 3, 1, "", "static_maximum"], [72, 3, 1, "", "static_mean"], [72, 3, 1, "", "static_meshgrid"], [72, 3, 1, "", "static_min"], [72, 3, 1, "", "static_minimum"], [72, 3, 1, "", "static_multi_head_attention"], [72, 3, 1, "", "static_multinomial"], [72, 3, 1, "", "static_multiprocessing"], [72, 3, 1, "", "static_native_array"], [72, 3, 1, "", "static_negative"], [72, 3, 1, "", "static_nonzero"], [72, 3, 1, "", "static_not_equal"], [72, 3, 1, "", "static_num_arrays_in_memory"], [72, 3, 1, "", "static_num_cpu_cores"], [72, 3, 1, "", "static_num_gpus"], [72, 3, 1, "", "static_num_ivy_arrays_on_dev"], [72, 3, 1, "", "static_one_hot"], [72, 3, 1, "", "static_ones"], [72, 3, 1, "", "static_ones_like"], [72, 3, 1, "", "static_outer"], [72, 3, 1, "", "static_outputs_to_ivy_arrays"], [72, 3, 1, "", "static_percent_used_mem_on_dev"], [72, 3, 1, "", "static_permute_dims"], [72, 3, 1, "", "static_pinv"], [72, 3, 1, "", "static_positive"], [72, 3, 1, "", "static_pow"], [72, 3, 1, "", "static_print_all_arrays_in_memory"], [72, 3, 1, "", "static_print_all_ivy_arrays_on_dev"], [72, 3, 1, "", "static_prod"], [72, 3, 1, "", "static_promote_types"], [72, 3, 1, "", "static_qr"], [72, 3, 1, "", "static_queue_timeout"], [72, 3, 1, "", "static_random_normal"], [72, 3, 1, "", "static_relu"], [72, 3, 1, "", "static_remainder"], [72, 3, 1, "", "static_repeat"], [72, 3, 1, "", "static_reshape"], [72, 3, 1, "", "static_result_type"], [72, 3, 1, "", "static_round"], [72, 3, 1, "", "static_scaled_dot_product_attention"], [72, 3, 1, "", "static_scatter_flat"], [72, 3, 1, "", "static_scatter_nd"], [72, 3, 1, "", "static_seed"], [72, 3, 1, "", "static_set_default_device"], [72, 3, 1, "", "static_set_default_dtype"], [72, 3, 1, "", "static_set_default_float_dtype"], [72, 3, 1, "", "static_set_default_int_dtype"], [72, 3, 1, "", "static_set_min_base"], [72, 3, 1, "", "static_set_min_denominator"], [72, 3, 1, "", "static_set_queue_timeout"], [72, 3, 1, "", "static_set_split_factor"], [72, 3, 1, "", "static_set_tmp_dir"], [72, 3, 1, "", "static_set_with_grads"], [72, 3, 1, "", "static_shape"], [72, 3, 1, "", "static_shape_to_tuple"], [72, 3, 1, "", "static_shuffle"], [72, 3, 1, "", "static_sigmoid"], [72, 3, 1, "", "static_sign"], [72, 3, 1, "", "static_sin"], [72, 3, 1, "", "static_sinh"], [72, 3, 1, "", "static_slogdet"], [72, 3, 1, "", "static_softmax"], [72, 3, 1, "", "static_softplus"], [72, 3, 1, "", "static_solve"], [72, 3, 1, "", "static_split"], [72, 3, 1, "", "static_split_factor"], [72, 3, 1, "", "static_split_func_call"], [72, 3, 1, "", "static_sqrt"], [72, 3, 1, "", "static_square"], [72, 3, 1, "", "static_squeeze"], [72, 3, 1, "", "static_stable_divide"], [72, 3, 1, "", "static_stable_pow"], [72, 3, 1, "", "static_stack"], [72, 3, 1, "", "static_std"], [72, 3, 1, "", "static_stop_gradient"], [72, 3, 1, "", "static_sum"], [72, 3, 1, "", "static_supports_inplace"], [72, 3, 1, "", "static_svd"], [72, 3, 1, "", "static_svdvals"], [72, 3, 1, "", "static_swapaxes"], [72, 3, 1, "", "static_tensordot"], [72, 3, 1, "", "static_tile"], [72, 3, 1, "", "static_tmp_dir"], [72, 3, 1, "", "static_to_device"], [72, 3, 1, "", "static_to_list"], [72, 3, 1, "", "static_to_native_arrays_and_back"], [72, 3, 1, "", "static_to_numpy"], [72, 3, 1, "", "static_to_scalar"], [72, 3, 1, "", "static_total_mem_on_dev"], [72, 3, 1, "", "static_tpu_is_available"], [72, 3, 1, "", "static_trace"], [72, 3, 1, "", "static_tril"], [72, 3, 1, "", "static_triu"], [72, 3, 1, "", "static_trunc"], [72, 3, 1, "", "static_try_else_none"], [72, 3, 1, "", "static_type_promote_arrays"], [72, 3, 1, "", "static_unique_all"], [72, 3, 1, "", "static_unique_inverse"], [72, 3, 1, "", "static_unique_values"], [72, 3, 1, "", "static_unset_default_device"], [72, 3, 1, "", "static_unset_default_dtype"], [72, 3, 1, "", "static_unset_default_float_dtype"], [72, 3, 1, "", "static_unset_default_int_dtype"], [72, 3, 1, "", "static_unset_with_grads"], [72, 3, 1, "", "static_unstack"], [72, 3, 1, "", "static_used_mem_on_dev"], [72, 3, 1, "", "static_valid_dtype"], [72, 3, 1, "", "static_value_is_nan"], [72, 3, 1, "", "static_var"], [72, 3, 1, "", "static_variable"], [72, 3, 1, "", "static_variable_data"], [72, 3, 1, "", "static_vecdot"], [72, 3, 1, "", "static_vector_norm"], [72, 3, 1, "", "static_vector_to_skew_symmetric_matrix"], [72, 3, 1, "", "static_where"], [72, 3, 1, "", "static_with_grads"], [72, 3, 1, "", "static_zero_pad"], [72, 3, 1, "", "static_zeros"], [72, 3, 1, "", "static_zeros_like"], [72, 3, 1, "", "stop_gradient"], [72, 3, 1, "", "supports_inplace"], [72, 3, 1, "", "svd"], [72, 3, 1, "", "svdvals"], [72, 3, 1, "", "tensordot"], [72, 3, 1, "", "tmp_dir"], [72, 3, 1, "", "to_native_arrays_and_back"], [72, 3, 1, "", "to_scalar"], [72, 3, 1, "", "total_mem_on_dev"], [72, 3, 1, "", "tpu_is_available"], [72, 3, 1, "", "trace"], [72, 3, 1, "", "tril"], [72, 3, 1, "", "triu"], [72, 3, 1, "", "try_else_none"], [72, 3, 1, "", "type_promote_arrays"], [72, 3, 1, "", "unique_all"], [72, 3, 1, "", "unique_inverse"], [72, 3, 1, "", "unique_values"], [72, 3, 1, "", "unset_default_device"], [72, 3, 1, "", "unset_default_dtype"], [72, 3, 1, "", "unset_default_float_dtype"], [72, 3, 1, "", "unset_default_int_dtype"], [72, 3, 1, "", "unset_with_grads"], [72, 3, 1, "", "used_mem_on_dev"], [72, 3, 1, "", "valid_dtype"], [72, 3, 1, "", "value_is_nan"], [72, 3, 1, "", "variable"], [72, 3, 1, "", "variable_data"], [72, 3, 1, "", "vecdot"], [72, 3, 1, "", "vector_to_skew_symmetric_matrix"], [72, 3, 1, "", "where"], [72, 3, 1, "", "with_grads"], [72, 3, 1, "", "zeros"], [72, 3, 1, "", "zeros_like"]], "ivy.container.container.MultiDevContainer": [[73, 3, 1, "", "__init__"], [73, 3, 1, "", "at_dev"], [73, 3, 1, "", "at_devs"]], "ivy.container.container_methods": [[276, 2, 1, "", "abs"], [281, 2, 1, "", "acos"], [285, 2, 1, "", "acosh"], [589, 2, 1, "", "adam_step"], [593, 2, 1, "", "adam_update"], [289, 2, 1, "", "add"], [882, 2, 1, "", "all"], [514, 2, 1, "", "all_equal"], [886, 2, 1, "", "any"], [838, 2, 1, "", "argsort"], [294, 2, 1, "", "asin"], [298, 2, 1, "", "asinh"], [302, 2, 1, "", "atan"], [306, 2, 1, "", "atan2"], [310, 2, 1, "", "atanh"], [709, 2, 1, "", "binary_cross_entropy"], [314, 2, 1, "", "bitwise_and"], [318, 2, 1, "", "bitwise_invert"], [322, 2, 1, "", "bitwise_left_shift"], [326, 2, 1, "", "bitwise_or"], [330, 2, 1, "", "bitwise_right_shift"], [334, 2, 1, "", "bitwise_xor"], [197, 2, 1, "", "can_cast"], [338, 2, 1, "", "ceil"], [725, 2, 1, "", "clip"], [525, 2, 1, "", "clip_vector_norm"], [730, 2, 1, "", "concat"], [734, 2, 1, "", "constant_pad"], [342, 2, 1, "", "cos"], [346, 2, 1, "", "cosh"], [714, 2, 1, "", "cross_entropy"], [350, 2, 1, "", "divide"], [849, 2, 1, "", "einsum"], [355, 2, 1, "", "equal"], [359, 2, 1, "", "erf"], [363, 2, 1, "", "exp"], [738, 2, 1, "", "expand_dims"], [367, 2, 1, "", "expm1"], [742, 2, 1, "", "flip"], [371, 2, 1, "", "floor"], [375, 2, 1, "", "floor_divide"], [542, 2, 1, "", "gather_nd"], [598, 2, 1, "", "gradient_descent_update"], [379, 2, 1, "", "greater"], [383, 2, 1, "", "greater_equal"], [602, 2, 1, "", "is_variable"], [387, 2, 1, "", "isfinite"], [391, 2, 1, "", "isinf"], [395, 2, 1, "", "isnan"], [606, 2, 1, "", "lamb_update"], [610, 2, 1, "", "lars_update"], [807, 2, 1, "", "layer_norm"], [399, 2, 1, "", "less"], [403, 2, 1, "", "less_equal"], [407, 2, 1, "", "log"], [411, 2, 1, "", "log10"], [415, 2, 1, "", "log1p"], [419, 2, 1, "", "log2"], [423, 2, 1, "", "logaddexp"], [427, 2, 1, "", "logical_and"], [431, 2, 1, "", "logical_not"], [435, 2, 1, "", "logical_or"], [439, 2, 1, "", "logical_xor"], [660, 2, 1, "", "matmul"], [853, 2, 1, "", "max"], [857, 2, 1, "", "mean"], [861, 2, 1, "", "min"], [445, 2, 1, "", "multiply"], [450, 2, 1, "", "negative"], [454, 2, 1, "", "not_equal"], [614, 2, 1, "", "optimizer_update"], [746, 2, 1, "", "permute_dims"], [458, 2, 1, "", "positive"], [462, 2, 1, "", "pow"], [865, 2, 1, "", "prod"], [816, 2, 1, "", "random_uniform"], [466, 2, 1, "", "remainder"], [750, 2, 1, "", "repeat"], [754, 2, 1, "", "reshape"], [758, 2, 1, "", "roll"], [470, 2, 1, "", "round"], [474, 2, 1, "", "sign"], [478, 2, 1, "", "sin"], [482, 2, 1, "", "sinh"], [843, 2, 1, "", "sort"], [719, 2, 1, "", "sparse_cross_entropy"], [486, 2, 1, "", "sqrt"], [490, 2, 1, "", "square"], [764, 2, 1, "", "squeeze"], [768, 2, 1, "", "stack"], [278, 2, 1, "", "static_abs"], [591, 2, 1, "", "static_adam_step"], [595, 2, 1, "", "static_adam_update"], [291, 2, 1, "", "static_add"], [516, 2, 1, "", "static_all_equal"], [840, 2, 1, "", "static_argsort"], [711, 2, 1, "", "static_binary_cross_entropy"], [199, 2, 1, "", "static_can_cast"], [727, 2, 1, "", "static_clip"], [716, 2, 1, "", "static_cross_entropy"], [352, 2, 1, "", "static_divide"], [544, 2, 1, "", "static_gather_nd"], [600, 2, 1, "", "static_gradient_descent_update"], [604, 2, 1, "", "static_is_variable"], [608, 2, 1, "", "static_lamb_update"], [612, 2, 1, "", "static_lars_update"], [447, 2, 1, "", "static_multiply"], [616, 2, 1, "", "static_optimizer_update"], [813, 2, 1, "", "static_randint"], [818, 2, 1, "", "static_random_uniform"], [760, 2, 1, "", "static_roll"], [845, 2, 1, "", "static_sort"], [721, 2, 1, "", "static_sparse_cross_entropy"], [493, 2, 1, "", "static_subtract"], [498, 2, 1, "", "static_tan"], [503, 2, 1, "", "static_tanh"], [829, 2, 1, "", "static_unique_counts"], [869, 2, 1, "", "std"], [495, 2, 1, "", "subtract"], [873, 2, 1, "", "sum"], [772, 2, 1, "", "swapaxes"], [500, 2, 1, "", "tan"], [505, 2, 1, "", "tanh"], [776, 2, 1, "", "tile"], [509, 2, 1, "", "trunc"], [831, 2, 1, "", "unique_counts"], [877, 2, 1, "", "var"], [780, 2, 1, "", "zero_pad"]], "ivy.container.creation": [[75, 1, 1, "", "ContainerWithCreation"]], "ivy.container.data_type": [[77, 1, 1, "", "ContainerWithDataTypes"]], "ivy.container.data_type.ContainerWithDataTypes": [[77, 3, 1, "", "can_cast"], [77, 3, 1, "", "static_can_cast"]], "ivy.container.device": [[79, 1, 1, "", "ContainerWithDevice"]], "ivy.container.elementwise": [[81, 1, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[81, 3, 1, "", "abs"], [81, 3, 1, "", "acos"], [81, 3, 1, "", "acosh"], [81, 3, 1, "", "add"], [81, 3, 1, "", "asin"], [81, 3, 1, "", "asinh"], [81, 3, 1, "", "atan"], [81, 3, 1, "", "atan2"], [81, 3, 1, "", "atanh"], [81, 3, 1, "", "bitwise_and"], [81, 3, 1, "", "bitwise_invert"], [81, 3, 1, "", "bitwise_left_shift"], [81, 3, 1, "", "bitwise_or"], [81, 3, 1, "", "bitwise_right_shift"], [81, 3, 1, "", "bitwise_xor"], [81, 3, 1, "", "ceil"], [81, 3, 1, "", "cos"], [81, 3, 1, "", "cosh"], [81, 3, 1, "", "divide"], [81, 3, 1, "", "equal"], [81, 3, 1, "", "erf"], [81, 3, 1, "", "exp"], [81, 3, 1, "", "expm1"], [81, 3, 1, "", "floor"], [81, 3, 1, "", "floor_divide"], [81, 3, 1, "", "greater"], [81, 3, 1, "", "greater_equal"], [81, 3, 1, "", "isfinite"], [81, 3, 1, "", "isinf"], [81, 3, 1, "", "isnan"], [81, 3, 1, "", "less"], [81, 3, 1, "", "less_equal"], [81, 3, 1, "", "log"], [81, 3, 1, "", "log10"], [81, 3, 1, "", "log1p"], [81, 3, 1, "", "log2"], [81, 3, 1, "", "logaddexp"], [81, 3, 1, "", "logical_and"], [81, 3, 1, "", "logical_not"], [81, 3, 1, "", "logical_or"], [81, 3, 1, "", "logical_xor"], [81, 3, 1, "", "multiply"], [81, 3, 1, "", "negative"], [81, 3, 1, "", "not_equal"], [81, 3, 1, "", "positive"], [81, 3, 1, "", "pow"], [81, 3, 1, "", "remainder"], [81, 3, 1, "", "round"], [81, 3, 1, "", "sign"], [81, 3, 1, "", "sin"], [81, 3, 1, "", "sinh"], [81, 3, 1, "", "sqrt"], [81, 3, 1, "", "square"], [81, 3, 1, "", "static_abs"], [81, 3, 1, "", "static_add"], [81, 3, 1, "", "static_divide"], [81, 3, 1, "", "static_multiply"], [81, 3, 1, "", "static_subtract"], [81, 3, 1, "", "static_tan"], [81, 3, 1, "", "static_tanh"], [81, 3, 1, "", "subtract"], [81, 3, 1, "", "tan"], [81, 3, 1, "", "tanh"], [81, 3, 1, "", "trunc"]], "ivy.container.general": [[83, 1, 1, "", "ContainerWithGeneral"]], "ivy.container.general.ContainerWithGeneral": [[83, 3, 1, "", "all_equal"], [83, 3, 1, "", "clip_vector_norm"], [83, 3, 1, "", "gather_nd"], [83, 3, 1, "", "static_all_equal"], [83, 3, 1, "", "static_gather_nd"]], "ivy.container.gradients": [[85, 1, 1, "", "ContainerWithGradients"]], "ivy.container.gradients.ContainerWithGradients": [[85, 3, 1, "", "adam_step"], [85, 3, 1, "", "adam_update"], [85, 3, 1, "", "gradient_descent_update"], [85, 3, 1, "", "is_variable"], [85, 3, 1, "", "lamb_update"], [85, 3, 1, "", "lars_update"], [85, 3, 1, "", "optimizer_update"], [85, 3, 1, "", "static_adam_step"], [85, 3, 1, "", "static_adam_update"], [85, 3, 1, "", "static_gradient_descent_update"], [85, 3, 1, "", "static_is_variable"], [85, 3, 1, "", "static_lamb_update"], [85, 3, 1, "", "static_lars_update"], [85, 3, 1, "", "static_optimizer_update"]], "ivy.container.image": [[87, 1, 1, "", "ContainerWithImage"]], "ivy.container.layers": [[89, 1, 1, "", "ContainerWithLayers"]], "ivy.container.linear_algebra": [[91, 1, 1, "", "ContainerWithLinearAlgebra"]], "ivy.container.linear_algebra.ContainerWithLinearAlgebra": [[91, 3, 1, "", "matmul"]], "ivy.container.losses": [[93, 1, 1, "", "ContainerWithLosses"]], "ivy.container.losses.ContainerWithLosses": [[93, 3, 1, "", "binary_cross_entropy"], [93, 3, 1, "", "cross_entropy"], [93, 3, 1, "", "sparse_cross_entropy"], [93, 3, 1, "", "static_binary_cross_entropy"], [93, 3, 1, "", "static_cross_entropy"], [93, 3, 1, "", "static_sparse_cross_entropy"]], "ivy.container.manipulation": [[95, 1, 1, "", "ContainerWithManipulation"]], "ivy.container.manipulation.ContainerWithManipulation": [[95, 3, 1, "", "clip"], [95, 3, 1, "", "concat"], [95, 3, 1, "", "constant_pad"], [95, 3, 1, "", "expand_dims"], [95, 3, 1, "", "flip"], [95, 3, 1, "", "permute_dims"], [95, 3, 1, "", "repeat"], [95, 3, 1, "", "reshape"], [95, 3, 1, "", "roll"], [95, 3, 1, "", "squeeze"], [95, 3, 1, "", "stack"], [95, 3, 1, "", "static_clip"], [95, 3, 1, "", "static_roll"], [95, 3, 1, "", "swapaxes"], [95, 3, 1, "", "tile"], [95, 3, 1, "", "zero_pad"]], "ivy.container.norms": [[97, 1, 1, "", "ContainerWithNorms"]], "ivy.container.norms.ContainerWithNorms": [[97, 3, 1, "", "layer_norm"]], "ivy.container.random": [[99, 1, 1, "", "ContainerWithRandom"]], "ivy.container.random.ContainerWithRandom": [[99, 3, 1, "", "random_uniform"], [99, 3, 1, "", "static_randint"], [99, 3, 1, "", "static_random_uniform"]], "ivy.container.searching": [[101, 1, 1, "", "ContainerWithSearching"]], "ivy.container.set": [[103, 1, 1, "", "ContainerWithSet"]], "ivy.container.set.ContainerWithSet": [[103, 3, 1, "", "static_unique_counts"], [103, 3, 1, "", "unique_counts"]], "ivy.container.sorting": [[105, 1, 1, "", "ContainerWithSorting"]], "ivy.container.sorting.ContainerWithSorting": [[105, 3, 1, "", "argsort"], [105, 3, 1, "", "sort"], [105, 3, 1, "", "static_argsort"], [105, 3, 1, "", "static_sort"]], "ivy.container.statistical": [[107, 1, 1, "", "ContainerWithStatistical"]], "ivy.container.statistical.ContainerWithStatistical": [[107, 3, 1, "", "einsum"], [107, 3, 1, "", "max"], [107, 3, 1, "", "mean"], [107, 3, 1, "", "min"], [107, 3, 1, "", "prod"], [107, 3, 1, "", "std"], [107, 3, 1, "", "sum"], [107, 3, 1, "", "var"]], "ivy.container.utility": [[109, 1, 1, "", "ContainerWithUtility"]], "ivy.container.utility.ContainerWithUtility": [[109, 3, 1, "", "all"], [109, 3, 1, "", "any"]], "ivy.container.wrapping": [[111, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.func_wrapper": [[147, 2, 1, "", "handle_nestable"], [148, 2, 1, "", "handle_out_argument"], [149, 2, 1, "", "infer_device"], [150, 2, 1, "", "infer_dtype"], [151, 2, 1, "", "inputs_to_ivy_arrays"], [152, 2, 1, "", "inputs_to_native_arrays"], [153, 2, 1, "", "outputs_to_ivy_arrays"], [154, 2, 1, "", "to_native_arrays_and_back"]], "ivy.functional.ivy": [[156, 0, 0, "-", "activations"], [164, 0, 0, "-", "compilation"], [166, 0, 0, "-", "constants"], [167, 0, 0, "-", "creation"], [186, 0, 0, "-", "data_type"], [223, 0, 0, "-", "device"], [273, 0, 0, "-", "elementwise"], [511, 0, 0, "-", "general"], [585, 0, 0, "-", "gradients"], [623, 0, 0, "-", "layers"], [636, 0, 0, "-", "linear_algebra"], [706, 0, 0, "-", "losses"], [722, 0, 0, "-", "manipulation"], [782, 0, 0, "-", "meta"], [786, 0, 0, "-", "nest"], [804, 0, 0, "-", "norms"], [809, 0, 0, "-", "random"], [821, 0, 0, "-", "searching"], [826, 0, 0, "-", "set"], [835, 0, 0, "-", "sorting"], [846, 0, 0, "-", "statistical"], [879, 0, 0, "-", "utility"]], "ivy.functional.ivy.activations": [[157, 2, 1, "", "gelu"], [158, 2, 1, "", "leaky_relu"], [159, 2, 1, "", "relu"], [160, 2, 1, "", "sigmoid"], [161, 2, 1, "", "softmax"], [162, 2, 1, "", "softplus"], [163, 2, 1, "", "tanh"]], "ivy.functional.ivy.compilation": [[165, 2, 1, "", "compile"]], "ivy.functional.ivy.constants": [[166, 5, 1, "", "e"], [166, 5, 1, "", "inf"], [166, 5, 1, "", "nan"], [166, 5, 1, "", "newaxis"], [166, 5, 1, "", "pi"]], "ivy.functional.ivy.creation": [[168, 2, 1, "", "arange"], [167, 2, 1, "", "array"], [169, 2, 1, "", "asarray"], [170, 2, 1, "", "empty"], [171, 2, 1, "", "empty_like"], [172, 2, 1, "", "eye"], [173, 2, 1, "", "from_dlpack"], [174, 2, 1, "", "full"], [175, 2, 1, "", "full_like"], [176, 2, 1, "", "linspace"], [177, 2, 1, "", "logspace"], [178, 2, 1, "", "meshgrid"], [179, 2, 1, "", "native_array"], [180, 2, 1, "", "ones"], [181, 2, 1, "", "ones_like"], [182, 2, 1, "", "tril"], [183, 2, 1, "", "triu"], [184, 2, 1, "", "zeros"], [185, 2, 1, "", "zeros_like"]], "ivy.functional.ivy.data_type": [[186, 1, 1, "", "DefaultDtype"], [186, 1, 1, "", "DefaultFloatDtype"], [186, 1, 1, "", "DefaultIntDtype"], [190, 2, 1, "", "as_ivy_dtype"], [191, 2, 1, "", "as_native_dtype"], [192, 2, 1, "", "astype"], [193, 2, 1, "", "broadcast_arrays"], [194, 2, 1, "", "broadcast_to"], [198, 2, 1, "", "can_cast"], [200, 2, 1, "", "closest_valid_dtype"], [201, 2, 1, "", "default_dtype"], [202, 2, 1, "", "default_float_dtype"], [203, 2, 1, "", "default_int_dtype"], [204, 2, 1, "", "dtype"], [205, 2, 1, "", "dtype_bits"], [206, 2, 1, "", "finfo"], [207, 2, 1, "", "function_supported_dtypes"], [208, 2, 1, "", "function_unsupported_dtypes"], [209, 2, 1, "", "iinfo"], [210, 2, 1, "", "invalid_dtype"], [211, 2, 1, "", "is_float_dtype"], [212, 2, 1, "", "is_int_dtype"], [213, 2, 1, "", "promote_types"], [214, 2, 1, "", "result_type"], [215, 2, 1, "", "set_default_dtype"], [216, 2, 1, "", "set_default_float_dtype"], [217, 2, 1, "", "set_default_int_dtype"], [218, 2, 1, "", "type_promote_arrays"], [219, 2, 1, "", "unset_default_dtype"], [220, 2, 1, "", "unset_default_float_dtype"], [221, 2, 1, "", "unset_default_int_dtype"], [222, 2, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultDtype": [[186, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[186, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[186, 3, 1, "", "__init__"]], "ivy.functional.ivy.device": [[223, 1, 1, "", "DefaultDevice"], [225, 1, 1, "", "DevClonedItem"], [226, 1, 1, "", "DevClonedIter"], [227, 1, 1, "", "DevClonedNest"], [228, 1, 1, "", "DevDistItem"], [229, 1, 1, "", "DevDistIter"], [230, 1, 1, "", "DevDistNest"], [223, 1, 1, "", "DevManager"], [232, 1, 1, "", "DevMapper"], [233, 1, 1, "", "DevMapperMultiProc"], [223, 1, 1, "", "MultiDev"], [235, 1, 1, "", "MultiDevItem"], [236, 1, 1, "", "MultiDevIter"], [237, 1, 1, "", "MultiDevNest"], [238, 1, 1, "", "Profiler"], [239, 2, 1, "", "as_ivy_dev"], [240, 2, 1, "", "as_native_dev"], [241, 2, 1, "", "clear_mem_on_dev"], [242, 2, 1, "", "default_device"], [243, 2, 1, "", "dev"], [244, 2, 1, "", "dev_clone"], [245, 2, 1, "", "dev_clone_array"], [246, 2, 1, "", "dev_clone_iter"], [247, 2, 1, "", "dev_clone_nest"], [248, 2, 1, "", "dev_dist"], [249, 2, 1, "", "dev_dist_array"], [250, 2, 1, "", "dev_dist_iter"], [251, 2, 1, "", "dev_dist_nest"], [252, 2, 1, "", "dev_unify"], [253, 2, 1, "", "dev_unify_array"], [254, 2, 1, "", "dev_unify_iter"], [255, 2, 1, "", "dev_unify_nest"], [256, 2, 1, "", "dev_util"], [257, 2, 1, "", "get_all_ivy_arrays_on_dev"], [258, 2, 1, "", "gpu_is_available"], [259, 2, 1, "", "num_cpu_cores"], [260, 2, 1, "", "num_gpus"], [261, 2, 1, "", "num_ivy_arrays_on_dev"], [262, 2, 1, "", "percent_used_mem_on_dev"], [263, 2, 1, "", "print_all_ivy_arrays_on_dev"], [264, 2, 1, "", "set_default_device"], [265, 2, 1, "", "set_split_factor"], [266, 2, 1, "", "split_factor"], [267, 2, 1, "", "split_func_call"], [268, 2, 1, "", "to_device"], [269, 2, 1, "", "total_mem_on_dev"], [270, 2, 1, "", "tpu_is_available"], [271, 2, 1, "", "unset_default_device"], [272, 2, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[223, 3, 1, "", "__enter__"], [223, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.DevManager": [[223, 3, 1, "", "__init__"], [223, 3, 1, "", "da_tune_step"], [223, 4, 1, "", "dim_size"], [223, 3, 1, "", "ds_tune_step"], [223, 3, 1, "", "map"], [223, 3, 1, "", "repeated_config_check"], [223, 4, 1, "", "tune_step"], [223, 4, 1, "", "tuned"]], "ivy.functional.ivy.device.DevMapper": [[232, 3, 1, "", "__init__"], [232, 3, 1, "", "map"]], "ivy.functional.ivy.device.DevMapperMultiProc": [[233, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDev": [[223, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDevItem": [[235, 3, 1, "", "__init__"], [235, 3, 1, "", "items"], [235, 3, 1, "", "keys"], [235, 4, 1, "", "shape"], [235, 3, 1, "", "values"]], "ivy.functional.ivy.device.MultiDevIter": [[236, 3, 1, "", "__init__"], [236, 3, 1, "", "at_dev"], [236, 3, 1, "", "at_devs"]], "ivy.functional.ivy.device.MultiDevNest": [[237, 3, 1, "", "__init__"], [237, 3, 1, "", "at_dev"]], "ivy.functional.ivy.device.Profiler": [[238, 3, 1, "", "__init__"], [238, 3, 1, "", "start"], [238, 3, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[277, 2, 1, "", "abs"], [282, 2, 1, "", "acos"], [286, 2, 1, "", "acosh"], [290, 2, 1, "", "add"], [295, 2, 1, "", "asin"], [299, 2, 1, "", "asinh"], [303, 2, 1, "", "atan"], [307, 2, 1, "", "atan2"], [311, 2, 1, "", "atanh"], [315, 2, 1, "", "bitwise_and"], [319, 2, 1, "", "bitwise_invert"], [323, 2, 1, "", "bitwise_left_shift"], [327, 2, 1, "", "bitwise_or"], [331, 2, 1, "", "bitwise_right_shift"], [335, 2, 1, "", "bitwise_xor"], [339, 2, 1, "", "ceil"], [343, 2, 1, "", "cos"], [347, 2, 1, "", "cosh"], [351, 2, 1, "", "divide"], [356, 2, 1, "", "equal"], [360, 2, 1, "", "erf"], [364, 2, 1, "", "exp"], [368, 2, 1, "", "expm1"], [372, 2, 1, "", "floor"], [376, 2, 1, "", "floor_divide"], [380, 2, 1, "", "greater"], [384, 2, 1, "", "greater_equal"], [388, 2, 1, "", "isfinite"], [392, 2, 1, "", "isinf"], [396, 2, 1, "", "isnan"], [400, 2, 1, "", "less"], [404, 2, 1, "", "less_equal"], [408, 2, 1, "", "log"], [412, 2, 1, "", "log10"], [416, 2, 1, "", "log1p"], [420, 2, 1, "", "log2"], [424, 2, 1, "", "logaddexp"], [428, 2, 1, "", "logical_and"], [432, 2, 1, "", "logical_not"], [436, 2, 1, "", "logical_or"], [440, 2, 1, "", "logical_xor"], [441, 2, 1, "", "maximum"], [442, 2, 1, "", "minimum"], [446, 2, 1, "", "multiply"], [451, 2, 1, "", "negative"], [455, 2, 1, "", "not_equal"], [459, 2, 1, "", "positive"], [463, 2, 1, "", "pow"], [467, 2, 1, "", "remainder"], [471, 2, 1, "", "round"], [475, 2, 1, "", "sign"], [479, 2, 1, "", "sin"], [483, 2, 1, "", "sinh"], [487, 2, 1, "", "sqrt"], [491, 2, 1, "", "square"], [496, 2, 1, "", "subtract"], [501, 2, 1, "", "tan"], [506, 2, 1, "", "tanh"], [510, 2, 1, "", "trunc"]], "ivy.functional.ivy.general": [[515, 2, 1, "", "all_equal"], [517, 2, 1, "", "arg_info"], [518, 2, 1, "", "arg_names"], [519, 2, 1, "", "array_equal"], [520, 2, 1, "", "arrays_equal"], [521, 2, 1, "", "assert_supports_inplace"], [522, 2, 1, "", "cache_fn"], [523, 2, 1, "", "clip_matrix_norm"], [526, 2, 1, "", "clip_vector_norm"], [527, 2, 1, "", "container_types"], [528, 2, 1, "", "copy_array"], [529, 2, 1, "", "cumprod"], [530, 2, 1, "", "cumsum"], [531, 2, 1, "", "current_backend_str"], [532, 2, 1, "", "default"], [533, 2, 1, "", "einops_rearrange"], [534, 2, 1, "", "einops_reduce"], [535, 2, 1, "", "einops_repeat"], [536, 2, 1, "", "exists"], [537, 2, 1, "", "floormod"], [538, 2, 1, "", "fourier_encode"], [539, 2, 1, "", "gather"], [543, 2, 1, "", "gather_nd"], [545, 2, 1, "", "get_all_arrays_in_memory"], [546, 2, 1, "", "get_min_base"], [547, 2, 1, "", "get_min_denominator"], [548, 2, 1, "", "get_num_dims"], [549, 2, 1, "", "get_referrers_recursive"], [550, 2, 1, "", "has_nans"], [551, 2, 1, "", "indices_where"], [552, 2, 1, "", "inplace_arrays_supported"], [553, 2, 1, "", "inplace_decrement"], [554, 2, 1, "", "inplace_increment"], [555, 2, 1, "", "inplace_update"], [556, 2, 1, "", "inplace_variables_supported"], [557, 2, 1, "", "is_array"], [558, 2, 1, "", "is_ivy_array"], [559, 2, 1, "", "is_ivy_container"], [560, 2, 1, "", "is_native_array"], [561, 2, 1, "", "match_kwargs"], [562, 2, 1, "", "multiprocessing"], [563, 2, 1, "", "num_arrays_in_memory"], [564, 2, 1, "", "one_hot"], [565, 2, 1, "", "print_all_arrays_in_memory"], [566, 2, 1, "", "queue_timeout"], [567, 2, 1, "", "scatter_flat"], [568, 2, 1, "", "scatter_nd"], [569, 2, 1, "", "set_min_base"], [570, 2, 1, "", "set_min_denominator"], [571, 2, 1, "", "set_queue_timeout"], [572, 2, 1, "", "set_tmp_dir"], [573, 2, 1, "", "shape"], [574, 2, 1, "", "shape_to_tuple"], [575, 2, 1, "", "stable_divide"], [576, 2, 1, "", "stable_pow"], [577, 2, 1, "", "supports_inplace"], [578, 2, 1, "", "tmp_dir"], [579, 2, 1, "", "to_list"], [580, 2, 1, "", "to_numpy"], [581, 2, 1, "", "to_scalar"], [582, 2, 1, "", "try_else_none"], [583, 2, 1, "", "unstack"], [584, 2, 1, "", "value_is_nan"]], "ivy.functional.ivy.gradients": [[585, 1, 1, "", "GradientTracking"], [590, 2, 1, "", "adam_step"], [594, 2, 1, "", "adam_update"], [596, 2, 1, "", "execute_with_gradients"], [599, 2, 1, "", "gradient_descent_update"], [603, 2, 1, "", "is_variable"], [607, 2, 1, "", "lamb_update"], [611, 2, 1, "", "lars_update"], [615, 2, 1, "", "optimizer_update"], [617, 2, 1, "", "set_with_grads"], [618, 2, 1, "", "stop_gradient"], [619, 2, 1, "", "unset_with_grads"], [620, 2, 1, "", "variable"], [621, 2, 1, "", "variable_data"], [622, 2, 1, "", "with_grads"]], "ivy.functional.ivy.gradients.GradientTracking": [[585, 3, 1, "", "__init__"]], "ivy.functional.ivy.layers": [[624, 2, 1, "", "conv1d"], [625, 2, 1, "", "conv1d_transpose"], [626, 2, 1, "", "conv2d"], [627, 2, 1, "", "conv2d_transpose"], [628, 2, 1, "", "conv3d"], [629, 2, 1, "", "conv3d_transpose"], [630, 2, 1, "", "depthwise_conv2d"], [631, 2, 1, "", "dropout"], [632, 2, 1, "", "linear"], [633, 2, 1, "", "lstm_update"], [634, 2, 1, "", "multi_head_attention"], [635, 2, 1, "", "scaled_dot_product_attention"]], "ivy.functional.ivy.linear_algebra": [[639, 2, 1, "", "cholesky"], [642, 2, 1, "", "cross"], [645, 2, 1, "", "det"], [648, 2, 1, "", "diagonal"], [651, 2, 1, "", "eigh"], [654, 2, 1, "", "eigvalsh"], [657, 2, 1, "", "inv"], [661, 2, 1, "", "matmul"], [664, 2, 1, "", "matrix_norm"], [665, 2, 1, "", "matrix_power"], [668, 2, 1, "", "matrix_rank"], [671, 2, 1, "", "matrix_transpose"], [674, 2, 1, "", "outer"], [677, 2, 1, "", "pinv"], [680, 2, 1, "", "qr"], [681, 2, 1, "", "slogdet"], [684, 2, 1, "", "solve"], [687, 2, 1, "", "svd"], [690, 2, 1, "", "svdvals"], [693, 2, 1, "", "tensordot"], [696, 2, 1, "", "trace"], [699, 2, 1, "", "vecdot"], [702, 2, 1, "", "vector_norm"], [705, 2, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.functional.ivy.losses": [[710, 2, 1, "", "binary_cross_entropy"], [715, 2, 1, "", "cross_entropy"], [720, 2, 1, "", "sparse_cross_entropy"]], "ivy.functional.ivy.manipulation": [[726, 2, 1, "", "clip"], [731, 2, 1, "", "concat"], [735, 2, 1, "", "constant_pad"], [739, 2, 1, "", "expand_dims"], [743, 2, 1, "", "flip"], [747, 2, 1, "", "permute_dims"], [751, 2, 1, "", "repeat"], [755, 2, 1, "", "reshape"], [759, 2, 1, "", "roll"], [761, 2, 1, "", "split"], [765, 2, 1, "", "squeeze"], [769, 2, 1, "", "stack"], [773, 2, 1, "", "swapaxes"], [777, 2, 1, "", "tile"], [781, 2, 1, "", "zero_pad"]], "ivy.functional.ivy.meta": [[783, 2, 1, "", "fomaml_step"], [784, 2, 1, "", "maml_step"], [785, 2, 1, "", "reptile_step"]], "ivy.functional.ivy.nest": [[787, 2, 1, "", "all_nested_indices"], [788, 2, 1, "", "copy_nest"], [789, 2, 1, "", "index_nest"], [790, 2, 1, "", "insert_into_nest_at_index"], [791, 2, 1, "", "insert_into_nest_at_indices"], [792, 2, 1, "", "map"], [793, 2, 1, "", "map_nest_at_index"], [794, 2, 1, "", "map_nest_at_indices"], [795, 2, 1, "", "multi_index_nest"], [796, 2, 1, "", "nested_any"], [797, 2, 1, "", "nested_indices_where"], [798, 2, 1, "", "nested_map"], [799, 2, 1, "", "nested_multi_map"], [800, 2, 1, "", "prune_nest_at_index"], [801, 2, 1, "", "prune_nest_at_indices"], [802, 2, 1, "", "set_nest_at_index"], [803, 2, 1, "", "set_nest_at_indices"]], "ivy.functional.ivy.norms": [[808, 2, 1, "", "layer_norm"]], "ivy.functional.ivy.random": [[810, 2, 1, "", "multinomial"], [812, 2, 1, "", "randint"], [814, 2, 1, "", "random_normal"], [817, 2, 1, "", "random_uniform"], [819, 2, 1, "", "seed"], [820, 2, 1, "", "shuffle"]], "ivy.functional.ivy.searching": [[822, 2, 1, "", "argmax"], [823, 2, 1, "", "argmin"], [824, 2, 1, "", "nonzero"], [825, 2, 1, "", "where"]], "ivy.functional.ivy.set": [[827, 2, 1, "", "unique_all"], [832, 2, 1, "", "unique_counts"], [833, 2, 1, "", "unique_inverse"], [834, 2, 1, "", "unique_values"]], "ivy.functional.ivy.sorting": [[839, 2, 1, "", "argsort"], [844, 2, 1, "", "sort"]], "ivy.functional.ivy.statistical": [[850, 2, 1, "", "einsum"], [854, 2, 1, "", "max"], [858, 2, 1, "", "mean"], [862, 2, 1, "", "min"], [866, 2, 1, "", "prod"], [870, 2, 1, "", "std"], [874, 2, 1, "", "sum"], [878, 2, 1, "", "var"]], "ivy.functional.ivy.utility": [[883, 2, 1, "", "all"], [887, 2, 1, "", "any"]], "ivy.inspection": [[892, 2, 1, "", "add_array_specs"], [893, 2, 1, "", "fn_array_spec"]], "ivy.stateful": [[896, 0, 0, "-", "activations"], [899, 0, 0, "-", "converters"], [901, 0, 0, "-", "initializers"], [910, 0, 0, "-", "layers"], [922, 0, 0, "-", "module"], [924, 0, 0, "-", "norms"], [926, 0, 0, "-", "optimizers"], [932, 0, 0, "-", "sequential"]], "ivy.stateful.activations": [[897, 1, 1, "", "GEGLU"], [898, 1, 1, "", "GELU"]], "ivy.stateful.activations.GEGLU": [[897, 3, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[898, 3, 1, "", "__init__"]], "ivy.stateful.converters": [[900, 2, 1, "", "to_ivy_module"]], "ivy.stateful.initializers": [[901, 1, 1, "", "Constant"], [903, 1, 1, "", "FirstLayerSiren"], [904, 1, 1, "", "GlorotUniform"], [901, 1, 1, "", "KaimingNormal"], [906, 1, 1, "", "Ones"], [907, 1, 1, "", "Siren"], [901, 1, 1, "", "Uniform"], [909, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[901, 3, 1, "", "__init__"], [901, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[903, 3, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[904, 3, 1, "", "__init__"]], "ivy.stateful.initializers.KaimingNormal": [[901, 3, 1, "", "__init__"], [901, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[906, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[907, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[901, 3, 1, "", "__init__"], [901, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[909, 3, 1, "", "__init__"]], "ivy.stateful.layers": [[911, 1, 1, "", "Conv1D"], [912, 1, 1, "", "Conv1DTranspose"], [913, 1, 1, "", "Conv2D"], [914, 1, 1, "", "Conv2DTranspose"], [915, 1, 1, "", "Conv3D"], [916, 1, 1, "", "Conv3DTranspose"], [917, 1, 1, "", "DepthwiseConv2D"], [918, 1, 1, "", "Dropout"], [919, 1, 1, "", "LSTM"], [920, 1, 1, "", "Linear"], [921, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[911, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[912, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[913, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[914, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[915, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[916, 3, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[917, 3, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[918, 3, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[919, 3, 1, "", "__init__"], [919, 3, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[920, 3, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[921, 3, 1, "", "__init__"]], "ivy.stateful.module": [[923, 1, 1, "", "Module"]], "ivy.stateful.module.Module": [[923, 3, 1, "", "__init__"], [923, 3, 1, "", "build"], [923, 4, 1, "", "build_mode"], [923, 4, 1, "", "built"], [923, 3, 1, "", "check_submod_rets"], [923, 3, 1, "", "get_mod_key"], [923, 3, 1, "", "mod_depth"], [923, 3, 1, "", "mod_height"], [923, 3, 1, "", "mod_with_top_mod_key_chain"], [923, 3, 1, "", "save_weights"], [923, 3, 1, "", "show_mod_in_top_mod"], [923, 3, 1, "", "show_structure"], [923, 3, 1, "", "show_v_in_top_v"], [923, 3, 1, "", "sub_mods"], [923, 3, 1, "", "track_submod_call_order"], [923, 3, 1, "", "track_submod_rets"], [923, 3, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.norms": [[925, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[925, 3, 1, "", "__init__"]], "ivy.stateful.optimizers": [[927, 1, 1, "", "Adam"], [928, 1, 1, "", "LAMB"], [929, 1, 1, "", "LARS"], [930, 1, 1, "", "Optimizer"], [931, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[927, 3, 1, "", "__init__"], [927, 3, 1, "", "set_state"], [927, 4, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[928, 3, 1, "", "__init__"], [928, 3, 1, "", "set_state"], [928, 4, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[929, 3, 1, "", "__init__"], [929, 3, 1, "", "set_state"], [929, 4, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[930, 3, 1, "", "__init__"], [930, 3, 1, "", "set_state"], [930, 3, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[931, 3, 1, "", "__init__"], [931, 3, 1, "", "set_state"], [931, 4, 1, "", "state"]], "ivy.stateful.sequential": [[933, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[933, 3, 1, "", "__init__"]], "ivy.verbosity": [[936, 2, 1, "", "cprint"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:method", "4": "py:property", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"]}, "titleterms": {"backend": [0, 113, 119, 128, 145], "handler": [0, 128], "choose_random_backend": 2, "clear_backend_stack": 3, "current_backend": 4, "get_backend": 5, "set_backend": 6, "try_import_ivy_jax": 7, "try_import_ivy_mxnet": 8, "try_import_ivy_numpi": 9, "try_import_ivy_tf": 10, "try_import_ivy_torch": 11, "unset_backend": 12, "background": [13, 888], "ml": 14, "explos": 14, "standard": 15, "skeptic": 15, "complimentari": 15, "vs": [15, 145], "competit": 15, "do": 15, "work": [15, 21], "The": [15, 19, 130, 145], "arrai": [15, 116, 121, 126, 130, 196, 275, 280, 284, 288, 293, 297, 301, 305, 309, 313, 317, 321, 325, 329, 333, 337, 341, 345, 349, 354, 358, 362, 366, 370, 374, 378, 382, 386, 390, 394, 398, 402, 406, 410, 414, 418, 422, 426, 430, 434, 438, 444, 449, 453, 457, 461, 465, 469, 473, 477, 481, 485, 489, 494, 499, 504, 508, 513, 541, 588, 638, 641, 644, 647, 650, 653, 656, 659, 663, 667, 670, 673, 676, 679, 683, 686, 689, 692, 695, 698, 701, 704, 708, 713, 718, 724, 729, 733, 737, 741, 745, 749, 753, 757, 763, 767, 771, 775, 779, 806, 830, 837, 842, 848, 852, 856, 860, 864, 868, 872, 876, 881, 885], "api": [15, 20, 113, 116, 122, 128, 130, 132, 133], "why": 16, "unifi": [16, 130], "No": [16, 18], "more": 16, "re": 16, "implement": 16, "infinit": 16, "shelf": 16, "life": 16, "contribut": [17, 888], "set": [18, 57, 102, 119, 826], "up": 18, "clone": 18, "ivi": [18, 113, 115, 117, 121, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 196, 197, 198, 199, 275, 276, 277, 278, 280, 281, 282, 284, 285, 286, 288, 289, 290, 291, 293, 294, 295, 297, 298, 299, 301, 302, 303, 305, 306, 307, 309, 310, 311, 313, 314, 315, 317, 318, 319, 321, 322, 323, 325, 326, 327, 329, 330, 331, 333, 334, 335, 337, 338, 339, 341, 342, 343, 345, 346, 347, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 362, 363, 364, 366, 367, 368, 370, 371, 372, 374, 375, 376, 378, 379, 380, 382, 383, 384, 386, 387, 388, 390, 391, 392, 394, 395, 396, 398, 399, 400, 402, 403, 404, 406, 407, 408, 410, 411, 412, 414, 415, 416, 418, 419, 420, 422, 423, 424, 426, 427, 428, 430, 431, 432, 434, 435, 436, 438, 439, 440, 444, 445, 446, 447, 449, 450, 451, 453, 454, 455, 457, 458, 459, 461, 462, 463, 465, 466, 467, 469, 470, 471, 473, 474, 475, 477, 478, 479, 481, 482, 483, 485, 486, 487, 489, 490, 491, 493, 494, 495, 496, 498, 499, 500, 501, 503, 504, 505, 506, 508, 509, 510, 513, 514, 515, 516, 525, 526, 541, 542, 543, 544, 588, 589, 590, 591, 593, 594, 595, 598, 599, 600, 602, 603, 604, 606, 607, 608, 610, 611, 612, 614, 615, 616, 638, 639, 641, 642, 644, 645, 647, 648, 650, 651, 653, 654, 656, 657, 659, 660, 661, 663, 664, 667, 668, 670, 671, 673, 674, 676, 677, 679, 680, 683, 684, 686, 687, 689, 690, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 708, 709, 710, 711, 713, 714, 715, 716, 718, 719, 720, 721, 724, 725, 726, 727, 729, 730, 731, 733, 734, 735, 737, 738, 739, 741, 742, 743, 745, 746, 747, 749, 750, 751, 753, 754, 755, 757, 758, 759, 760, 763, 764, 765, 767, 768, 769, 771, 772, 773, 775, 776, 777, 779, 780, 781, 806, 807, 808, 812, 813, 816, 817, 818, 829, 830, 831, 832, 837, 838, 839, 840, 842, 843, 844, 845, 848, 849, 850, 852, 853, 854, 856, 857, 858, 860, 861, 862, 864, 865, 866, 868, 869, 870, 872, 873, 874, 876, 877, 878, 881, 882, 883, 885, 886, 887], "pycharm": 18, "virtual": 18, "environ": 18, "docker": [18, 19, 21], "us": [18, 21, 131], "miniconda": [18, 21], "venv": [18, 21], "interpret": 18, "window": 18, "maco": 18, "ubuntu": 18, "github": 18, "codespac": 18, "pre": 18, "commit": [18, 19], "basic": 19, "get": 19, "help": 19, "todo": 19, "list": 19, "issu": 19, "manag": 19, "your": 19, "fork": 19, "who": 19, "To": 19, "ask": 19, "With": 19, "command": 19, "line": 19, "browser": 19, "pull": 19, "request": 19, "small": 19, "often": 19, "run": 19, "test": [19, 116, 117], "local": 19, "open": 20, "task": 20, "function": [20, 118, 120, 122, 123, 124, 126, 128, 133, 145], "format": 20, "frontend": [20, 133], "build": [21, 128], "doc": 21, "dockerless": 21, "document": 21, "pipelin": [21, 145], "make_doc": 21, "sh": 21, "entrypoint": 21, "_make_doc": 21, "generate_src_rst_fil": 21, "py": 21, "sphinx": 21, "correct_built_html_fil": 21, "remove_fil": 21, "activ": [22, 67, 156, 896], "arraywithactiv": 23, "convers": 24, "args_to_ivi": 25, "args_to_n": 26, "to_ivi": 27, "to_n": 28, "creation": [29, 74, 167], "arraywithcr": 30, "data": [31, 76, 117, 123, 131, 145, 186, 826, 827, 828, 832, 834], "type": [31, 76, 118, 123, 145, 186], "arraywithdatatyp": 32, "devic": [33, 78, 124, 126, 223], "arraywithdevic": 34, "elementwis": [35, 80, 273], "arraywithelementwis": 36, "gener": [37, 82, 117, 511], "arraywithgener": 38, "gradient": [39, 84, 585], "arraywithgradi": 40, "imag": [41, 86], "arraywithimag": 42, "layer": [43, 88, 623, 910], "arraywithlay": 44, "linear": [45, 90, 632, 636, 920], "algebra": [45, 90, 636], "arraywithlinearalgebra": 46, "loss": [47, 92, 706], "arraywithloss": 48, "manipul": [49, 94, 722], "arraywithmanipul": 50, "norm": [51, 96, 804, 924], "arraywithnorm": 52, "random": [53, 98, 809], "arraywithrandom": 54, "search": [55, 100, 821], "arraywithsearch": 56, "arraywithset": 58, "sort": [59, 104, 835, 841, 842, 843, 844], "arraywithsort": 60, "statist": [61, 106, 846], "arraywithstatist": 62, "util": [63, 108, 879], "arraywithutil": 64, "wrap": [65, 110, 120], "add_ivy_array_instance_method": 66, "containerwithactiv": 68, "base": 69, "containerbas": 70, "contain": [71, 72, 122, 131, 197, 199, 276, 278, 281, 285, 289, 291, 294, 298, 302, 306, 310, 314, 318, 322, 326, 330, 334, 338, 342, 346, 350, 352, 355, 359, 363, 367, 371, 375, 379, 383, 387, 391, 395, 399, 403, 407, 411, 415, 419, 423, 427, 431, 435, 439, 445, 447, 450, 454, 458, 462, 466, 470, 474, 478, 482, 486, 490, 493, 495, 498, 500, 503, 505, 509, 514, 516, 525, 542, 544, 589, 591, 593, 595, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 660, 709, 711, 714, 716, 719, 721, 725, 727, 730, 734, 738, 742, 746, 750, 754, 758, 760, 764, 768, 772, 776, 780, 807, 813, 816, 818, 829, 831, 838, 840, 843, 845, 849, 853, 857, 861, 865, 869, 873, 877, 882, 886], "multidevcontain": 73, "containerwithcr": 75, "containerwithdatatyp": 77, "containerwithdevic": 79, "containerwithelementwis": 81, "containerwithgener": 83, "containerwithgradi": 85, "containerwithimag": 87, "containerwithlay": 89, "containerwithlinearalgebra": 91, "containerwithloss": 93, "containerwithmanipul": 95, "containerwithnorm": 97, "containerwithrandom": 99, "containerwithsearch": 101, "containerwithset": 103, "containerwithsort": 105, "containerwithstatist": 107, "containerwithutil": 109, "add_ivy_container_instance_method": 111, "deep": 112, "dive": 112, "navig": 113, "code": 113, "categor": 113, "submodul": 113, "design": [113, 127, 888], "docstr": [114, 115], "exampl": [115, 126], "tan": [115, 497, 499, 500, 501], "roll": [115, 756, 757, 758, 759], "add": [115, 287, 288, 289, 290], "hypothesi": 117, "self": 117, "consist": 117, "explicit": 117, "test_array_funct": 117, "primari": 118, "composit": 118, "mix": 118, "standalon": 118, "nestabl": [118, 122, 126], "conveni": 118, "nativ": 121, "handl": 121, "instanc": [122, 130], "method": [122, 130, 131], "static": 122, "special": 122, "modul": [123, 124, 132, 922, 923], "argument": [123, 124, 125, 126], "other": [123, 124], "inplac": 125, "updat": 125, "out": [125, 126], "copi": 125, "dtype": [126, 204], "number": 126, "oper": [126, 130, 145], "integ": 126, "sequenc": 126, "block": 128, "framework": [128, 129, 895], "graph": [128, 133], "compil": [128, 133, 164, 165], "class": [130, 895], "monkei": 130, "patch": 130, "construct": 131, "represent": 131, "recurs": 131, "built": 131, "ins": 131, "access": 131, "save": 131, "load": 131, "comparison": 131, "custom": [131, 145], "case": 131, "compartment": 131, "configur": 131, "network": [131, 133], "weight": 131, "state": [132, 145], "initi": [132, 901], "optim": [132, 926, 930], "transpil": 133, "role": 133, "convert": [133, 899], "model": [133, 140, 145], "builder": 135, "ecosystem": 136, "gym": [137, 144], "mech": 138, "memori": [139, 144], "robot": [141, 144], "vision": [142, 144], "extens": [143, 888], "appli": 144, "librari": 144, "mechan": 144, "faq": 145, "maintain": 145, "version": 145, "dynam": 145, "size": 145, "shape": [145, 573, 826, 827, 828, 832, 834], "check": 145, "control": 145, "flow": 145, "auto": 145, "differenti": 145, "replica": 145, "parallel": 145, "support": 145, "altern": 145, "structur": 145, "func": 146, "wrapper": 146, "handle_nest": 147, "handle_out_argu": 148, "infer_devic": 149, "infer_dtyp": 150, "inputs_to_ivy_arrai": 151, "inputs_to_native_arrai": 152, "outputs_to_ivy_arrai": 153, "to_native_arrays_and_back": 154, "gelu": [157, 898], "leaky_relu": 158, "relu": 159, "sigmoid": 160, "softmax": 161, "softplu": 162, "tanh": [163, 502, 504, 505, 506], "constant": 166, "note": [167, 173], "arang": 168, "asarrai": 169, "empti": 170, "empty_lik": 171, "ey": 172, "from_dlpack": 173, "full": 174, "full_lik": 175, "linspac": 176, "logspac": 177, "meshgrid": 178, "native_arrai": 179, "ones": 180, "ones_lik": 181, "tril": 182, "triu": 183, "zero": [184, 909], "zeros_lik": 185, "as_ivy_dtyp": 190, "as_native_dtyp": 191, "astyp": 192, "broadcast_arrai": 193, "broadcast_to": 194, "can_cast": [195, 196, 197, 198], "static_can_cast": 199, "closest_valid_dtyp": 200, "default_dtyp": 201, "default_float_dtyp": 202, "default_int_dtyp": 203, "dtype_bit": 205, "finfo": 206, "function_supported_dtyp": 207, "function_unsupported_dtyp": 208, "iinfo": 209, "invalid_dtyp": 210, "is_float_dtyp": 211, "is_int_dtyp": 212, "promote_typ": 213, "result_typ": 214, "set_default_dtyp": 215, "set_default_float_dtyp": 216, "set_default_int_dtyp": 217, "type_promote_arrai": 218, "unset_default_dtyp": 219, "unset_default_float_dtyp": 220, "unset_default_int_dtyp": 221, "valid_dtyp": 222, "devcloneditem": 225, "devclonedit": 226, "devclonednest": 227, "devdistitem": 228, "devdistit": 229, "devdistnest": 230, "devmapp": 232, "devmappermultiproc": 233, "multidevitem": 235, "multidevit": 236, "multidevnest": 237, "profil": 238, "as_ivy_dev": 239, "as_native_dev": 240, "clear_mem_on_dev": 241, "default_devic": 242, "dev": 243, "dev_clon": 244, "dev_clone_arrai": 245, "dev_clone_it": 246, "dev_clone_nest": 247, "dev_dist": 248, "dev_dist_arrai": 249, "dev_dist_it": 250, "dev_dist_nest": 251, "dev_unifi": 252, "dev_unify_arrai": 253, "dev_unify_it": 254, "dev_unify_nest": 255, "dev_util": 256, "get_all_ivy_arrays_on_dev": 257, "gpu_is_avail": 258, "num_cpu_cor": 259, "num_gpu": 260, "num_ivy_arrays_on_dev": 261, "percent_used_mem_on_dev": 262, "print_all_ivy_arrays_on_dev": 263, "set_default_devic": 264, "set_split_factor": 265, "split_factor": 266, "split_func_cal": 267, "to_devic": 268, "total_mem_on_dev": 269, "tpu_is_avail": 270, "unset_default_devic": 271, "used_mem_on_dev": 272, "ab": [274, 275, 276, 277], "static_ab": 278, "aco": [279, 280, 281, 282], "acosh": [283, 284, 285, 286], "static_add": 291, "asin": [292, 293, 294, 295], "asinh": [296, 297, 298, 299], "atan": [300, 301, 302, 303], "atan2": [304, 305, 306, 307], "atanh": [308, 309, 310, 311], "bitwise_and": [312, 313, 314, 315], "bitwise_invert": [316, 317, 318, 319], "bitwise_left_shift": [320, 321, 322, 323], "bitwise_or": [324, 325, 326, 327], "bitwise_right_shift": [328, 329, 330, 331], "bitwise_xor": [332, 333, 334, 335], "ceil": [336, 337, 338, 339], "co": [340, 341, 342, 343], "cosh": [344, 345, 346, 347], "divid": [348, 349, 350, 351], "static_divid": 352, "equal": [353, 354, 355, 356], "erf": [357, 358, 359, 360], "exp": [361, 362, 363, 364], "expm1": [365, 366, 367, 368], "floor": [369, 370, 371, 372], "floor_divid": [373, 374, 375, 376], "greater": [377, 378, 379, 380], "greater_equ": [381, 382, 383, 384], "isfinit": [385, 386, 387, 388], "isinf": [389, 390, 391, 392], "isnan": [393, 394, 395, 396], "less": [397, 398, 399, 400], "less_equ": [401, 402, 403, 404], "log": [405, 406, 407, 408], "log10": [409, 410, 411, 412], "log1p": [413, 414, 415, 416], "log2": [417, 418, 419, 420], "logaddexp": [421, 422, 423, 424], "logical_and": [425, 426, 427, 428], "logical_not": [429, 430, 431, 432], "logical_or": [433, 434, 435, 436], "logical_xor": [437, 438, 439, 440], "maximum": 441, "minimum": 442, "multipli": [443, 444, 445, 446], "static_multipli": 447, "neg": [448, 449, 450, 451], "not_equ": [452, 453, 454, 455], "posit": [456, 457, 458, 459], "pow": [460, 461, 462, 463], "remaind": [464, 465, 466, 467], "round": [468, 469, 470, 471], "sign": [472, 473, 474, 475], "sin": [476, 477, 478, 479], "sinh": [480, 481, 482, 483], "sqrt": [484, 485, 486, 487], "squar": [488, 489, 490, 491], "subtract": [492, 494, 495, 496], "static_subtract": 493, "static_tan": 498, "static_tanh": 503, "trunc": [507, 508, 509, 510], "all_equ": [512, 513, 514, 515], "static_all_equ": 516, "arg_info": 517, "arg_nam": 518, "array_equ": 519, "arrays_equ": 520, "assert_supports_inplac": 521, "cache_fn": 522, "clip_matrix_norm": 523, "clip_vector_norm": [524, 525, 526], "container_typ": 527, "copy_arrai": 528, "cumprod": 529, "cumsum": 530, "current_backend_str": 531, "default": 532, "einops_rearrang": 533, "einops_reduc": 534, "einops_repeat": 535, "exist": 536, "floormod": 537, "fourier_encod": 538, "gather": 539, "gather_nd": [540, 541, 542, 543], "static_gather_nd": 544, "get_all_arrays_in_memori": 545, "get_min_bas": 546, "get_min_denomin": 547, "get_num_dim": 548, "get_referrers_recurs": 549, "has_nan": 550, "indices_wher": 551, "inplace_arrays_support": 552, "inplace_decr": 553, "inplace_incr": 554, "inplace_upd": 555, "inplace_variables_support": 556, "is_arrai": 557, "is_ivy_arrai": 558, "is_ivy_contain": 559, "is_native_arrai": 560, "match_kwarg": 561, "multiprocess": 562, "num_arrays_in_memori": 563, "one_hot": 564, "print_all_arrays_in_memori": 565, "queue_timeout": 566, "scatter_flat": 567, "scatter_nd": 568, "set_min_bas": 569, "set_min_denomin": 570, "set_queue_timeout": 571, "set_tmp_dir": 572, "shape_to_tupl": 574, "stable_divid": 575, "stable_pow": 576, "supports_inplac": 577, "tmp_dir": 578, "to_list": 579, "to_numpi": 580, "to_scalar": 581, "try_else_non": 582, "unstack": 583, "value_is_nan": 584, "adam_step": [587, 588, 589, 590], "static_adam_step": 591, "adam_upd": [592, 593, 594], "static_adam_upd": 595, "execute_with_gradi": 596, "gradient_descent_upd": [597, 598, 599], "static_gradient_descent_upd": 600, "is_vari": [601, 602, 603], "static_is_vari": 604, "lamb_upd": [605, 606, 607], "static_lamb_upd": 608, "lars_upd": [609, 610, 611], "static_lars_upd": 612, "optimizer_upd": [613, 614, 615], "static_optimizer_upd": 616, "set_with_grad": 617, "stop_gradi": 618, "unset_with_grad": 619, "variabl": 620, "variable_data": 621, "with_grad": 622, "conv1d": [624, 911], "conv1d_transpos": 625, "conv2d": [626, 913], "conv2d_transpos": 627, "conv3d": [628, 915], "conv3d_transpos": 629, "depthwise_conv2d": 630, "dropout": [631, 918], "lstm_updat": 633, "multi_head_attent": 634, "scaled_dot_product_attent": 635, "choleski": [637, 638, 639], "cross": [640, 641, 642], "det": [643, 644, 645], "diagon": [646, 647, 648], "eigh": [649, 650, 651], "eigvalsh": [652, 653, 654], "inv": [655, 656, 657], "matmul": [658, 659, 660, 661], "matrix_norm": [662, 663, 664], "matrix_pow": 665, "matrix_rank": [666, 667, 668], "matrix_transpos": [669, 670, 671], "outer": [672, 673, 674], "pinv": [675, 676, 677], "qr": [678, 679, 680], "slogdet": 681, "solv": [682, 683, 684], "svd": [685, 686, 687], "svdval": [688, 689, 690], "tensordot": [691, 692, 693], "trace": [694, 695, 696], "vecdot": [697, 698, 699], "vector_norm": [700, 701, 702], "vector_to_skew_symmetric_matrix": [703, 704, 705], "binary_cross_entropi": [707, 708, 709, 710], "static_binary_cross_entropi": 711, "cross_entropi": [712, 713, 714, 715], "static_cross_entropi": 716, "sparse_cross_entropi": [717, 718, 719, 720], "static_sparse_cross_entropi": 721, "clip": [723, 724, 725, 726], "static_clip": 727, "concat": [728, 729, 730, 731], "constant_pad": [732, 733, 734, 735], "expand_dim": [736, 737, 738, 739], "flip": [740, 741, 742, 743], "permute_dim": [744, 745, 746, 747], "repeat": [748, 749, 750, 751], "reshap": [752, 753, 754, 755], "static_rol": 760, "split": 761, "squeez": [762, 763, 764, 765], "stack": [766, 767, 768, 769], "swapax": [770, 771, 772, 773], "tile": [774, 775, 776, 777], "zero_pad": [778, 779, 780, 781], "meta": 782, "fomaml_step": 783, "maml_step": 784, "reptile_step": 785, "nest": 786, "all_nested_indic": 787, "copy_nest": 788, "index_nest": 789, "insert_into_nest_at_index": 790, "insert_into_nest_at_indic": 791, "map": 792, "map_nest_at_index": 793, "map_nest_at_indic": 794, "multi_index_nest": 795, "nested_ani": 796, "nested_indices_wher": 797, "nested_map": 798, "nested_multi_map": 799, "prune_nest_at_index": 800, "prune_nest_at_indic": 801, "set_nest_at_index": 802, "set_nest_at_indic": 803, "layer_norm": [805, 806, 807, 808], "multinomi": 810, "randint": [811, 812], "static_randint": 813, "random_norm": 814, "random_uniform": [815, 816, 817], "static_random_uniform": 818, "seed": 819, "shuffl": 820, "argmax": 822, "argmin": 823, "nonzero": 824, "where": 825, "depend": [826, 827, 828, 832, 834], "output": [826, 827, 828, 832, 834], "unique_al": 827, "unique_count": [828, 830, 831, 832], "static_unique_count": 829, "unique_invers": 833, "unique_valu": 834, "argsort": [836, 837, 838, 839], "static_argsort": 840, "static_sort": 845, "einsum": [847, 848, 849, 850], "max": [851, 852, 853, 854], "mean": [855, 856, 857, 858], "min": [859, 860, 861, 862], "prod": [863, 864, 865, 866], "std": [867, 868, 869, 870], "sum": [871, 872, 873, 874], "var": [875, 876, 877, 878], "all": [880, 881, 882, 883], "ani": [884, 885, 886, 887], "content": 888, "overview": 888, "quick": 888, "start": 888, "roadmap": [888, 894], "citat": 888, "inspect": 891, "add_array_spec": 892, "fn_array_spec": 893, "geglu": 897, "to_ivy_modul": 900, "firstlayersiren": 903, "glorotuniform": 904, "Ones": 906, "siren": 907, "conv1dtranspos": 912, "conv2dtranspos": 914, "conv3dtranspos": 916, "depthwiseconv2d": 917, "lstm": 919, "multiheadattent": 921, "layernorm": 925, "adam": 927, "lamb": 928, "lar": 929, "sgd": 931, "sequenti": [932, 933], "verbos": 935, "cprint": 936}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})